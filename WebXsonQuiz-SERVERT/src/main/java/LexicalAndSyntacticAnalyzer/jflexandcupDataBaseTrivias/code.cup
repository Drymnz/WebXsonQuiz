package LexicalAndSyntacticAnalyzer.jflexandcupDataBaseTrivias;

import java_cup.runtime.*;
import java.util.ArrayList;

import LexicalAndSyntacticAnalyzer.analyzer.Token;
import reports.*;
import LexicalAndSyntacticAnalyzer.dataAnalyzer.*;
import LexicalAndSyntacticAnalyzer.dataAnalyzer.RequestAnalyzer;
import LexicalAndSyntacticAnalyzer.ListRequests;
import com.cunoc.webxsonquiz.data.servert.ComponentTrivia;
import com.cunoc.webxsonquiz.data.servert.Trivia;
import LexicalAndSyntacticAnalyzer.objectAnalyzer.ConverterAnalyzerToObjectTrivia;
import com.cunoc.webxsonquiz.data.servert.User;
import LexicalAndSyntacticAnalyzer.objectAnalyzer.ConverterAnalyzerToObjectComponentTrivia;

/**
     * ***STAR CODE*******
     */
    parser code {:

private ArrayList<ReportErrorInterpreter> listError = new ArrayList();
private ArrayList<DataAnalyzer> dataStack = new ArrayList();
private ArrayList<DataAnalyzer> dataStackComponet = new ArrayList();
private ArrayList<RequestAnalyzer> listRquest = new ArrayList();
private ArrayList<Trivia> listTrivia = new ArrayList<>();
private ArrayList<ComponentTrivia> listComponentTrivia = new ArrayList<>();


	  public MyParserDataBaseTrivias(LexemaDataBaseTrivias lexer) {
        super(lexer);
    }

    //erorr
    public void syntax_error(Symbol cur_token) {
        String nameTerminal = symbl_name_from_id(this.cur_token.sym);
        int numberTerminal = this.cur_token.sym;
        ///codigo para el objeto
        TypeIntreprete type = TypeIntreprete.SYNTACTIC;
        int line = cur_token.left+1;
        int columna = cur_token.right +1;
        String lexema = this.cur_token.value.toString();
        Token token = new Token(line, columna, lexema);
        System.out.println(token.toString());
        this.listError.add(new ReportErrorInterpreter(type, token, ReportingConstants.ERROR_SICTATICO));
    }

    //Returnar el listado de errores
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    //Returnar el listado de Rquest
    public ArrayList<RequestAnalyzer> getListRquest(){
      return this.listRquest;
    }

    //Returnar el listado de Trivias
    public ArrayList<Trivia> getListTrivias(){
      return this.listTrivia;
    }

    /**
     * ***END CODE*******
     */
:}

/* Terminales */
/*sxon*/
terminal String STRING;
/*SIMBOLOS DE OPERACION*/
/*AGRUPACION*/
terminal BRACKETS_O,BRACKETS_C;
terminal KEYS_O,KEYS_C;
//tipos de solicitud
terminal COLNO,COMA,STRING_DATE;
terminal NAME_USER,PASS_USER,NAME_PERSONAL_USER,INSTITUCION;
terminal ID,NAME,TIME,THEME,ID_USER,DATE,STRUCTURE,ID_COMPONENT,TYPE,INDEX,TEXT,OPTIONS,ROW,COLUMN,RESULT,ID_TRIVIA;
/* No terminales */
//inicio
non terminal bucle_inicio;
non terminal inicio;
//solicitud
non terminal json;
non terminal obj_json,data,data_user,datas_user;
non terminal secuenci_json;
non terminal dato_component,datos_component,componet,componets;
/* Gram√°tica */
start with inicio;
/******operaciones matematicas*****/
inicio ::= bucle_inicio
    | error bucle_inicio
    ;

bucle_inicio 
  ::= bucle_inicio json
  |json
  ;

json::=
  BRACKETS_O secuenci_json BRACKETS_C
  |secuenci_json
  ;

secuenci_json 
  ::=obj_json COMA secuenci_json
  |obj_json
  ;  

obj_json ::=
  KEYS_O datas_user KEYS_C   
  {:
    Trivia newTrivia = (new ConverterAnalyzerToObjectTrivia(new User("", "", "", "", ""))).newTrivia(new RequestAnalyzer(dataStack, ListRequests.NEW_TRIVIA));
    newTrivia.getListComponet().addAll(listComponentTrivia);
    listTrivia.add(newTrivia);
    listComponentTrivia = new ArrayList<>();
  :}
  ;

datas_user 
  ::= datas_user COMA  data_user
  |data_user
  ;

data_user::=
  ID data:a 
  {:if(a!=null)dataStack.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.ID_TRIVIA,a.toString()));:}
  |TIME data:a 
  {:if(a!=null)dataStack.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.TIEMPO_PREGUNTA,a.toString()));:}
  |NAME data:a
   {:if(a!=null)dataStack.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.NAME,a.toString()));:}
  |THEME data:a
  {:if(a!=null)dataStack.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.TEMA,a.toString()));:}
  |ID_USER data:a
  {:if(a!=null)dataStack.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.USUARIO_CREACION,a.toString()));:}
  |DATE data:a
  {:if(a!=null)dataStack.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.DATE,a.toString()));:}
  | STRUCTURE COLNO BRACKETS_O componets  BRACKETS_C
  ;

componets
  ::= componets COMA componet
  | componet
  ;

componet
  ::= KEYS_O datos_component KEYS_C
  {:
  listComponentTrivia.add((new ConverterAnalyzerToObjectComponentTrivia()).newComponent(new RequestAnalyzer(dataStackComponet, ListRequests.AGREGAR_COMPONENTE)));
  dataStackComponet = new ArrayList();
  :}
  ;

datos_component
  ::= datos_component COMA dato_component
  |dato_component
  ;

dato_component
  ::=ID_COMPONENT data:a 
  {:if(a!=null)dataStackComponet.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.ID,a.toString()));:}
  |ID_TRIVIA data:a 
  {:if(a!=null)dataStackComponet.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.TRIVIA,a.toString()));:}
  |TYPE  data:a 
  {:if(a!=null)dataStackComponet.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.CLASE,a.toString()));:}
  |TEXT  data:a 
  {:if(a!=null)dataStackComponet.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.TEXTO_VISIBLE,a.toString()));:}
  |RESULT data:a 
  {:if(a!=null)dataStackComponet.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.RESPUESTA,a.toString()));:}
  |INDEX data:a 
  {:if(a!=null)dataStackComponet.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.INDICE,a.toString()));:}
  |OPTIONS data:a 
  {:if(a!=null)dataStackComponet.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.OPCIONES,a.toString()));:}
  |ROW  data:a 
  {:if(a!=null)dataStackComponet.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.FILAS,a.toString()));:}
  |COLUMN data:a 
  {:if(a!=null)dataStackComponet.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.COLUMNAS,a.toString()));:}
  ;

data ::=COLNO STRING:a {:RESULT = a;:}
  | COLNO STRING_DATE:a {:RESULT = a;:}
  | error
  | 
  ;
