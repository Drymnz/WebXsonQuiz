
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package LexicalAndSyntacticAnalyzer.jflexandcupDataBaseTrivias;

import java_cup.runtime.*;
import java.util.ArrayList;
import LexicalAndSyntacticAnalyzer.analyzer.Token;
import reports.*;
import LexicalAndSyntacticAnalyzer.dataAnalyzer.*;
import LexicalAndSyntacticAnalyzer.dataAnalyzer.RequestAnalyzer;
import LexicalAndSyntacticAnalyzer.ListRequests;
import com.cunoc.webxsonquiz.data.servert.ComponentTrivia;
import com.cunoc.webxsonquiz.data.servert.Trivia;
import LexicalAndSyntacticAnalyzer.objectAnalyzer.ConverterAnalyzerToObjectTrivia;
import com.cunoc.webxsonquiz.data.servert.User;
import LexicalAndSyntacticAnalyzer.objectAnalyzer.ConverterAnalyzerToObjectComponentTrivia;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MyParserDataBaseTrivias extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return MySymLoginDataBaseTrivias.class;
}

  /** Default constructor. */
  @Deprecated
  public MyParserDataBaseTrivias() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MyParserDataBaseTrivias(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MyParserDataBaseTrivias(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\002\004\000\002\003\003\000\002\003" +
    "\004\000\002\002\004\000\002\002\003\000\002\004\005" +
    "\000\002\004\003\000\002\011\005\000\002\011\003\000" +
    "\002\005\005\000\002\010\005\000\002\010\003\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\007" +
    "\000\002\015\005\000\002\015\003\000\002\014\005\000" +
    "\002\013\005\000\002\013\003\000\002\012\004\000\002" +
    "\012\004\000\002\012\004\000\002\012\004\000\002\012" +
    "\004\000\002\012\004\000\002\012\004\000\002\012\004" +
    "\000\002\012\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\003\000\002\006\002\000\002" +
    "\016\003\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\003" +
    "\000\002\017\006\000\002\020\003\000\002\020\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\010\003\006\015\012\017\010\001\002\000" +
    "\012\002\ufffb\015\ufffb\017\ufffb\022\016\001\002\000\014" +
    "\002\ufff9\015\ufff9\016\ufff9\017\ufff9\022\ufff9\001\002\000" +
    "\006\015\012\017\010\001\002\000\010\002\ufffd\015\ufffd" +
    "\017\ufffd\001\002\000\020\023\030\024\032\025\024\026" +
    "\022\027\026\030\023\031\027\001\002\000\010\002\000" +
    "\015\012\017\010\001\002\000\004\017\010\001\002\000" +
    "\004\002\014\001\002\000\004\002\001\001\002\000\006" +
    "\016\017\022\016\001\002\000\004\017\010\001\002\000" +
    "\010\002\ufffc\015\ufffc\017\ufffc\001\002\000\014\002\ufffa" +
    "\015\ufffa\016\ufffa\017\ufffa\022\ufffa\001\002\000\010\002" +
    "\ufffe\015\ufffe\017\ufffe\001\002\000\012\003\033\020\uffdc" +
    "\021\034\022\uffdc\001\002\000\012\003\033\020\uffdc\021" +
    "\034\022\uffdc\001\002\000\012\003\033\020\uffdc\021\034" +
    "\022\uffdc\001\002\000\006\020\ufff6\022\ufff6\001\002\000" +
    "\012\003\033\020\uffdc\021\034\022\uffdc\001\002\000\004" +
    "\021\067\001\002\000\012\003\033\020\uffdc\021\034\022" +
    "\uffdc\001\002\000\006\020\064\022\063\001\002\000\012" +
    "\003\033\020\uffdc\021\034\022\uffdc\001\002\000\006\020" +
    "\uffdd\022\uffdd\001\002\000\012\004\037\011\042\013\041" +
    "\014\036\001\002\000\006\020\ufff3\022\ufff3\001\002\000" +
    "\006\020\uffde\022\uffde\001\002\000\006\020\uffe0\022\uffe0" +
    "\001\002\000\006\020\uffdf\022\uffdf\001\002\000\022\005" +
    "\uffd5\006\uffd5\007\uffd5\010\uffd5\011\060\012\uffd5\020\uffd5" +
    "\022\uffd5\001\002\000\006\011\042\013\041\001\002\000" +
    "\016\005\046\006\047\007\044\010\045\020\uffdb\022\uffdb" +
    "\001\002\000\006\011\042\013\041\001\002\000\006\011" +
    "\042\013\041\001\002\000\006\011\042\013\041\001\002" +
    "\000\006\011\042\013\041\001\002\000\020\005\uffd9\006" +
    "\uffd9\007\044\010\045\012\uffd9\020\uffd9\022\uffd9\001\002" +
    "\000\020\005\uffda\006\uffda\007\044\010\045\012\uffda\020" +
    "\uffda\022\uffda\001\002\000\020\005\uffd7\006\uffd7\007\uffd7" +
    "\010\uffd7\012\uffd7\020\uffd7\022\uffd7\001\002\000\020\005" +
    "\uffd8\006\uffd8\007\uffd8\010\uffd8\012\uffd8\020\uffd8\022\uffd8" +
    "\001\002\000\014\005\046\006\047\007\044\010\045\012" +
    "\055\001\002\000\024\005\uffd3\006\uffd3\007\uffd3\010\uffd3" +
    "\011\042\012\uffd3\013\041\020\uffd3\022\uffd3\001\002\000" +
    "\020\005\uffd6\006\uffd6\007\uffd6\010\uffd6\012\uffd6\020\uffd6" +
    "\022\uffd6\001\002\000\020\005\uffd2\006\uffd2\007\uffd2\010" +
    "\uffd2\012\uffd2\020\uffd2\022\uffd2\001\002\000\006\011\042" +
    "\013\041\001\002\000\014\005\046\006\047\007\044\010" +
    "\045\012\062\001\002\000\020\005\uffd4\006\uffd4\007\uffd4" +
    "\010\uffd4\012\uffd4\020\uffd4\022\uffd4\001\002\000\020\023" +
    "\030\024\032\025\024\026\022\027\026\030\023\031\027" +
    "\001\002\000\014\002\ufff8\015\ufff8\016\ufff8\017\ufff8\022" +
    "\ufff8\001\002\000\006\020\ufff7\022\ufff7\001\002\000\006" +
    "\020\ufff5\022\ufff5\001\002\000\004\015\070\001\002\000" +
    "\004\017\072\001\002\000\006\016\124\022\123\001\002" +
    "\000\024\032\105\033\101\034\075\035\102\036\077\037" +
    "\100\040\106\041\104\042\074\001\002\000\006\016\uffed" +
    "\022\uffed\001\002\000\012\003\033\020\uffdc\021\034\022" +
    "\uffdc\001\002\000\012\003\033\020\uffdc\021\034\022\uffdc" +
    "\001\002\000\006\020\uffea\022\uffea\001\002\000\012\003" +
    "\033\020\uffdc\021\034\022\uffdc\001\002\000\012\003\033" +
    "\020\uffdc\021\034\022\uffdc\001\002\000\012\003\033\020" +
    "\uffdc\021\034\022\uffdc\001\002\000\012\003\033\020\uffdc" +
    "\021\034\022\uffdc\001\002\000\006\020\113\022\112\001" +
    "\002\000\012\003\033\020\uffdc\021\034\022\uffdc\001\002" +
    "\000\012\003\033\020\uffdc\021\034\022\uffdc\001\002\000" +
    "\012\003\033\020\uffdc\021\034\022\uffdc\001\002\000\006" +
    "\020\uffe1\022\uffe1\001\002\000\006\020\uffe9\022\uffe9\001" +
    "\002\000\006\020\uffe5\022\uffe5\001\002\000\024\032\105" +
    "\033\101\034\075\035\102\036\077\037\100\040\106\041" +
    "\104\042\074\001\002\000\006\016\uffec\022\uffec\001\002" +
    "\000\006\020\uffeb\022\uffeb\001\002\000\006\020\uffe6\022" +
    "\uffe6\001\002\000\006\020\uffe7\022\uffe7\001\002\000\006" +
    "\020\uffe2\022\uffe2\001\002\000\006\020\uffe3\022\uffe3\001" +
    "\002\000\006\020\uffe4\022\uffe4\001\002\000\006\020\uffe8" +
    "\022\uffe8\001\002\000\004\017\072\001\002\000\006\020" +
    "\uffef\022\uffef\001\002\000\006\016\uffee\022\uffee\001\002" +
    "\000\006\020\ufff1\022\ufff1\001\002\000\006\020\ufff4\022" +
    "\ufff4\001\002\000\006\020\ufff0\022\ufff0\001\002\000\006" +
    "\020\ufff2\022\ufff2\001\002\000\010\002\uffff\015\012\017" +
    "\010\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\014\002\010\003\012\004\006\005\004\011" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\002\131\004\006\005\004\011\003\001\001\000\002\001" +
    "\001\000\006\007\024\010\030\001\001\000\010\004\020" +
    "\005\004\011\003\001\001\000\006\005\004\011\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\130\001\001\000\004" +
    "\006\127\001\001\000\004\006\126\001\001\000\002\001" +
    "\001\000\004\006\125\001\001\000\002\001\001\000\004" +
    "\006\065\001\001\000\002\001\001\000\004\006\034\001" +
    "\001\000\002\001\001\000\006\016\037\017\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\053\001\001" +
    "\000\002\001\001\000\004\017\052\001\001\000\004\017" +
    "\051\001\001\000\004\017\050\001\001\000\004\017\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\055\001\001\000\004" +
    "\017\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\072" +
    "\015\070\001\001\000\002\001\001\000\006\012\075\013" +
    "\102\001\001\000\002\001\001\000\004\006\121\001\001" +
    "\000\004\006\120\001\001\000\002\001\001\000\004\006" +
    "\117\001\001\000\004\006\116\001\001\000\004\006\115" +
    "\001\001\000\004\006\114\001\001\000\002\001\001\000" +
    "\004\006\110\001\001\000\004\006\107\001\001\000\004" +
    "\006\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\020\005\004\011" +
    "\003\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MyParserDataBaseTrivias$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MyParserDataBaseTrivias$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MyParserDataBaseTrivias$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




private ArrayList<ReportErrorInterpreter> listError = new ArrayList();
private ArrayList<DataAnalyzer> dataStack = new ArrayList();
private ArrayList<DataAnalyzer> dataStackComponet = new ArrayList();
private ArrayList<RequestAnalyzer> listRquest = new ArrayList();
private ArrayList<Trivia> listTrivia = new ArrayList<>();
private ArrayList<ComponentTrivia> listComponentTrivia = new ArrayList<>();


	  public MyParserDataBaseTrivias(LexemaDataBaseTrivias lexer) {
        super(lexer);
    }

    //erorr
    public void syntax_error(Symbol cur_token) {
        String nameTerminal = symbl_name_from_id(this.cur_token.sym);
        int numberTerminal = this.cur_token.sym;
        ///codigo para el objeto
        TypeIntreprete type = TypeIntreprete.SYNTACTIC;
        int line = cur_token.left+1;
        int columna = cur_token.right +1;
        String lexema = this.cur_token.value.toString();
        Token token = new Token(line, columna, lexema);
        System.out.println(token.toString());
        this.listError.add(new ReportErrorInterpreter(type, token, ReportingConstants.ERROR_SICTATICO));
    }

    //Returnar el listado de errores
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    //Returnar el listado de Rquest
    public ArrayList<RequestAnalyzer> getListRquest(){
      return this.listRquest;
    }

    //Returnar el listado de Trivias
    public ArrayList<Trivia> getListTrivias(){
      return this.listTrivia;
    }

    /**
     * ***END CODE*******
     */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MyParserDataBaseTrivias$actions {
  private final MyParserDataBaseTrivias parser;

  /** Constructor */
  CUP$MyParserDataBaseTrivias$actions(MyParserDataBaseTrivias parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MyParserDataBaseTrivias$do_action_part00000000(
    int                        CUP$MyParserDataBaseTrivias$act_num,
    java_cup.runtime.lr_parser CUP$MyParserDataBaseTrivias$parser,
    java.util.Stack            CUP$MyParserDataBaseTrivias$stack,
    int                        CUP$MyParserDataBaseTrivias$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MyParserDataBaseTrivias$result;

      /* select the action based on the action number */
      switch (CUP$MyParserDataBaseTrivias$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)).value;
		RESULT = start_val;
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MyParserDataBaseTrivias$parser.done_parsing();
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= bucle_inicio 
            {
              Object RESULT =null;

              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error bucle_inicio 
            {
              Object RESULT =null;

              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bucle_inicio ::= bucle_inicio json 
            {
              Object RESULT =null;

              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("bucle_inicio",0, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bucle_inicio ::= json 
            {
              Object RESULT =null;

              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("bucle_inicio",0, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // json ::= BRACKETS_O secuenci_json BRACKETS_C 
            {
              Object RESULT =null;

              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("json",2, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // json ::= secuenci_json 
            {
              Object RESULT =null;

              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("json",2, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // secuenci_json ::= secuenci_json COMA obj_json 
            {
              Object RESULT =null;

              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("secuenci_json",7, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // secuenci_json ::= obj_json 
            {
              Object RESULT =null;

              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("secuenci_json",7, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // obj_json ::= KEYS_O datas_trivia KEYS_C 
            {
              Object RESULT =null;
		
    Trivia newTrivia = (new ConverterAnalyzerToObjectTrivia(new User("", "", "", "", ""))).newTrivia(new RequestAnalyzer(dataStack, ListRequests.NEW_TRIVIA));
    newTrivia.getListComponet().addAll(listComponentTrivia);
    listTrivia.add(newTrivia);
    listComponentTrivia = new ArrayList<>();
    dataStack = new ArrayList(); 
  
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("obj_json",3, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // datas_trivia ::= datas_trivia COMA data_trivia 
            {
              Object RESULT =null;

              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("datas_trivia",6, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // datas_trivia ::= data_trivia 
            {
              Object RESULT =null;

              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("datas_trivia",6, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // data_trivia ::= ID data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		if(a!=null)dataStack.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.ID_TRIVIA,a.toString()));
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("data_trivia",5, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // data_trivia ::= TIME data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		if(a!=null)dataStack.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.TIEMPO_PREGUNTA,a.toString()));
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("data_trivia",5, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // data_trivia ::= NAME data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		if(a!=null)dataStack.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.NAME,a.toString()));
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("data_trivia",5, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // data_trivia ::= THEME data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		if(a!=null)dataStack.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.TEMA,a.toString()));
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("data_trivia",5, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // data_trivia ::= ID_USER data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		if(a!=null)dataStack.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.USUARIO_CREACION,a.toString()));
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("data_trivia",5, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // data_trivia ::= DATE data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		if(a!=null)dataStack.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.DATE,a.toString()));
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("data_trivia",5, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // data_trivia ::= STRUCTURE COLNO BRACKETS_O componets BRACKETS_C 
            {
              Object RESULT =null;

              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("data_trivia",5, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-4)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // componets ::= componets COMA componet 
            {
              Object RESULT =null;

              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("componets",11, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // componets ::= componet 
            {
              Object RESULT =null;

              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("componets",11, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // componet ::= KEYS_O datos_component KEYS_C 
            {
              Object RESULT =null;
		
  listComponentTrivia.add((new ConverterAnalyzerToObjectComponentTrivia()).newComponent(new RequestAnalyzer(dataStackComponet, ListRequests.AGREGAR_COMPONENTE)));
  dataStackComponet = new ArrayList();
  
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("componet",10, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // datos_component ::= datos_component COMA dato_component 
            {
              Object RESULT =null;

              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("datos_component",9, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // datos_component ::= dato_component 
            {
              Object RESULT =null;

              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("datos_component",9, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // dato_component ::= ID_COMPONENT data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		if(a!=null)dataStackComponet.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.ID,a.toString()));
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("dato_component",8, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // dato_component ::= ID_TRIVIA data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		if(a!=null)dataStackComponet.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.TRIVIA,a.toString()));
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("dato_component",8, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // dato_component ::= TYPE data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		if(a!=null)dataStackComponet.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.CLASE,a.toString()));
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("dato_component",8, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // dato_component ::= TEXT data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		if(a!=null)dataStackComponet.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.TEXTO_VISIBLE,a.toString()));
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("dato_component",8, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // dato_component ::= RESULT data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		if(a!=null)dataStackComponet.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.RESPUESTA,a.toString()));
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("dato_component",8, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // dato_component ::= INDEX data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		if(a!=null)dataStackComponet.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.INDICE,a.toString()));
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("dato_component",8, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // dato_component ::= OPTIONS data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		if(a!=null)dataStackComponet.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.OPCIONES,a.toString()));
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("dato_component",8, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // dato_component ::= ROW data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		if(a!=null)dataStackComponet.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.FILAS,a.toString()));
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("dato_component",8, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // dato_component ::= COLUMN data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		if(a!=null)dataStackComponet.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.COLUMNAS,a.toString()));
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("dato_component",8, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // data ::= COLNO STRING 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		RESULT = a;
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("data",4, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // data ::= COLNO inico_opereacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		RESULT = a;
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("data",4, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // data ::= COLNO STRING_DATE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		RESULT = a;
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("data",4, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // data ::= error 
            {
              Object RESULT =null;

              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("data",4, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // data ::= 
            {
              Object RESULT =null;

              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("data",4, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // inico_opereacion ::= operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		
    //////////////////////////////////////////
		Double aDouble = 0.0;
    if (a!=null) {
        aDouble =   Double.valueOf(a.toString());
        RESULT = aDouble;
    }else{
      RESULT = aDouble;
    }
    //////////////////////////////////////////
    
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("inico_opereacion",12, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operacion ::= operacion SUMAR operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double resultDouble = aDouble + bDouble;
      RESULT = resultDouble;
    }else{
      RESULT = aDouble;
    }
    /////////////////////////////////////////////
    
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("operacion",13, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operacion ::= operacion RESTAR operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double resultDouble = aDouble - bDouble;
      RESULT = resultDouble;
    }else{
      RESULT = aDouble;
    }
    /////////////////////////////////////////////

    
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("operacion",13, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operacion ::= operacion DIVIDIR operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      if (bDouble>0) {
        Double result = ( bDouble/ bDouble);
        RESULT = result;
      }else{
        /// manejar un error de sintasis
        RESULT = aDouble;// si es 15/0
      }
    }else{
      RESULT = aDouble;
    }
    /////////////////////////////////////////////

    
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("operacion",13, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operacion ::= operacion MULTIPLICAR operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double result = aDouble * bDouble;
      RESULT = result;
    }else{
      RESULT = aDouble;
    }
    /////////////////////////////////////////////

    
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("operacion",13, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operacion ::= PARENTESIS_A operacion parente 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double result = aDouble * bDouble;
      RESULT = result;
    }else{
      RESULT = a;
    }
    /////////////////////////////////////////////
    
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("operacion",13, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operacion ::= REAL_NUMEBERS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		RESULT = a;
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("operacion",13, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operacion ::= REAL_NUMEBERS PARENTESIS_A operacion PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)).value;
		
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double result = aDouble * bDouble;
      RESULT = result;
    }else{
      RESULT = a;
    }
    /////////////////////////////////////////////
    
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("operacion",13, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-3)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parente ::= PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("parente",14, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parente ::= PARENTESIS_C operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		RESULT = a;
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("parente",14, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MyParserDataBaseTrivias$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MyParserDataBaseTrivias$do_action(
    int                        CUP$MyParserDataBaseTrivias$act_num,
    java_cup.runtime.lr_parser CUP$MyParserDataBaseTrivias$parser,
    java.util.Stack            CUP$MyParserDataBaseTrivias$stack,
    int                        CUP$MyParserDataBaseTrivias$top)
    throws java.lang.Exception
    {
              return CUP$MyParserDataBaseTrivias$do_action_part00000000(
                               CUP$MyParserDataBaseTrivias$act_num,
                               CUP$MyParserDataBaseTrivias$parser,
                               CUP$MyParserDataBaseTrivias$stack,
                               CUP$MyParserDataBaseTrivias$top);
    }
}

}
