
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package LexicalAndSyntacticAnalyzer.jflexandcupDataBaseTrivias;

import java_cup.runtime.*;
import java.util.ArrayList;
import LexicalAndSyntacticAnalyzer.analyzer.Token;
import reports.*;
import LexicalAndSyntacticAnalyzer.dataAnalyzer.*;
import LexicalAndSyntacticAnalyzer.dataAnalyzer.RequestAnalyzer;
import LexicalAndSyntacticAnalyzer.ListRequests;
import com.cunoc.webxsonquiz.data.servert.ComponentTrivia;
import com.cunoc.webxsonquiz.data.servert.Trivia;
import LexicalAndSyntacticAnalyzer.objectAnalyzer.ConverterAnalyzerToObjectTrivia;
import com.cunoc.webxsonquiz.data.servert.User;
import LexicalAndSyntacticAnalyzer.objectAnalyzer.ConverterAnalyzerToObjectComponentTrivia;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MyParserDataBaseTrivias extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return MySymLoginDataBaseTrivias.class;
}

  /** Default constructor. */
  @Deprecated
  public MyParserDataBaseTrivias() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MyParserDataBaseTrivias(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MyParserDataBaseTrivias(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\004\000\002\003\003\000\002\003" +
    "\004\000\002\002\004\000\002\002\003\000\002\004\005" +
    "\000\002\004\003\000\002\011\005\000\002\011\003\000" +
    "\002\005\005\000\002\010\005\000\002\010\003\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\007" +
    "\000\002\015\005\000\002\015\003\000\002\014\005\000" +
    "\002\013\005\000\002\013\003\000\002\012\004\000\002" +
    "\012\004\000\002\012\004\000\002\012\004\000\002\012" +
    "\004\000\002\012\004\000\002\012\004\000\002\012\004" +
    "\000\002\012\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\003\000\002\006\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\105\000\010\003\006\005\012\007\010\001\002\000" +
    "\010\002\ufffb\005\ufffb\007\ufffb\001\002\000\014\002\ufff9" +
    "\005\ufff9\006\ufff9\007\ufff9\012\106\001\002\000\006\005" +
    "\012\007\010\001\002\000\010\002\ufffd\005\ufffd\007\ufffd" +
    "\001\002\000\020\020\027\021\030\022\022\023\020\024" +
    "\025\025\021\026\026\001\002\000\010\002\000\005\012" +
    "\007\010\001\002\000\004\007\010\001\002\000\004\002" +
    "\014\001\002\000\004\002\001\001\002\000\004\006\016" +
    "\001\002\000\010\002\ufffc\005\ufffc\007\ufffc\001\002\000" +
    "\010\002\ufffe\005\ufffe\007\ufffe\001\002\000\012\003\032" +
    "\010\uffdd\011\031\012\uffdd\001\002\000\012\003\032\010" +
    "\uffdd\011\031\012\uffdd\001\002\000\012\003\032\010\uffdd" +
    "\011\031\012\uffdd\001\002\000\006\010\100\012\077\001" +
    "\002\000\006\010\ufff6\012\ufff6\001\002\000\012\003\032" +
    "\010\uffdd\011\031\012\uffdd\001\002\000\004\011\037\001" +
    "\002\000\012\003\032\010\uffdd\011\031\012\uffdd\001\002" +
    "\000\012\003\032\010\uffdd\011\031\012\uffdd\001\002\000" +
    "\006\004\035\013\034\001\002\000\006\010\uffde\012\uffde" +
    "\001\002\000\006\010\ufff3\012\ufff3\001\002\000\006\010" +
    "\uffdf\012\uffdf\001\002\000\006\010\uffe0\012\uffe0\001\002" +
    "\000\006\010\ufff5\012\ufff5\001\002\000\004\005\040\001" +
    "\002\000\004\007\042\001\002\000\006\006\074\012\073" +
    "\001\002\000\024\027\055\030\051\031\045\032\052\033" +
    "\047\034\050\035\056\036\054\037\044\001\002\000\006" +
    "\006\uffed\012\uffed\001\002\000\012\003\032\010\uffdd\011" +
    "\031\012\uffdd\001\002\000\012\003\032\010\uffdd\011\031" +
    "\012\uffdd\001\002\000\006\010\uffea\012\uffea\001\002\000" +
    "\012\003\032\010\uffdd\011\031\012\uffdd\001\002\000\012" +
    "\003\032\010\uffdd\011\031\012\uffdd\001\002\000\012\003" +
    "\032\010\uffdd\011\031\012\uffdd\001\002\000\012\003\032" +
    "\010\uffdd\011\031\012\uffdd\001\002\000\006\010\063\012" +
    "\062\001\002\000\012\003\032\010\uffdd\011\031\012\uffdd" +
    "\001\002\000\012\003\032\010\uffdd\011\031\012\uffdd\001" +
    "\002\000\012\003\032\010\uffdd\011\031\012\uffdd\001\002" +
    "\000\006\010\uffe1\012\uffe1\001\002\000\006\010\uffe9\012" +
    "\uffe9\001\002\000\006\010\uffe5\012\uffe5\001\002\000\024" +
    "\027\055\030\051\031\045\032\052\033\047\034\050\035" +
    "\056\036\054\037\044\001\002\000\006\006\uffec\012\uffec" +
    "\001\002\000\006\010\uffeb\012\uffeb\001\002\000\006\010" +
    "\uffe6\012\uffe6\001\002\000\006\010\uffe7\012\uffe7\001\002" +
    "\000\006\010\uffe2\012\uffe2\001\002\000\006\010\uffe3\012" +
    "\uffe3\001\002\000\006\010\uffe4\012\uffe4\001\002\000\006" +
    "\010\uffe8\012\uffe8\001\002\000\004\007\042\001\002\000" +
    "\006\010\uffef\012\uffef\001\002\000\006\006\uffee\012\uffee" +
    "\001\002\000\006\010\ufff1\012\ufff1\001\002\000\020\020" +
    "\027\021\030\022\022\023\020\024\025\025\021\026\026" +
    "\001\002\000\014\002\ufff8\005\ufff8\006\ufff8\007\ufff8\012" +
    "\ufff8\001\002\000\006\010\ufff7\012\ufff7\001\002\000\006" +
    "\010\ufff4\012\ufff4\001\002\000\006\010\ufff0\012\ufff0\001" +
    "\002\000\006\010\ufff2\012\ufff2\001\002\000\010\002\uffff" +
    "\005\012\007\010\001\002\000\004\007\010\001\002\000" +
    "\012\002\ufffa\005\ufffa\006\ufffa\007\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\105\000\014\002\010\003\012\004\006\005\004\011" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\002\104\004\006\005\004\011\003\001\001\000\002\001" +
    "\001\000\006\007\023\010\022\001\001\000\010\004\016" +
    "\005\004\011\003\001\001\000\006\005\004\011\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\103\001" +
    "\001\000\004\006\102\001\001\000\004\006\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\075\001" +
    "\001\000\002\001\001\000\004\006\035\001\001\000\004" +
    "\006\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\042\015\040\001" +
    "\001\000\002\001\001\000\006\012\045\013\052\001\001" +
    "\000\002\001\001\000\004\006\071\001\001\000\004\006" +
    "\070\001\001\000\002\001\001\000\004\006\067\001\001" +
    "\000\004\006\066\001\001\000\004\006\065\001\001\000" +
    "\004\006\064\001\001\000\002\001\001\000\004\006\060" +
    "\001\001\000\004\006\057\001\001\000\004\006\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\016\005\004\011\003\001" +
    "\001\000\006\005\004\011\106\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MyParserDataBaseTrivias$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MyParserDataBaseTrivias$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MyParserDataBaseTrivias$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




private ArrayList<ReportErrorInterpreter> listError = new ArrayList();
private ArrayList<DataAnalyzer> dataStack = new ArrayList();
private ArrayList<DataAnalyzer> dataStackComponet = new ArrayList();
private ArrayList<RequestAnalyzer> listRquest = new ArrayList();
private ArrayList<Trivia> listTrivia = new ArrayList<>();
private ArrayList<ComponentTrivia> listComponentTrivia = new ArrayList<>();


	  public MyParserDataBaseTrivias(LexemaDataBaseTrivias lexer) {
        super(lexer);
    }

    //erorr
    public void syntax_error(Symbol cur_token) {
        String nameTerminal = symbl_name_from_id(this.cur_token.sym);
        int numberTerminal = this.cur_token.sym;
        ///codigo para el objeto
        TypeIntreprete type = TypeIntreprete.SYNTACTIC;
        int line = cur_token.left+1;
        int columna = cur_token.right +1;
        String lexema = this.cur_token.value.toString();
        Token token = new Token(line, columna, lexema);
        System.out.println(token.toString());
        this.listError.add(new ReportErrorInterpreter(type, token, ReportingConstants.ERROR_SICTATICO));
    }

    //Returnar el listado de errores
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    //Returnar el listado de Rquest
    public ArrayList<RequestAnalyzer> getListRquest(){
      return this.listRquest;
    }

    //Returnar el listado de Trivias
    public ArrayList<Trivia> getListTrivias(){
      return this.listTrivia;
    }

    /**
     * ***END CODE*******
     */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MyParserDataBaseTrivias$actions {
  private final MyParserDataBaseTrivias parser;

  /** Constructor */
  CUP$MyParserDataBaseTrivias$actions(MyParserDataBaseTrivias parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MyParserDataBaseTrivias$do_action_part00000000(
    int                        CUP$MyParserDataBaseTrivias$act_num,
    java_cup.runtime.lr_parser CUP$MyParserDataBaseTrivias$parser,
    java.util.Stack            CUP$MyParserDataBaseTrivias$stack,
    int                        CUP$MyParserDataBaseTrivias$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MyParserDataBaseTrivias$result;

      /* select the action based on the action number */
      switch (CUP$MyParserDataBaseTrivias$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)).value;
		RESULT = start_val;
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MyParserDataBaseTrivias$parser.done_parsing();
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= bucle_inicio 
            {
              Object RESULT =null;

              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error bucle_inicio 
            {
              Object RESULT =null;

              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bucle_inicio ::= bucle_inicio json 
            {
              Object RESULT =null;

              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("bucle_inicio",0, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bucle_inicio ::= json 
            {
              Object RESULT =null;

              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("bucle_inicio",0, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // json ::= BRACKETS_O secuenci_json BRACKETS_C 
            {
              Object RESULT =null;

              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("json",2, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // json ::= secuenci_json 
            {
              Object RESULT =null;

              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("json",2, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // secuenci_json ::= obj_json COMA secuenci_json 
            {
              Object RESULT =null;

              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("secuenci_json",7, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // secuenci_json ::= obj_json 
            {
              Object RESULT =null;

              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("secuenci_json",7, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // obj_json ::= KEYS_O datas_user KEYS_C 
            {
              Object RESULT =null;
		
    Trivia newTrivia = (new ConverterAnalyzerToObjectTrivia(new User("", "", "", "", ""))).newTrivia(new RequestAnalyzer(dataStack, ListRequests.NEW_TRIVIA));
    newTrivia.getListComponet().addAll(listComponentTrivia);
    listTrivia.add(newTrivia);
    listComponentTrivia = new ArrayList<>();
  
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("obj_json",3, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // datas_user ::= datas_user COMA data_user 
            {
              Object RESULT =null;

              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("datas_user",6, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // datas_user ::= data_user 
            {
              Object RESULT =null;

              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("datas_user",6, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // data_user ::= ID data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		if(a!=null)dataStack.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.ID_TRIVIA,a.toString()));
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("data_user",5, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // data_user ::= TIME data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		if(a!=null)dataStack.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.TIEMPO_PREGUNTA,a.toString()));
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("data_user",5, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // data_user ::= NAME data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		if(a!=null)dataStack.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.NAME,a.toString()));
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("data_user",5, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // data_user ::= THEME data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		if(a!=null)dataStack.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.TEMA,a.toString()));
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("data_user",5, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // data_user ::= ID_USER data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		if(a!=null)dataStack.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.USUARIO_CREACION,a.toString()));
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("data_user",5, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // data_user ::= DATE data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		if(a!=null)dataStack.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.DATE,a.toString()));
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("data_user",5, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // data_user ::= STRUCTURE COLNO BRACKETS_O componets BRACKETS_C 
            {
              Object RESULT =null;

              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("data_user",5, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-4)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // componets ::= componets COMA componet 
            {
              Object RESULT =null;

              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("componets",11, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // componets ::= componet 
            {
              Object RESULT =null;

              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("componets",11, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // componet ::= KEYS_O datos_component KEYS_C 
            {
              Object RESULT =null;
		
  listComponentTrivia.add((new ConverterAnalyzerToObjectComponentTrivia()).newComponent(new RequestAnalyzer(dataStackComponet, ListRequests.AGREGAR_COMPONENTE)));
  dataStackComponet = new ArrayList();
  
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("componet",10, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // datos_component ::= datos_component COMA dato_component 
            {
              Object RESULT =null;

              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("datos_component",9, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // datos_component ::= dato_component 
            {
              Object RESULT =null;

              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("datos_component",9, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // dato_component ::= ID_COMPONENT data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		if(a!=null)dataStackComponet.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.ID,a.toString()));
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("dato_component",8, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // dato_component ::= ID_TRIVIA data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		if(a!=null)dataStackComponet.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.TRIVIA,a.toString()));
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("dato_component",8, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // dato_component ::= TYPE data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		if(a!=null)dataStackComponet.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.CLASE,a.toString()));
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("dato_component",8, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // dato_component ::= TEXT data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		if(a!=null)dataStackComponet.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.TEXTO_VISIBLE,a.toString()));
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("dato_component",8, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // dato_component ::= RESULT data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		if(a!=null)dataStackComponet.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.RESPUESTA,a.toString()));
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("dato_component",8, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // dato_component ::= INDEX data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		if(a!=null)dataStackComponet.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.INDICE,a.toString()));
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("dato_component",8, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // dato_component ::= OPTIONS data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		if(a!=null)dataStackComponet.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.OPCIONES,a.toString()));
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("dato_component",8, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // dato_component ::= ROW data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		if(a!=null)dataStackComponet.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.FILAS,a.toString()));
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("dato_component",8, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // dato_component ::= COLUMN data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		if(a!=null)dataStackComponet.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.COLUMNAS,a.toString()));
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("dato_component",8, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // data ::= COLNO STRING 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		RESULT = a;
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("data",4, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // data ::= COLNO STRING_DATE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataBaseTrivias$stack.peek()).value;
		RESULT = a;
              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("data",4, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.elementAt(CUP$MyParserDataBaseTrivias$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // data ::= error 
            {
              Object RESULT =null;

              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("data",4, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // data ::= 
            {
              Object RESULT =null;

              CUP$MyParserDataBaseTrivias$result = parser.getSymbolFactory().newSymbol("data",4, ((java_cup.runtime.Symbol)CUP$MyParserDataBaseTrivias$stack.peek()), RESULT);
            }
          return CUP$MyParserDataBaseTrivias$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MyParserDataBaseTrivias$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MyParserDataBaseTrivias$do_action(
    int                        CUP$MyParserDataBaseTrivias$act_num,
    java_cup.runtime.lr_parser CUP$MyParserDataBaseTrivias$parser,
    java.util.Stack            CUP$MyParserDataBaseTrivias$stack,
    int                        CUP$MyParserDataBaseTrivias$top)
    throws java.lang.Exception
    {
              return CUP$MyParserDataBaseTrivias$do_action_part00000000(
                               CUP$MyParserDataBaseTrivias$act_num,
                               CUP$MyParserDataBaseTrivias$parser,
                               CUP$MyParserDataBaseTrivias$stack,
                               CUP$MyParserDataBaseTrivias$top);
    }
}

}
