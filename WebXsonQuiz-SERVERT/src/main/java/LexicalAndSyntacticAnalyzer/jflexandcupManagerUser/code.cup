package LexicalAndSyntacticAnalyzer.jflexandcupManagerUser;

import java_cup.runtime.*;
import java.util.ArrayList;

import LexicalAndSyntacticAnalyzer.analyzer.Token;
import reports.*;
import LexicalAndSyntacticAnalyzer.dataAnalyzer.*;
import LexicalAndSyntacticAnalyzer.dataAnalyzer.RequestAnalyzer;
import LexicalAndSyntacticAnalyzer.ListRequests;

/**
     * ***STAR CODE*******
     */
    parser code {:

private ArrayList<ReportErrorInterpreter> listError = new ArrayList();
private ArrayList<DataAnalyzer> dataStack = new ArrayList();
private ArrayList<RequestAnalyzer> listRquest = new ArrayList();


	  public MyParseUser(LexemaByMyParesUser lexer) {
        super(lexer);
    }

    //erorr
    public void syntax_error(Symbol cur_token) {
        String nameTerminal = symbl_name_from_id(this.cur_token.sym);
        int numberTerminal = this.cur_token.sym;
        ///codigo para el objeto
        TypeIntreprete type = TypeIntreprete.SYNTACTIC;
        int line = cur_token.left+1;
        int columna = cur_token.right +1;
        String lexema = this.cur_token.value.toString();
        Token token = new Token(line, columna, lexema);
        System.out.println(token.toString());
        this.listError.add(new ReportErrorInterpreter(type, token, ReportingConstants.ERROR_SICTATICO));
    }

    //Returnar el listado de errores
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    //Returnar el listado de Rquest
    public ArrayList<RequestAnalyzer> getListRquest(){
      return this.listRquest;
    }

    /**
     * ***END CODE*******
     */
:}

/* Terminales */
/*sxon*/
terminal EQUAL,OPEN_VERSION,CLOSE_VERSION,XSON,VERSION;
terminal COLNO,CLOSE,OPEN;
terminal String STRING;
/*SIMBOLOS DE OPERACION*/
terminal SUMAR,RESTAR,DIVIDIR,MULTIPLICAR;
terminal String REAL_NUMEBERS,STRING_DATE;
/*AGRUPACION*/
terminal PARENTESIS_A,PARENTESIS_C;
terminal BRACKETS_O,BRACKETS_C;
terminal KEYS_O,KEYS_C;
/*SOLICITUD*/
terminal  OPEN_REQUEST,FINAL_REQUEST,CLOSE_REQUEST,MAKE_REQUEST,COMA;
//tipos de solicitud
terminal NEW_USER,MODIFICAR_USUARIO,ELIMINAR_USUARIO;
terminal USUARIO_ANTIGUO,NUEVO_PASSWORD;
terminal USER_DATA,NAME_USER,PASS_USER,NAME_PERSONAL_USER,INSTITUCION,DATE;
/* No terminales */
//operaicones
non terminal inico_opereacion,operacion,parente;
//inicio
non terminal inicio_xson,bucle_inicio;
non terminal inicio;
//solicitud
non terminal solicitud,cerrar_solicitud;
//non terminal json, obj_json,solicitud_usuario,datas,data;
non terminal json_del_user, obj_json_del_user,solicitud_usuario_del_user,datas_del_user,data_del_user;
non terminal json_modificar_user, obj_json_modificar_user,solicitud_usuario_modificar_user,datas_user_modificar_user,datas_user_modificar;
non terminal json_new_user, obj_json_new_user,solicitud_usuario_new_user,datas_new_user,data_new_user;
non terminal data;

/*************************************PRECEDENCIA******************************************************/
precedence left SUMAR, RESTAR;
precedence left MULTIPLICAR, DIVIDIR;
precedence left PARENTESIS_A, PARENTESIS_C;

/* GramÃ¡tica */
start with inicio;
/******operaciones matematicas*****/
inicio ::= bucle_inicio
    | error bucle_inicio
    ;

bucle_inicio 
  ::= bucle_inicio inicio_xson
  |inicio_xson
  ;

inicio_xson ::= 
    OPEN_VERSION XSON VERSION EQUAL STRING CLOSE_VERSION
    |OPEN_REQUEST MAKE_REQUEST COLNO solicitud cerrar_solicitud
    ; 
cerrar_solicitud 
  ::= OPEN FINAL_REQUEST CLOSE_REQUEST
  ;

solicitud ::=
  NEW_USER CLOSE json_new_user 
  {:
    listRquest.add(new RequestAnalyzer(dataStack, ListRequests.NEW_USER));
    dataStack = new ArrayList();
  :}
  |MODIFICAR_USUARIO CLOSE json_modificar_user
  {:
    listRquest.add(new RequestAnalyzer(dataStack, ListRequests.MODIFICAR_USUARIO));
    dataStack = new ArrayList();
  :}
  | ELIMINAR_USUARIO CLOSE json_del_user
  {:
    listRquest.add(new RequestAnalyzer(dataStack, ListRequests.ELIMINAR_USUARIO));
    dataStack = new ArrayList();
  :}
  ;
  
/* json::=
  KEYS_O obj_json KEYS_C
  | error
  | 
  ;

obj_json 
  ::= USER_DATA solicitud_usuario
  | error
  | 
  ;

solicitud_usuario ::=COLNO BRACKETS_O  KEYS_O datas_user KEYS_C  BRACKETS_C ;

datas_user 
  ::= datas_user COMA  data_user
  |data_user
  ; */

/*ELIMINAR USARIO*/
json_del_user::=
  KEYS_O obj_json_del_user KEYS_C
  | error
  | 
  ;

obj_json_del_user 
  ::= USER_DATA solicitud_usuario_del_user
  | error
  | 
  ;

solicitud_usuario_del_user ::=COLNO BRACKETS_O  KEYS_O datas_del_user KEYS_C  BRACKETS_C ;

datas_del_user 
  ::= datas_del_user COMA  data_del_user
  |data_del_user
  ; 
data_del_user
  ::= NAME_USER data:a 
   {:if(a!=null)dataStack.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.USUARIO,a.toString()));:}
  ;
/*MODIFICAR USARIO*/

json_modificar_user::=
  KEYS_O obj_json_modificar_user KEYS_C
  | error
  | 
  ;

obj_json_modificar_user 
  ::= USER_DATA solicitud_usuario_modificar_user
  | error
  | 
  ;

solicitud_usuario_modificar_user ::=COLNO BRACKETS_O  KEYS_O datas_user_modificar_user KEYS_C  BRACKETS_C ;

datas_user_modificar_user 
  ::= datas_user_modificar_user COMA  datas_user_modificar
  |datas_user_modificar
  ;

datas_user_modificar
  ::= USUARIO_ANTIGUO data:a 
  {:if(a!=null)dataStack.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.USUARIO_ANTIGUO,a.toString()));:}
  | NEW_USER data:a 
  {:if(a!=null)dataStack.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.USUARIO,a.toString()));:}
  | NUEVO_PASSWORD data:a 
  {:if(a!=null)dataStack.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.NUEVO_PASSWORD,a.toString()));:}
  |INSTITUCION data:a
  {:if(a!=null)dataStack.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.INSTITUTION,a.toString()));:}
  |DATE data:a
  {:if(a!=null)dataStack.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.DATE,a.toString()));:}
  ;
/*NEW USER*/
json_new_user::=
  KEYS_O obj_json_new_user KEYS_C
  | error
  | 
  ;

obj_json_new_user 
  ::= USER_DATA solicitud_usuario_new_user
  | error
  | 
  ;

solicitud_usuario_new_user ::=COLNO BRACKETS_O  KEYS_O datas_new_user KEYS_C  BRACKETS_C ;

datas_new_user 
  ::= datas_new_user COMA  data_new_user
  |data_new_user
  ;

data_new_user::=
  NAME_USER data:a 
   {:if(a!=null)dataStack.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.USUARIO,a.toString()));:}
  |PASS_USER data:a 
   {:if(a!=null)dataStack.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.PASSWORD,a.toString()));:}
  |NAME_PERSONAL_USER data:a
   {:if(a!=null)dataStack.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.NAME,a.toString()));:}
  |INSTITUCION data:a
   {:if(a!=null)dataStack.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.INSTITUTION,a.toString()));:}
  |DATE data:a
  {:if(a!=null)dataStack.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.DATE,a.toString()));:}
  | error
  | 
  ;
/*NEW USER*/

data ::=COLNO STRING:a {:RESULT = a;:}
  | COLNO inico_opereacion:a {:RESULT = a;:}
  | COLNO STRING_DATE:a {:RESULT = a;:}
  | error
  | 
  ;

/******operaciones matematicas*****/
/*A QUI ESTA EL TOTAL DE LA OPERACION*/
inico_opereacion ::= operacion:a 
    {:
    //////////////////////////////////////////
		Double aDouble = 0.0;
    if (a!=null) {
        aDouble =   Double.valueOf(a.toString());
        RESULT = aDouble;
    }else{
      RESULT = aDouble;
    }
    //////////////////////////////////////////
    :} 
    ;
/******operaciones matematicas*****/
operacion 
/**SUMA**/
::= operacion:a SUMAR operacion:b 
    {:
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double resultDouble = aDouble + bDouble;
      RESULT = resultDouble;
    }else{
      RESULT = aDouble;
    }
    /////////////////////////////////////////////
    :}

/**RESTA**/
|  operacion:a RESTAR operacion:b 
    {:
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double resultDouble = aDouble - bDouble;
      RESULT = resultDouble;
    }else{
      RESULT = aDouble;
    }
    /////////////////////////////////////////////

    :}
/**DIVISION**/
|  operacion:a DIVIDIR operacion:b 
    {:
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      if (bDouble>0) {
        Double result = ( bDouble/ bDouble);
        RESULT = result;
      }else{
        /// manejar un error de sintasis
        RESULT = aDouble;// si es 15/0
      }
    }else{
      RESULT = aDouble;
    }
    /////////////////////////////////////////////

    :}

/**MULTIPLICACION**/
|  operacion:a MULTIPLICAR operacion:b 
    {:
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double result = aDouble * bDouble;
      RESULT = result;
    }else{
      RESULT = aDouble;
    }
    /////////////////////////////////////////////

    :}
/****solo retornar*****/
| PARENTESIS_A operacion:a  parente:b
    {:
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double result = aDouble * bDouble;
      RESULT = result;
    }else{
      RESULT = a;
    }
    /////////////////////////////////////////////
    :}
| REAL_NUMEBERS:a {:RESULT = a;:}
| REAL_NUMEBERS:a PARENTESIS_A  operacion:b  PARENTESIS_C
    {:
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double result = aDouble * bDouble;
      RESULT = result;
    }else{
      RESULT = a;
    }
    /////////////////////////////////////////////
    :}
/***manejar el error***/
;

parente
  ::= PARENTESIS_C
  | PARENTESIS_C operacion:a {:RESULT = a;:}
  ;