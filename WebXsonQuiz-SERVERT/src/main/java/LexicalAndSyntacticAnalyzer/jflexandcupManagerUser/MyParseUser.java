
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package LexicalAndSyntacticAnalyzer.jflexandcupManagerUser;

import java_cup.runtime.*;
import java.util.ArrayList;
import LexicalAndSyntacticAnalyzer.analyzer.Token;
import reports.*;
import LexicalAndSyntacticAnalyzer.dataAnalyzer.*;
import LexicalAndSyntacticAnalyzer.dataAnalyzer.RequestAnalyzer;
import LexicalAndSyntacticAnalyzer.ListRequests;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MyParseUser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return MySymUser.class;
}

  /** Default constructor. */
  @Deprecated
  public MyParseUser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MyParseUser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MyParseUser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\004\000\002\007\003\000\002\007" +
    "\004\000\002\006\004\000\002\006\003\000\002\005\010" +
    "\000\002\005\007\000\002\011\005\000\002\010\005\000" +
    "\002\010\005\000\002\012\005\000\002\012\003\000\002" +
    "\012\002\000\002\013\004\000\002\013\003\000\002\013" +
    "\002\000\002\014\010\000\002\015\005\000\002\015\003" +
    "\000\002\016\004\000\002\017\005\000\002\017\003\000" +
    "\002\017\002\000\002\020\004\000\002\020\003\000\002" +
    "\020\002\000\002\021\010\000\002\022\005\000\002\022" +
    "\003\000\002\023\004\000\002\023\004\000\002\023\004" +
    "\000\002\023\004\000\002\023\004\000\002\023\003\000" +
    "\002\023\002\000\002\024\004\000\002\024\004\000\002" +
    "\024\004\000\002\024\003\000\002\024\002\000\002\002" +
    "\003\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\003\000" +
    "\002\003\006\000\002\004\003\000\002\004\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\010\003\004\005\006\031\011\001\002\000" +
    "\006\005\006\031\011\001\002\000\010\002\ufffd\005\ufffd" +
    "\031\ufffd\001\002\000\004\007\135\001\002\000\010\002" +
    "\000\005\006\031\011\001\002\000\004\002\133\001\002" +
    "\000\004\034\012\001\002\000\004\011\013\001\002\000" +
    "\006\036\016\037\014\001\002\000\004\012\107\001\002" +
    "\000\004\013\104\001\002\000\004\012\017\001\002\000" +
    "\010\003\020\013\uffeb\027\022\001\002\000\004\013\uffec" +
    "\001\002\000\004\013\ufff9\001\002\000\010\003\024\030" +
    "\uffe8\041\023\001\002\000\004\011\027\001\002\000\004" +
    "\030\uffe9\001\002\000\004\030\026\001\002\000\004\013" +
    "\uffed\001\002\000\004\025\031\001\002\000\004\030\uffea" +
    "\001\002\000\004\027\032\001\002\000\022\003\035\030" +
    "\uffde\035\uffde\042\041\043\034\044\042\045\040\046\037" +
    "\001\002\000\006\030\100\035\077\001\002\000\012\003" +
    "\043\011\044\030\uffd9\035\uffd9\001\002\000\006\030\uffdf" +
    "\035\uffdf\001\002\000\006\030\uffe5\035\uffe5\001\002\000" +
    "\012\003\043\011\044\030\uffd9\035\uffd9\001\002\000\012" +
    "\003\043\011\044\030\uffd9\035\uffd9\001\002\000\012\003" +
    "\043\011\044\030\uffd9\035\uffd9\001\002\000\012\003\043" +
    "\011\044\030\uffd9\035\uffd9\001\002\000\006\030\uffda\035" +
    "\uffda\001\002\000\012\014\047\021\052\022\046\023\051" +
    "\001\002\000\006\030\uffe2\035\uffe2\001\002\000\006\030" +
    "\uffdb\035\uffdb\001\002\000\006\030\uffdd\035\uffdd\001\002" +
    "\000\006\030\uffdc\035\uffdc\001\002\000\006\021\052\023" +
    "\051\001\002\000\022\015\uffd2\016\uffd2\017\uffd2\020\uffd2" +
    "\023\064\024\uffd2\030\uffd2\035\uffd2\001\002\000\016\015" +
    "\056\016\057\017\054\020\055\030\uffd8\035\uffd8\001\002" +
    "\000\006\021\052\023\051\001\002\000\006\021\052\023" +
    "\051\001\002\000\006\021\052\023\051\001\002\000\006" +
    "\021\052\023\051\001\002\000\020\015\uffd6\016\uffd6\017" +
    "\054\020\055\024\uffd6\030\uffd6\035\uffd6\001\002\000\020" +
    "\015\uffd7\016\uffd7\017\054\020\055\024\uffd7\030\uffd7\035" +
    "\uffd7\001\002\000\020\015\uffd4\016\uffd4\017\uffd4\020\uffd4" +
    "\024\uffd4\030\uffd4\035\uffd4\001\002\000\020\015\uffd5\016" +
    "\uffd5\017\uffd5\020\uffd5\024\uffd5\030\uffd5\035\uffd5\001\002" +
    "\000\006\021\052\023\051\001\002\000\014\015\056\016" +
    "\057\017\054\020\055\024\066\001\002\000\020\015\uffd1" +
    "\016\uffd1\017\uffd1\020\uffd1\024\uffd1\030\uffd1\035\uffd1\001" +
    "\002\000\014\015\056\016\057\017\054\020\055\024\070" +
    "\001\002\000\024\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021" +
    "\052\023\051\024\uffd0\030\uffd0\035\uffd0\001\002\000\020" +
    "\015\uffd3\016\uffd3\017\uffd3\020\uffd3\024\uffd3\030\uffd3\035" +
    "\uffd3\001\002\000\020\015\uffcf\016\uffcf\017\uffcf\020\uffcf" +
    "\024\uffcf\030\uffcf\035\uffcf\001\002\000\006\030\uffe4\035" +
    "\uffe4\001\002\000\006\030\uffe1\035\uffe1\001\002\000\006" +
    "\030\uffe0\035\uffe0\001\002\000\006\030\uffe3\035\uffe3\001" +
    "\002\000\022\003\035\030\uffde\035\uffde\042\041\043\034" +
    "\044\042\045\040\046\037\001\002\000\004\026\101\001" +
    "\002\000\004\030\uffe7\001\002\000\006\030\uffe6\035\uffe6" +
    "\001\002\000\010\002\ufffb\005\ufffb\031\ufffb\001\002\000" +
    "\004\032\105\001\002\000\004\033\106\001\002\000\010" +
    "\002\ufffa\005\ufffa\031\ufffa\001\002\000\010\003\110\013" +
    "\ufff5\027\111\001\002\000\004\013\ufff6\001\002\000\010" +
    "\003\115\030\ufff2\041\114\001\002\000\004\013\ufff8\001" +
    "\002\000\004\030\132\001\002\000\004\011\116\001\002" +
    "\000\004\030\ufff3\001\002\000\004\025\120\001\002\000" +
    "\004\030\ufff4\001\002\000\004\027\121\001\002\000\004" +
    "\040\122\001\002\000\012\003\043\011\044\030\uffd9\035" +
    "\uffd9\001\002\000\006\030\uffef\035\uffef\001\002\000\006" +
    "\030\126\035\125\001\002\000\004\040\122\001\002\000" +
    "\004\026\127\001\002\000\004\030\ufff1\001\002\000\006" +
    "\030\ufff0\035\ufff0\001\002\000\006\030\uffee\035\uffee\001" +
    "\002\000\004\013\ufff7\001\002\000\004\002\001\001\002" +
    "\000\010\002\ufffe\005\ufffe\031\ufffe\001\002\000\004\010" +
    "\136\001\002\000\004\004\137\001\002\000\004\014\140" +
    "\001\002\000\004\006\141\001\002\000\010\002\ufffc\005" +
    "\ufffc\031\ufffc\001\002\000\010\002\uffff\005\006\031\011" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\010\005\004\006\006\007\007\001\001\000" +
    "\006\005\004\006\141\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\014\001\001" +
    "\000\002\001\001\000\004\011\102\001\001\000\002\001" +
    "\001\000\004\017\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\024\001\001\000\004\021\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\032\023\035\001\001\000\002\001\001\000\004" +
    "\024\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\074\001\001\000\004\024\073\001\001\000\004" +
    "\024\072\001\001\000\004\024\044\001\001\000\002\001" +
    "\001\000\006\002\047\003\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\062\001\001\000\004\003\061\001\001\000" +
    "\004\003\060\001\001\000\004\003\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\070\001\001\000\004\003\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\111\001\001" +
    "\000\002\001\001\000\004\013\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\123\016\122\001\001\000\004\024\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\133\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MyParseUser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MyParseUser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MyParseUser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




private ArrayList<ReportErrorInterpreter> listError = new ArrayList();
private ArrayList<DataAnalyzer> dataStack = new ArrayList();
private ArrayList<RequestAnalyzer> listRquest = new ArrayList();


	  public MyParseUser(LexemaByMyParesUser lexer) {
        super(lexer);
    }

    //erorr
    public void syntax_error(Symbol cur_token) {
        String nameTerminal = symbl_name_from_id(this.cur_token.sym);
        int numberTerminal = this.cur_token.sym;
        ///codigo para el objeto
        TypeIntreprete type = TypeIntreprete.SYNTACTIC;
        Token token = getMyToken();
        System.out.println(token.toString());
        this.listError.add(new ReportErrorInterpreter(type, token, ReportingConstants.ERROR_SICTATICO));
    }

    // get current token 
    private Token getMyToken(){
      int line = cur_token.left+1;
      int columna = cur_token.right +1;
      String lexema = this.cur_token.value.toString();
      return new Token(line, columna, lexema);
    }

    //Returnar el listado de errores
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    //Returnar el listado de Rquest
    public ArrayList<RequestAnalyzer> getListRquest(){
      return this.listRquest;
    }

    /**
     * ***END CODE*******
     */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MyParseUser$actions {
  private final MyParseUser parser;

  /** Constructor */
  CUP$MyParseUser$actions(MyParseUser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MyParseUser$do_action_part00000000(
    int                        CUP$MyParseUser$act_num,
    java_cup.runtime.lr_parser CUP$MyParseUser$parser,
    java.util.Stack            CUP$MyParseUser$stack,
    int                        CUP$MyParseUser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MyParseUser$result;

      /* select the action based on the action number */
      switch (CUP$MyParseUser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-1)).value;
		RESULT = start_val;
              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MyParseUser$parser.done_parsing();
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= bucle_inicio 
            {
              Object RESULT =null;

              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("inicio",5, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error bucle_inicio 
            {
              Object RESULT =null;

              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("inicio",5, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bucle_inicio ::= bucle_inicio inicio_xson 
            {
              Object RESULT =null;

              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("bucle_inicio",4, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bucle_inicio ::= inicio_xson 
            {
              Object RESULT =null;

              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("bucle_inicio",4, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inicio_xson ::= OPEN_VERSION XSON VERSION EQUAL STRING CLOSE_VERSION 
            {
              Object RESULT =null;

              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("inicio_xson",3, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicio_xson ::= OPEN_REQUEST MAKE_REQUEST COLNO solicitud cerrar_solicitud 
            {
              Object RESULT =null;

              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("inicio_xson",3, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-4)), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cerrar_solicitud ::= OPEN FINAL_REQUEST CLOSE_REQUEST 
            {
              Object RESULT =null;

              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("cerrar_solicitud",7, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // solicitud ::= NEW_USER CLOSE json_new_user 
            {
              Object RESULT =null;
		
    listRquest.add(new RequestAnalyzer(dataStack, ListRequests.NEW_USER));
    dataStack = new ArrayList();
  
              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("solicitud",6, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // solicitud ::= MODIFICAR_USUARIO CLOSE json_modificar_user 
            {
              Object RESULT =null;
		
    listRquest.add(new RequestAnalyzer(dataStack, ListRequests.MODIFICAR_USUARIO));
    dataStack = new ArrayList();
  
              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("solicitud",6, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // json_modificar_user ::= KEYS_O obj_json_modificar_user KEYS_C 
            {
              Object RESULT =null;

              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("json_modificar_user",8, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // json_modificar_user ::= error 
            {
              Object RESULT =null;

              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("json_modificar_user",8, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // json_modificar_user ::= 
            {
              Object RESULT =null;

              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("json_modificar_user",8, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // obj_json_modificar_user ::= USER_DATA solicitud_usuario_modificar_user 
            {
              Object RESULT =null;

              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("obj_json_modificar_user",9, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // obj_json_modificar_user ::= error 
            {
              Object RESULT =null;

              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("obj_json_modificar_user",9, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // obj_json_modificar_user ::= 
            {
              Object RESULT =null;

              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("obj_json_modificar_user",9, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // solicitud_usuario_modificar_user ::= COLNO BRACKETS_O KEYS_O datas_user_modificar_user KEYS_C BRACKETS_C 
            {
              Object RESULT =null;

              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("solicitud_usuario_modificar_user",10, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // datas_user_modificar_user ::= datas_user_modificar_user COMA datas_user_modificar 
            {
              Object RESULT =null;

              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("datas_user_modificar_user",11, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // datas_user_modificar_user ::= datas_user_modificar 
            {
              Object RESULT =null;

              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("datas_user_modificar_user",11, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // datas_user_modificar ::= USUARIO_ANTIGUO data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseUser$stack.peek()).value;
		if(a!=null)dataStack.add(new DataAnalyzer(getMyToken(),ListTypeData.USUARIO,a.toString()));
              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("datas_user_modificar",12, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // json_new_user ::= KEYS_O obj_json_new_user KEYS_C 
            {
              Object RESULT =null;

              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("json_new_user",13, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // json_new_user ::= error 
            {
              Object RESULT =null;

              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("json_new_user",13, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // json_new_user ::= 
            {
              Object RESULT =null;

              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("json_new_user",13, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // obj_json_new_user ::= USER_DATA solicitud_usuario_new_user 
            {
              Object RESULT =null;

              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("obj_json_new_user",14, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // obj_json_new_user ::= error 
            {
              Object RESULT =null;

              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("obj_json_new_user",14, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // obj_json_new_user ::= 
            {
              Object RESULT =null;

              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("obj_json_new_user",14, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // solicitud_usuario_new_user ::= COLNO BRACKETS_O KEYS_O datas_new_user KEYS_C BRACKETS_C 
            {
              Object RESULT =null;

              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("solicitud_usuario_new_user",15, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // datas_new_user ::= datas_new_user COMA data_new_user 
            {
              Object RESULT =null;

              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("datas_new_user",16, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // datas_new_user ::= data_new_user 
            {
              Object RESULT =null;

              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("datas_new_user",16, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // data_new_user ::= NAME_USER data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseUser$stack.peek()).value;
		if(a!=null)dataStack.add(new DataAnalyzer(getMyToken(),ListTypeData.USUARIO,a.toString()));
              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("data_new_user",17, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // data_new_user ::= PASS_USER data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseUser$stack.peek()).value;
		if(a!=null)dataStack.add(new DataAnalyzer(getMyToken(),ListTypeData.PASSWORD,a.toString()));
              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("data_new_user",17, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // data_new_user ::= NAME_PERSONAL_USER data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseUser$stack.peek()).value;
		if(a!=null)dataStack.add(new DataAnalyzer(getMyToken(),ListTypeData.NAME,a.toString()));
              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("data_new_user",17, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // data_new_user ::= INSTITUCION data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseUser$stack.peek()).value;
		if(a!=null)dataStack.add(new DataAnalyzer(getMyToken(),ListTypeData.INSTITUTION,a.toString()));
              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("data_new_user",17, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // data_new_user ::= DATE data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseUser$stack.peek()).value;
		if(a!=null)dataStack.add(new DataAnalyzer(getMyToken(),ListTypeData.DATE,a.toString()));
              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("data_new_user",17, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // data_new_user ::= error 
            {
              Object RESULT =null;

              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("data_new_user",17, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // data_new_user ::= 
            {
              Object RESULT =null;

              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("data_new_user",17, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // data ::= COLNO STRING 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$MyParseUser$stack.peek()).value;
		RESULT = a;
              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("data",18, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // data ::= COLNO inico_opereacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseUser$stack.peek()).value;
		RESULT = a;
              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("data",18, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // data ::= COLNO STRING_DATE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$MyParseUser$stack.peek()).value;
		RESULT = a;
              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("data",18, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // data ::= error 
            {
              Object RESULT =null;

              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("data",18, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // data ::= 
            {
              Object RESULT =null;

              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("data",18, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // inico_opereacion ::= operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseUser$stack.peek()).value;
		
    //////////////////////////////////////////
		Double aDouble = 0.0;
    if (a!=null) {
        aDouble =   Double.valueOf(a.toString());
        RESULT = aDouble;
    }else{
      RESULT = aDouble;
    }
    //////////////////////////////////////////
    
              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("inico_opereacion",0, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operacion ::= operacion SUMAR operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParseUser$stack.peek()).value;
		
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double resultDouble = aDouble + bDouble;
      RESULT = resultDouble;
    }else{
      RESULT = aDouble;
    }
    /////////////////////////////////////////////
    
              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("operacion",1, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operacion ::= operacion RESTAR operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParseUser$stack.peek()).value;
		
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double resultDouble = aDouble - bDouble;
      RESULT = resultDouble;
    }else{
      RESULT = aDouble;
    }
    /////////////////////////////////////////////

    
              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("operacion",1, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operacion ::= operacion DIVIDIR operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParseUser$stack.peek()).value;
		
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      if (bDouble>0) {
        Double result = ( bDouble/ bDouble);
        RESULT = result;
      }else{
        /// manejar un error de sintasis
        RESULT = aDouble;// si es 15/0
      }
    }else{
      RESULT = aDouble;
    }
    /////////////////////////////////////////////

    
              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("operacion",1, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operacion ::= operacion MULTIPLICAR operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParseUser$stack.peek()).value;
		
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double result = aDouble * bDouble;
      RESULT = result;
    }else{
      RESULT = aDouble;
    }
    /////////////////////////////////////////////

    
              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("operacion",1, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operacion ::= PARENTESIS_A operacion parente 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParseUser$stack.peek()).value;
		
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double result = aDouble * bDouble;
      RESULT = result;
    }else{
      RESULT = a;
    }
    /////////////////////////////////////////////
    
              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("operacion",1, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operacion ::= REAL_NUMEBERS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$MyParseUser$stack.peek()).value;
		RESULT = a;
              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("operacion",1, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operacion ::= REAL_NUMEBERS PARENTESIS_A operacion PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-1)).value;
		
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double result = aDouble * bDouble;
      RESULT = result;
    }else{
      RESULT = a;
    }
    /////////////////////////////////////////////
    
              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("operacion",1, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parente ::= PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("parente",2, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parente ::= PARENTESIS_C operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseUser$stack.peek()).value;
		RESULT = a;
              CUP$MyParseUser$result = parser.getSymbolFactory().newSymbol("parente",2, ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.elementAt(CUP$MyParseUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParseUser$stack.peek()), RESULT);
            }
          return CUP$MyParseUser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MyParseUser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MyParseUser$do_action(
    int                        CUP$MyParseUser$act_num,
    java_cup.runtime.lr_parser CUP$MyParseUser$parser,
    java.util.Stack            CUP$MyParseUser$stack,
    int                        CUP$MyParseUser$top)
    throws java.lang.Exception
    {
              return CUP$MyParseUser$do_action_part00000000(
                               CUP$MyParseUser$act_num,
                               CUP$MyParseUser$parser,
                               CUP$MyParseUser$stack,
                               CUP$MyParseUser$top);
    }
}

}
