// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: code.jflex

package LexicalAndSyntacticAnalyzer.jflexandcupManagerUser;

import java_cup.runtime.Symbol;

import reports.ReportErrorInterpreter;
import reports.ReportingConstants;
import reports.TypeIntreprete;

import java.util.ArrayList;

import LexicalAndSyntacticAnalyzer.analyzer.Token;


@SuppressWarnings("fallthrough")
public class LexemaByMyParesUser implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\2\1\4\2\22\0\1\1\1\3\1\4\5\0"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\12\15\1\16\1\0\1\17\1\20\1\21\1\22\1\0"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\2\34\1\35\1\36\1\37\1\40\1\41\1\34"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\2\34"+
    "\1\51\1\52\1\53\1\0\1\54\1\0\1\55\1\34"+
    "\1\56\1\57\1\60\1\61\2\34\1\62\2\34\1\63"+
    "\1\64\1\65\1\66\2\34\1\67\1\70\1\71\1\72"+
    "\1\73\1\34\1\74\1\34\1\75\1\76\1\1\1\77"+
    "\7\0\1\2\32\0\1\1\u01df\0\1\1\177\0\13\1"+
    "\22\0\1\100\12\0\2\2\5\0\1\1\57\0\1\1"+
    "\240\0\1\1\377\0\u0100\101";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\1\2\17\1\20\1\21\4\17\1\22\1\23\1\24"+
    "\1\0\1\25\20\0\1\26\1\27\1\30\6\17\23\0"+
    "\1\12\1\0\4\17\1\31\1\17\7\0\1\32\20\0"+
    "\4\17\1\33\27\0\4\17\22\0\1\34\5\0\4\17"+
    "\2\0\1\35\3\0\1\36\17\0\1\37\3\17\1\40"+
    "\6\0\1\41\2\0\1\42\10\0\1\43\1\0\3\17"+
    "\20\0\1\44\1\0\3\17\2\0\1\45\7\0\1\46"+
    "\1\0\1\47\6\0\3\17\6\0\1\50\5\0\1\51"+
    "\5\0\3\17\1\52\21\0\3\17\5\0\1\53\14\0"+
    "\3\17\10\0\1\54\10\0\4\17\1\0\1\55\11\0"+
    "\1\56\3\0\1\57\1\60\3\17\7\0\1\61\5\0"+
    "\3\17\2\0\1\62\6\0\1\63\1\64\1\0\3\17"+
    "\2\0\1\65\1\0\1\66\3\0\1\67\2\17\1\70"+
    "\3\0\1\71\1\0\1\72\3\17\1\73\3\0\2\17"+
    "\1\74\1\75\2\0\2\17\1\76\1\0\2\17\1\77"+
    "\1\100\2\17\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[437];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\102\0\102\0\102"+
    "\0\102\0\102\0\102\0\102\0\u014a\0\102\0\u018c\0\102"+
    "\0\102\0\u01ce\0\u0210\0\u0252\0\102\0\102\0\u0294\0\u02d6"+
    "\0\u0318\0\u035a\0\102\0\102\0\102\0\u039c\0\102\0\u03de"+
    "\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee"+
    "\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u077a\0\u07bc\0\u07fe"+
    "\0\102\0\102\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948\0\u098a"+
    "\0\u09cc\0\u0a0e\0\u0a50\0\u0a92\0\u0ad4\0\u0b16\0\u0b58\0\u0b9a"+
    "\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26\0\u0d68\0\u0daa"+
    "\0\u0dec\0\u0e2e\0\u0e70\0\u07bc\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78"+
    "\0\u0fba\0\u0210\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u1104\0\u1146"+
    "\0\u1188\0\u11ca\0\102\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314"+
    "\0\u1356\0\u1398\0\u13da\0\u141c\0\u145e\0\u14a0\0\u14e2\0\u1524"+
    "\0\u1566\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u16f2\0\u0210"+
    "\0\u1734\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u1902"+
    "\0\u1944\0\u1986\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12"+
    "\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22"+
    "\0\u1d64\0\u1da6\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32"+
    "\0\u1f74\0\u1fb6\0\u1ff8\0\u203a\0\u207c\0\u20be\0\u2100\0\u2142"+
    "\0\u2184\0\u21c6\0\u2208\0\u224a\0\u228c\0\102\0\u22ce\0\u2310"+
    "\0\u2352\0\u2394\0\u23d6\0\u2418\0\u245a\0\u249c\0\u24de\0\u2520"+
    "\0\u2562\0\102\0\u25a4\0\u25e6\0\u2628\0\102\0\u266a\0\u26ac"+
    "\0\u26ee\0\u2730\0\u2772\0\u27b4\0\u27f6\0\u2838\0\u287a\0\u28bc"+
    "\0\u28fe\0\u2940\0\u2982\0\u29c4\0\u2a06\0\102\0\u2a48\0\u2a8a"+
    "\0\u2acc\0\u0210\0\u2b0e\0\u2b50\0\u2b92\0\u2bd4\0\u2c16\0\u2c58"+
    "\0\102\0\u2c9a\0\u2cdc\0\102\0\u2d1e\0\u2d60\0\u2da2\0\u2de4"+
    "\0\u2e26\0\u2e68\0\u2eaa\0\u2eec\0\102\0\u2f2e\0\u2f70\0\u2fb2"+
    "\0\u2ff4\0\u3036\0\u3078\0\u30ba\0\u30fc\0\u313e\0\u3180\0\u31c2"+
    "\0\u3204\0\u3246\0\u3288\0\u32ca\0\u330c\0\u334e\0\u3390\0\u33d2"+
    "\0\u3414\0\102\0\u3456\0\u3498\0\u34da\0\u351c\0\u355e\0\u35a0"+
    "\0\102\0\u35e2\0\u3624\0\u3666\0\u36a8\0\u36ea\0\u372c\0\u376e"+
    "\0\102\0\u37b0\0\102\0\u37f2\0\u3834\0\u3876\0\u38b8\0\u38fa"+
    "\0\u393c\0\u397e\0\u39c0\0\u3a02\0\u3a44\0\u3a86\0\u3ac8\0\u3b0a"+
    "\0\u3b4c\0\u3b8e\0\102\0\u3bd0\0\u3c12\0\u3c54\0\u3c96\0\u3cd8"+
    "\0\102\0\u3d1a\0\u3d5c\0\u3d9e\0\u3de0\0\u3e22\0\u3e64\0\u3ea6"+
    "\0\u3ee8\0\102\0\u3f2a\0\u3f6c\0\u3fae\0\u3ff0\0\u4032\0\u4074"+
    "\0\u40b6\0\u40f8\0\u413a\0\u417c\0\u41be\0\u4200\0\u4242\0\u4284"+
    "\0\u42c6\0\u4308\0\u434a\0\u438c\0\u43ce\0\u4410\0\u4452\0\u4494"+
    "\0\u44d6\0\u4518\0\u455a\0\102\0\u459c\0\u45de\0\u4620\0\u4662"+
    "\0\u46a4\0\u46e6\0\u4728\0\u476a\0\u47ac\0\u47ee\0\u4830\0\u4872"+
    "\0\u48b4\0\u48f6\0\u4938\0\u497a\0\u49bc\0\u49fe\0\u4a40\0\u4a82"+
    "\0\u4ac4\0\u4b06\0\u4b48\0\102\0\u4b8a\0\u4bcc\0\u4c0e\0\u4c50"+
    "\0\u4c92\0\u4cd4\0\u4d16\0\u4d58\0\u4d9a\0\u4ddc\0\u4e1e\0\u4e60"+
    "\0\u4ea2\0\102\0\u4ee4\0\u4f26\0\u4f68\0\u4faa\0\u4fec\0\u502e"+
    "\0\u5070\0\u50b2\0\u50f4\0\102\0\u5136\0\u5178\0\u51ba\0\102"+
    "\0\102\0\u51fc\0\u523e\0\u5280\0\u52c2\0\u5304\0\u5346\0\u5388"+
    "\0\u53ca\0\u540c\0\u544e\0\102\0\u5490\0\u54d2\0\u5514\0\u5556"+
    "\0\u5598\0\u55da\0\u561c\0\u565e\0\u56a0\0\u56e2\0\102\0\u5724"+
    "\0\u5766\0\u57a8\0\u57ea\0\u582c\0\u586e\0\102\0\102\0\u58b0"+
    "\0\u58f2\0\u5934\0\u5976\0\u59b8\0\u59fa\0\102\0\u5a3c\0\102"+
    "\0\u5a7e\0\u5ac0\0\u5b02\0\102\0\u5b44\0\u5b86\0\u5bc8\0\u5c0a"+
    "\0\u5c4c\0\u5c8e\0\102\0\u5cd0\0\102\0\u5d12\0\u5d54\0\u5d96"+
    "\0\102\0\u5dd8\0\u5e1a\0\u5e5c\0\u5e9e\0\u5ee0\0\u0210\0\102"+
    "\0\u5f22\0\u5f64\0\u5fa6\0\u5fe8\0\102\0\u602a\0\u606c\0\u60ae"+
    "\0\102\0\u0210\0\u60f0\0\u6132\0\u0210";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[437];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\2\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\5\23\1\24\20\23\1\25\1\2\1\26"+
    "\5\23\1\27\5\23\1\30\3\23\1\31\1\32\1\23"+
    "\1\33\1\34\1\2\104\0\2\3\120\0\1\35\60\0"+
    "\4\36\1\37\10\36\1\40\5\36\1\41\1\36\1\42"+
    "\1\43\1\44\1\45\2\36\1\46\2\36\1\47\1\50"+
    "\1\51\1\52\1\53\1\36\1\54\1\55\4\36\1\56"+
    "\27\36\13\0\1\57\1\0\1\15\67\0\1\60\16\0"+
    "\1\61\100\0\1\62\103\0\26\23\3\0\22\23\27\0"+
    "\4\23\1\63\21\23\3\0\22\23\27\0\26\23\3\0"+
    "\6\23\1\64\13\23\27\0\26\23\3\0\4\23\1\65"+
    "\15\23\27\0\26\23\3\0\4\23\1\66\15\23\27\0"+
    "\26\23\3\0\10\23\1\67\3\23\1\70\5\23\4\0"+
    "\4\36\1\37\45\36\1\56\33\36\1\37\10\36\1\71"+
    "\34\36\1\56\33\36\1\37\24\36\1\72\20\36\1\56"+
    "\33\36\1\37\30\36\1\73\2\36\1\74\11\36\1\56"+
    "\33\36\1\37\16\36\1\75\26\36\1\56\33\36\1\37"+
    "\30\36\1\76\14\36\1\56\33\36\1\37\26\36\1\77"+
    "\16\36\1\56\33\36\1\37\21\36\1\100\10\36\1\101"+
    "\12\36\1\56\33\36\1\37\33\36\1\102\11\36\1\56"+
    "\33\36\1\37\33\36\1\103\4\36\1\104\4\36\1\56"+
    "\33\36\1\37\34\36\1\105\10\36\1\56\33\36\1\37"+
    "\16\36\1\106\26\36\1\56\33\36\1\37\22\36\1\107"+
    "\22\36\1\56\33\36\1\37\22\36\1\110\3\36\1\111"+
    "\6\36\1\112\7\36\1\56\33\36\1\37\36\36\1\113"+
    "\6\36\1\56\31\36\1\0\76\36\16\0\1\114\76\0"+
    "\1\115\112\0\2\23\1\116\23\23\3\0\22\23\27\0"+
    "\26\23\3\0\11\23\1\117\10\23\27\0\26\23\3\0"+
    "\1\23\1\120\20\23\27\0\26\23\3\0\13\23\1\121"+
    "\6\23\27\0\26\23\3\0\7\23\1\122\12\23\27\0"+
    "\26\23\3\0\12\23\1\123\7\23\4\0\4\36\1\37"+
    "\10\36\1\124\34\36\1\56\33\36\1\37\35\36\1\125"+
    "\7\36\1\56\33\36\1\37\16\36\1\126\26\36\1\56"+
    "\33\36\1\37\30\36\1\127\14\36\1\56\33\36\1\37"+
    "\37\36\1\130\5\36\1\56\33\36\1\37\26\36\1\131"+
    "\16\36\1\56\33\36\1\37\30\36\1\132\14\36\1\56"+
    "\33\36\1\133\45\36\1\56\1\36\1\134\31\36\1\37"+
    "\21\36\1\135\14\36\1\136\6\36\1\56\33\36\1\37"+
    "\21\36\1\137\23\36\1\56\33\36\1\37\31\36\1\140"+
    "\13\36\1\56\33\36\1\37\22\36\1\141\22\36\1\56"+
    "\33\36\1\37\20\36\1\142\24\36\1\56\33\36\1\37"+
    "\35\36\1\143\1\144\6\36\1\56\33\36\1\37\36\36"+
    "\1\145\6\36\1\56\33\36\1\37\31\36\1\146\11\36"+
    "\1\147\1\36\1\56\33\36\1\37\22\36\1\150\22\36"+
    "\1\56\33\36\1\37\26\36\1\151\16\36\1\56\33\36"+
    "\1\37\40\36\1\152\4\36\1\56\27\36\12\0\1\153"+
    "\112\0\7\23\1\154\16\23\3\0\22\23\27\0\26\23"+
    "\3\0\1\155\21\23\27\0\26\23\3\0\7\23\1\156"+
    "\12\23\27\0\26\23\3\0\14\23\1\157\5\23\27\0"+
    "\26\23\3\0\11\23\1\160\10\23\4\0\4\36\1\37"+
    "\10\36\1\161\34\36\1\56\33\36\1\37\22\36\1\162"+
    "\22\36\1\56\33\36\1\37\36\36\1\163\6\36\1\56"+
    "\33\36\1\37\40\36\1\164\4\36\1\56\33\36\1\37"+
    "\33\36\1\165\11\36\1\56\33\36\1\37\31\36\1\166"+
    "\13\36\1\56\33\36\1\37\16\36\1\167\26\36\1\56"+
    "\33\36\1\37\37\36\1\170\5\36\1\56\33\36\1\37"+
    "\26\36\1\171\16\36\1\56\33\36\1\37\37\36\1\172"+
    "\5\36\1\56\33\36\1\37\26\36\1\173\16\36\1\56"+
    "\33\36\1\37\17\36\1\174\25\36\1\56\33\36\1\37"+
    "\41\36\1\175\3\36\1\56\33\36\1\37\26\36\1\176"+
    "\16\36\1\56\33\36\1\37\16\36\1\177\26\36\1\56"+
    "\33\36\1\37\36\36\1\200\6\36\1\56\33\36\1\37"+
    "\34\36\1\201\10\36\1\56\33\36\1\37\16\36\1\202"+
    "\26\36\1\56\33\36\1\37\37\36\1\203\5\36\1\56"+
    "\33\36\1\37\31\36\1\204\13\36\1\56\33\36\1\37"+
    "\41\36\1\205\3\36\1\56\33\36\1\37\16\36\1\206"+
    "\26\36\1\56\27\36\12\153\1\207\67\153\23\0\1\210"+
    "\25\23\3\0\22\23\27\0\26\23\3\0\14\23\1\211"+
    "\5\23\27\0\26\23\3\0\6\23\1\212\13\23\27\0"+
    "\26\23\3\0\6\23\1\213\13\23\4\0\4\36\1\37"+
    "\5\36\1\214\37\36\1\56\33\36\1\37\24\36\1\215"+
    "\20\36\1\56\33\36\1\37\22\36\1\216\22\36\1\56"+
    "\33\36\1\37\31\36\1\217\13\36\1\56\33\36\1\37"+
    "\36\36\1\220\6\36\1\56\33\36\1\37\26\36\1\221"+
    "\16\36\1\56\33\36\1\37\36\36\1\222\6\36\1\56"+
    "\33\36\1\37\35\36\1\223\7\36\1\56\33\36\1\37"+
    "\20\36\1\224\24\36\1\56\33\36\1\37\26\36\1\225"+
    "\16\36\1\56\33\36\1\37\23\36\1\226\21\36\1\56"+
    "\33\36\1\37\35\36\1\227\7\36\1\56\33\36\1\37"+
    "\16\36\1\230\14\36\1\231\11\36\1\56\33\36\1\37"+
    "\33\36\1\232\11\36\1\56\33\36\1\37\31\36\1\233"+
    "\13\36\1\56\33\36\1\37\42\36\1\234\2\36\1\56"+
    "\33\36\1\37\40\36\1\235\4\36\1\56\33\36\1\236"+
    "\45\36\1\56\33\36\1\37\33\36\1\237\11\36\1\56"+
    "\33\36\1\37\34\36\1\240\10\36\1\56\33\36\1\37"+
    "\26\36\1\241\16\36\1\56\33\36\1\37\35\36\1\242"+
    "\7\36\1\56\27\36\12\153\1\243\67\153\23\0\26\23"+
    "\3\0\1\244\21\23\27\0\26\23\3\0\12\23\1\245"+
    "\7\23\27\0\26\23\3\0\21\23\1\246\27\0\26\23"+
    "\3\0\12\23\1\247\7\23\4\0\4\36\1\37\10\36"+
    "\1\250\34\36\1\56\33\36\1\37\16\36\1\251\26\36"+
    "\1\56\33\36\1\252\45\36\1\56\33\36\1\37\32\36"+
    "\1\253\12\36\1\56\33\36\1\37\45\36\1\56\1\36"+
    "\1\254\31\36\1\37\32\36\1\255\12\36\1\56\33\36"+
    "\1\256\45\36\1\56\33\36\1\37\26\36\1\257\16\36"+
    "\1\56\33\36\1\37\22\36\1\260\22\36\1\56\33\36"+
    "\1\37\37\36\1\261\5\36\1\56\33\36\1\37\26\36"+
    "\1\262\16\36\1\56\33\36\1\37\22\36\1\263\22\36"+
    "\1\56\33\36\1\37\45\36\1\56\1\36\1\264\31\36"+
    "\1\37\45\36\1\56\1\36\1\265\31\36\1\37\32\36"+
    "\1\266\12\36\1\56\33\36\1\37\22\36\1\267\22\36"+
    "\1\56\33\36\1\37\33\36\1\270\11\36\1\56\33\36"+
    "\1\37\22\36\1\271\22\36\1\56\33\36\1\37\45\36"+
    "\1\56\1\36\1\272\31\36\1\37\33\36\1\273\11\36"+
    "\1\56\33\36\1\37\16\36\1\274\26\36\1\56\33\36"+
    "\1\37\26\36\1\275\16\36\1\56\27\36\12\153\1\243"+
    "\6\153\1\276\60\153\23\0\2\23\1\277\23\23\3\0"+
    "\22\23\27\0\26\23\3\0\7\23\1\300\12\23\27\0"+
    "\26\23\3\0\1\23\1\301\20\23\27\0\26\23\3\0"+
    "\11\23\1\302\10\23\4\0\4\36\1\37\10\36\1\303"+
    "\34\36\1\56\33\36\1\37\35\36\1\304\7\36\1\56"+
    "\33\36\1\37\16\36\1\305\26\36\1\56\33\36\1\37"+
    "\40\36\1\306\4\36\1\56\33\36\1\37\16\36\1\307"+
    "\26\36\1\56\33\36\1\37\41\36\1\310\3\36\1\56"+
    "\33\36\1\311\45\36\1\56\33\36\1\37\40\36\1\312"+
    "\4\36\1\56\33\36\1\37\20\36\1\313\24\36\1\56"+
    "\33\36\1\314\45\36\1\56\33\36\1\37\37\36\1\315"+
    "\5\36\1\56\33\36\1\37\34\36\1\316\10\36\1\56"+
    "\33\36\1\37\22\36\1\317\22\36\1\56\33\36\1\37"+
    "\37\36\1\320\5\36\1\56\33\36\1\37\35\36\1\321"+
    "\7\36\1\56\33\36\1\37\36\36\1\322\6\36\1\56"+
    "\33\36\1\37\41\36\1\323\3\36\1\56\33\36\1\37"+
    "\45\36\1\56\1\36\1\324\31\36\1\325\45\36\1\56"+
    "\33\36\1\37\33\36\1\326\11\36\1\56\27\36\23\0"+
    "\17\23\1\327\6\23\3\0\22\23\27\0\26\23\3\0"+
    "\6\23\1\330\13\23\27\0\26\23\3\0\13\23\1\331"+
    "\6\23\4\0\4\36\1\37\5\36\1\332\37\36\1\56"+
    "\33\36\1\37\45\36\1\56\1\36\1\333\31\36\1\37"+
    "\36\36\1\334\6\36\1\56\33\36\1\37\36\36\1\335"+
    "\6\36\1\56\33\36\1\37\35\36\1\336\7\36\1\56"+
    "\33\36\1\37\26\36\1\337\16\36\1\56\33\36\1\37"+
    "\20\36\1\340\24\36\1\56\33\36\1\37\16\36\1\341"+
    "\26\36\1\56\33\36\1\37\35\36\1\342\7\36\1\56"+
    "\33\36\1\37\16\36\1\343\26\36\1\56\33\36\1\37"+
    "\36\36\1\344\6\36\1\56\33\36\1\37\35\36\1\345"+
    "\7\36\1\56\33\36\1\37\21\36\1\346\23\36\1\56"+
    "\33\36\1\37\37\36\1\347\5\36\1\56\33\36\1\37"+
    "\26\36\1\350\16\36\1\56\33\36\1\37\34\36\1\351"+
    "\10\36\1\56\33\36\1\352\45\36\1\56\1\36\1\353"+
    "\25\36\23\0\4\23\1\354\21\23\3\0\22\23\27\0"+
    "\26\23\3\0\2\23\1\355\17\23\27\0\26\23\3\0"+
    "\1\356\21\23\4\0\4\36\1\37\10\36\1\357\34\36"+
    "\1\56\33\36\1\37\20\36\1\360\24\36\1\56\33\36"+
    "\1\361\45\36\1\56\33\36\1\37\40\36\1\362\4\36"+
    "\1\56\33\36\1\37\45\36\1\56\1\36\1\363\31\36"+
    "\1\37\16\36\1\364\26\36\1\56\33\36\1\37\26\36"+
    "\1\365\16\36\1\56\33\36\1\37\35\36\1\366\7\36"+
    "\1\56\33\36\1\37\26\36\1\367\16\36\1\56\33\36"+
    "\1\37\36\36\1\370\6\36\1\56\33\36\1\371\45\36"+
    "\1\56\33\36\1\37\33\36\1\372\11\36\1\56\33\36"+
    "\1\373\45\36\1\56\33\36\1\37\16\36\1\374\26\36"+
    "\1\56\33\36\1\37\36\36\1\375\6\36\1\56\33\36"+
    "\1\37\35\36\1\376\7\36\1\56\33\36\1\37\16\36"+
    "\1\377\1\36\1\u0100\11\36\1\u0101\12\36\1\56\27\36"+
    "\23\0\1\u0102\25\23\3\0\22\23\27\0\26\23\3\0"+
    "\6\23\1\u0103\13\23\27\0\26\23\3\0\14\23\1\u0104"+
    "\5\23\4\0\4\36\1\37\10\36\1\u0105\34\36\1\56"+
    "\33\36\1\37\33\36\1\u0106\11\36\1\56\33\36\1\37"+
    "\16\36\1\u0107\26\36\1\56\33\36\1\37\20\36\1\u0108"+
    "\16\36\1\u0109\1\u010a\4\36\1\56\33\36\1\u010b\45\36"+
    "\1\56\33\36\1\37\33\36\1\u010c\11\36\1\56\33\36"+
    "\1\37\45\36\1\56\1\36\1\u010d\31\36\1\37\41\36"+
    "\1\u010e\3\36\1\56\33\36\1\37\36\36\1\u010f\6\36"+
    "\1\56\33\36\1\37\36\36\1\u0110\6\36\1\56\33\36"+
    "\1\u0111\45\36\1\56\33\36\1\37\26\36\1\u0112\16\36"+
    "\1\56\33\36\1\37\22\36\1\u0113\22\36\1\56\33\36"+
    "\1\37\32\36\1\u0114\12\36\1\56\33\36\1\37\35\36"+
    "\1\u0115\7\36\1\56\33\36\1\37\40\36\1\u0116\4\36"+
    "\1\56\27\36\23\0\2\23\1\u0117\23\23\3\0\22\23"+
    "\27\0\26\23\3\0\15\23\1\u0118\4\23\27\0\26\23"+
    "\3\0\12\23\1\u0119\7\23\4\0\4\36\1\u011a\45\36"+
    "\1\56\33\36\1\37\31\36\1\u011b\13\36\1\56\33\36"+
    "\1\37\35\36\1\u011c\7\36\1\56\33\36\1\37\33\36"+
    "\1\u011d\11\36\1\56\33\36\1\37\35\36\1\u011e\7\36"+
    "\1\56\33\36\1\37\36\36\1\u011f\6\36\1\56\33\36"+
    "\1\37\32\36\1\u0120\12\36\1\56\33\36\1\37\20\36"+
    "\1\u0121\16\36\1\u0122\1\u0123\4\36\1\56\33\36\1\37"+
    "\26\36\1\u0124\16\36\1\56\33\36\1\37\42\36\1\u0125"+
    "\2\36\1\56\33\36\1\37\45\36\1\56\1\36\1\u0126"+
    "\31\36\1\37\17\36\1\u0127\25\36\1\56\33\36\1\37"+
    "\24\36\1\u0128\20\36\1\56\33\36\1\37\37\36\1\u0129"+
    "\5\36\1\56\33\36\1\37\22\36\1\u012a\22\36\1\56"+
    "\33\36\1\37\22\36\1\u012b\22\36\1\56\27\36\23\0"+
    "\10\23\1\u012c\15\23\3\0\22\23\27\0\26\23\3\0"+
    "\16\23\1\u012d\3\23\27\0\26\23\3\0\7\23\1\u012e"+
    "\12\23\4\0\4\36\1\37\34\36\1\u012f\10\36\1\56"+
    "\33\36\1\37\26\36\1\u0130\16\36\1\56\33\36\1\37"+
    "\31\36\1\u0131\13\36\1\56\33\36\1\37\26\36\1\u0132"+
    "\16\36\1\56\33\36\1\37\40\36\1\u0133\4\36\1\56"+
    "\33\36\1\u0134\45\36\1\56\33\36\1\37\33\36\1\u0135"+
    "\11\36\1\56\33\36\1\37\35\36\1\u0136\7\36\1\56"+
    "\33\36\1\37\36\36\1\u0137\6\36\1\56\33\36\1\37"+
    "\16\36\1\u0138\26\36\1\56\33\36\1\37\33\36\1\u0139"+
    "\11\36\1\56\33\36\1\37\20\36\1\u013a\16\36\1\u013b"+
    "\5\36\1\56\33\36\1\37\30\36\1\u013c\14\36\1\56"+
    "\33\36\1\37\40\36\1\u013d\4\36\1\56\33\36\1\37"+
    "\26\36\1\u013e\16\36\1\56\33\36\1\37\16\36\1\u013f"+
    "\26\36\1\56\33\36\1\37\41\36\1\u0140\3\36\1\56"+
    "\27\36\23\0\15\23\1\u0141\10\23\3\0\22\23\27\0"+
    "\26\23\3\0\3\23\1\u0142\16\23\27\0\26\23\3\0"+
    "\6\23\1\u0143\13\23\4\0\4\36\1\37\33\36\1\u0144"+
    "\11\36\1\56\33\36\1\37\33\36\1\u0145\11\36\1\56"+
    "\33\36\1\37\34\36\1\u0146\10\36\1\56\33\36\1\37"+
    "\41\36\1\u0147\3\36\1\56\33\36\1\37\16\36\1\u0148"+
    "\26\36\1\56\33\36\1\37\31\36\1\u0149\13\36\1\56"+
    "\33\36\1\37\26\36\1\u014a\16\36\1\56\33\36\1\37"+
    "\40\36\1\u014b\4\36\1\56\33\36\1\u014c\45\36\1\56"+
    "\33\36\1\37\35\36\1\u014d\7\36\1\56\33\36\1\37"+
    "\33\36\1\u014e\11\36\1\56\33\36\1\37\35\36\1\u014f"+
    "\7\36\1\56\33\36\1\37\22\36\1\u0150\22\36\1\56"+
    "\33\36\1\37\32\36\1\u0151\12\36\1\56\33\36\1\37"+
    "\24\36\1\u0152\20\36\1\56\33\36\1\37\20\36\1\u0153"+
    "\24\36\1\56\33\36\1\37\33\36\1\u0154\11\36\1\56"+
    "\27\36\23\0\14\23\1\u0155\11\23\3\0\22\23\27\0"+
    "\26\23\3\0\1\u0156\3\23\1\u0157\15\23\27\0\26\23"+
    "\3\0\2\23\1\u0158\17\23\4\0\4\36\1\37\32\36"+
    "\1\u0159\12\36\1\56\33\36\1\u015a\45\36\1\56\33\36"+
    "\1\37\33\36\1\u015b\11\36\1\56\33\36\1\37\26\36"+
    "\1\u015c\16\36\1\56\33\36\1\37\35\36\1\u015d\7\36"+
    "\1\56\33\36\1\37\34\36\1\u015e\10\36\1\56\33\36"+
    "\1\37\41\36\1\u015f\3\36\1\56\33\36\1\37\16\36"+
    "\1\u0160\26\36\1\56\33\36\1\37\21\36\1\u0161\23\36"+
    "\1\56\33\36\1\37\31\36\1\u0162\13\36\1\56\33\36"+
    "\1\37\26\36\1\u0163\16\36\1\56\33\36\1\u0164\45\36"+
    "\1\56\33\36\1\37\37\36\1\u0165\5\36\1\56\33\36"+
    "\1\37\40\36\1\u0166\4\36\1\56\33\36\1\37\26\36"+
    "\1\u0167\16\36\1\56\33\36\1\u0168\45\36\1\56\27\36"+
    "\23\0\26\23\3\0\22\23\2\0\1\u0169\24\0\26\23"+
    "\3\0\13\23\1\u016a\6\23\27\0\26\23\3\0\14\23"+
    "\1\u016b\5\23\27\0\26\23\3\0\6\23\1\u016c\13\23"+
    "\4\0\4\36\1\37\22\36\1\u016d\22\36\1\56\33\36"+
    "\1\37\32\36\1\u016e\12\36\1\56\33\36\1\37\16\36"+
    "\1\u016f\26\36\1\56\33\36\1\37\26\36\1\u0170\16\36"+
    "\1\56\33\36\1\37\33\36\1\u0171\11\36\1\56\33\36"+
    "\1\37\26\36\1\u0172\16\36\1\56\33\36\1\37\35\36"+
    "\1\u0173\7\36\1\56\33\36\1\u0174\45\36\1\56\33\36"+
    "\1\37\34\36\1\u0175\10\36\1\56\33\36\1\37\41\36"+
    "\1\u0176\3\36\1\56\33\36\1\37\16\36\1\u0177\26\36"+
    "\1\56\33\36\1\37\33\36\1\u0178\11\36\1\56\33\36"+
    "\1\37\33\36\1\u0179\11\36\1\56\27\36\23\0\26\23"+
    "\3\0\4\23\1\u017a\15\23\27\0\26\23\3\0\1\u017b"+
    "\21\23\27\0\26\23\3\0\15\23\1\u017c\4\23\4\0"+
    "\4\36\1\37\32\36\1\u017d\12\36\1\56\33\36\1\37"+
    "\22\36\1\u017e\22\36\1\56\33\36\1\u017f\45\36\1\56"+
    "\33\36\1\37\33\36\1\u0180\11\36\1\56\33\36\1\37"+
    "\32\36\1\u0181\12\36\1\56\33\36\1\37\16\36\1\u0182"+
    "\26\36\1\56\33\36\1\37\26\36\1\u0183\16\36\1\56"+
    "\33\36\1\37\33\36\1\u0184\11\36\1\56\33\36\1\37"+
    "\26\36\1\u0185\16\36\1\56\33\36\1\u0186\45\36\1\56"+
    "\33\36\1\u0187\45\36\1\56\33\36\1\37\32\36\1\u0188"+
    "\12\36\1\56\27\36\23\0\26\23\3\0\1\23\1\u0189"+
    "\20\23\27\0\26\23\3\0\13\23\1\u018a\6\23\27\0"+
    "\26\23\3\0\16\23\1\u018b\3\23\4\0\4\36\1\37"+
    "\37\36\1\u018c\5\36\1\56\33\36\1\37\32\36\1\u018d"+
    "\12\36\1\56\33\36\1\u018e\45\36\1\56\33\36\1\37"+
    "\22\36\1\u018f\22\36\1\56\33\36\1\u0190\45\36\1\56"+
    "\33\36\1\37\33\36\1\u0191\11\36\1\56\33\36\1\37"+
    "\32\36\1\u0192\12\36\1\56\33\36\1\37\16\36\1\u0193"+
    "\26\36\1\56\33\36\1\u0194\45\36\1\56\27\36\23\0"+
    "\26\23\3\0\7\23\1\u0195\12\23\27\0\26\23\3\0"+
    "\4\23\1\u0196\15\23\27\0\26\23\3\0\3\23\1\u0197"+
    "\16\23\4\0\4\36\1\37\22\36\1\u0198\22\36\1\56"+
    "\33\36\1\37\37\36\1\u0199\5\36\1\56\33\36\1\37"+
    "\32\36\1\u019a\12\36\1\56\33\36\1\u019b\45\36\1\56"+
    "\33\36\1\37\22\36\1\u019c\22\36\1\56\33\36\1\u019d"+
    "\45\36\1\56\27\36\23\0\26\23\3\0\6\23\1\u019e"+
    "\13\23\27\0\26\23\3\0\1\23\1\u019f\20\23\27\0"+
    "\26\23\3\0\4\23\1\u01a0\15\23\4\0\4\36\1\u01a1"+
    "\45\36\1\56\33\36\1\37\22\36\1\u01a2\22\36\1\56"+
    "\33\36\1\37\37\36\1\u01a3\5\36\1\56\33\36\1\37"+
    "\32\36\1\u01a4\12\36\1\56\27\36\23\0\26\23\3\0"+
    "\21\23\1\u01a5\27\0\26\23\3\0\7\23\1\u01a6\12\23"+
    "\27\0\26\23\3\0\14\23\1\u01a7\5\23\4\0\4\36"+
    "\1\u01a8\45\36\1\56\33\36\1\37\22\36\1\u01a9\22\36"+
    "\1\56\33\36\1\37\37\36\1\u01aa\5\36\1\56\27\36"+
    "\23\0\26\23\3\0\1\23\1\u01ab\20\23\27\0\26\23"+
    "\3\0\6\23\1\u01ac\13\23\4\0\4\36\1\u01ad\45\36"+
    "\1\56\33\36\1\37\22\36\1\u01ae\22\36\1\56\27\36"+
    "\23\0\26\23\3\0\3\23\1\u01af\16\23\27\0\26\23"+
    "\3\0\21\23\1\u01b0\4\0\4\36\1\u01b1\45\36\1\56"+
    "\27\36\23\0\26\23\3\0\1\23\1\u01b2\20\23\27\0"+
    "\26\23\3\0\1\23\1\u01b3\20\23\27\0\26\23\3\0"+
    "\3\23\1\u01b4\16\23\27\0\26\23\3\0\1\23\1\u01b5"+
    "\20\23\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[24948];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\7\11\1\1\1\11\1\1\2\11"+
    "\3\1\2\11\4\1\3\11\1\0\1\11\20\0\1\1"+
    "\2\11\6\1\23\0\1\1\1\0\6\1\7\0\1\11"+
    "\20\0\5\1\27\0\4\1\22\0\1\11\5\0\4\1"+
    "\2\0\1\11\3\0\1\11\17\0\1\11\4\1\6\0"+
    "\1\11\2\0\1\11\10\0\1\11\1\0\3\1\20\0"+
    "\1\11\1\0\3\1\2\0\1\11\7\0\1\11\1\0"+
    "\1\11\6\0\3\1\6\0\1\11\5\0\1\11\5\0"+
    "\3\1\1\11\21\0\3\1\5\0\1\11\14\0\3\1"+
    "\10\0\1\11\10\0\4\1\1\0\1\11\11\0\1\11"+
    "\3\0\2\11\3\1\7\0\1\11\5\0\3\1\2\0"+
    "\1\11\6\0\2\11\1\0\3\1\2\0\1\11\1\0"+
    "\1\11\3\0\1\11\3\1\3\0\1\11\1\0\1\11"+
    "\3\1\1\11\3\0\3\1\1\11\2\0\2\1\1\11"+
    "\1\0\2\1\1\11\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[437];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    /*START-CODE*/
    private ArrayList<ReportErrorInterpreter> listError = new ArrayList();
  
    private void print(String token) {
        System.out.println(token+" < " + yytext() + " > <Linea\"" + (yyline + 1) + "\">" + "<Columna\"" + (yycolumn+1) + "\">");
    }

    private void addError(){
        print("error");
        TypeIntreprete type = TypeIntreprete.LEXICON;
        Token toke = new Token(yyline + 1, yycolumn + 1, yytext());
        this.listError.add(new ReportErrorInterpreter(type, toke, ReportingConstants.ERROR_LEXEMA));
    }
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    /*FINAL-CODE*/


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexemaByMyParesUser(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {   return new java_cup.runtime.Symbol(MySymUser.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { //MANEJAR EL ERROR LEXICO
                        print("ERROR");
                        addError();
            }
          // fall through
          case 66: break;
          case 2:
            { /* print(); */
            }
          // fall through
          case 67: break;
          case 3:
            { print("("); return new Symbol(MySymUser.PARENTESIS_A,yyline,yycolumn,yytext());
            }
          // fall through
          case 68: break;
          case 4:
            { print(")"); return new Symbol(MySymUser.PARENTESIS_C,yyline,yycolumn,yytext());
            }
          // fall through
          case 69: break;
          case 5:
            { print("*"); return new Symbol(MySymUser.MULTIPLICAR,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 70: break;
          case 6:
            { print("+"); return new Symbol(MySymUser.SUMAR,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 71: break;
          case 7:
            { print(","); return new Symbol(MySymUser.COMA,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 72: break;
          case 8:
            { print("-"); return new Symbol(MySymUser.RESTAR,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 73: break;
          case 9:
            { print("/"); return new Symbol(MySymUser.DIVIDIR,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 74: break;
          case 10:
            { print("REAL_NUMEBERS"); return new Symbol(MySymUser.REAL_NUMEBERS ,yyline,yycolumn,yytext());
            }
          // fall through
          case 75: break;
          case 11:
            { print(":"); return new Symbol(MySymUser.COLNO,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 76: break;
          case 12:
            { print("<" ); return new Symbol(MySymUser.OPEN ,yyline,yycolumn,yytext());
            }
          // fall through
          case 77: break;
          case 13:
            { print("="); return new Symbol(MySymUser.EQUAL,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 78: break;
          case 14:
            { print(">" ); return new Symbol(MySymUser.CLOSE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 79: break;
          case 15:
            { String lowercaseText = yytext().toLowerCase();
                                     switch(lowercaseText) {
                                         case "xson":
                                            print("xson"); 
                                            return new Symbol(MySymUser.XSON ,yyline,yycolumn,yytext());
                                         case "version":
                                            print("version"); 
                                            return new Symbol(MySymUser.VERSION ,yyline,yycolumn,yytext());
                                        case "realizar_solicitud":
                                            print("realizar_solicitud"); 
                                            return new Symbol(MySymUser.MAKE_REQUEST ,yyline,yycolumn,yytext());
                                        case "fin_solicitud_realizada":
                                            print("fin_solicitud_realizada"); 
                                            return new Symbol(MySymUser.FINAL_REQUEST ,yyline,yycolumn,yytext());
                                        default:
                                            print("ERROR");
                                            addError();
                                            break;
                                     }
            }
          // fall through
          case 80: break;
          case 16:
            { print("["); return new Symbol(MySymUser.BRACKETS_O ,yyline,yycolumn,yytext());
            }
          // fall through
          case 81: break;
          case 17:
            { print("]"); return new Symbol(MySymUser.BRACKETS_C ,yyline,yycolumn,yytext());
            }
          // fall through
          case 82: break;
          case 18:
            { print("{"); return new Symbol(MySymUser.KEYS_O ,yyline,yycolumn,yytext());
            }
          // fall through
          case 83: break;
          case 19:
            { print("}"); return new Symbol(MySymUser.KEYS_C ,yyline,yycolumn,yytext());
            }
          // fall through
          case 84: break;
          case 20:
            { print("!>" ); return new Symbol(MySymUser.CLOSE_REQUEST ,yyline,yycolumn,yytext());
            }
          // fall through
          case 85: break;
          case 21:
            { print("STRING"); return new Symbol(MySymUser.STRING ,yyline,yycolumn,yytext());
            }
          // fall through
          case 86: break;
          case 22:
            { print("<!" ); return new Symbol(MySymUser.OPEN_REQUEST ,yyline,yycolumn,yytext());
            }
          // fall through
          case 87: break;
          case 23:
            { print("<?" ); return new Symbol(MySymUser.OPEN_VERSION ,yyline,yycolumn,yytext());
            }
          // fall through
          case 88: break;
          case 24:
            { print("?>" ); return new Symbol(MySymUser.CLOSE_VERSION ,yyline,yycolumn,yytext());
            }
          // fall through
          case 89: break;
          case 25:
            { print("xml"); return new Symbol(MySymUser.XML ,yyline,yycolumn,yytext());
            }
          // fall through
          case 90: break;
          case 26:
            { print("\"ID\""); return new Symbol(MySymUser.ID ,yyline,yycolumn,yytext());
            }
          // fall through
          case 91: break;
          case 27:
            { print("xson"); return new Symbol(MySymUser.XSON ,yyline,yycolumn,yytext());
            }
          // fall through
          case 92: break;
          case 28:
            { print("\"TEMA\""); return new Symbol(MySymUser.TEMA ,yyline,yycolumn,yytext());
            }
          // fall through
          case 93: break;
          case 29:
            { print("\"CLASE\""); return new Symbol(MySymUser.CLASE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 94: break;
          case 30:
            { print("\"FILAS\""); return new Symbol(MySymUser.FILAS ,yyline,yycolumn,yytext());
            }
          // fall through
          case 95: break;
          case 31:
            { /*COMENTARIO*/
            }
          // fall through
          case 96: break;
          case 32:
            { print("version"); return new Symbol(MySymUser.VERSION ,yyline,yycolumn,yytext());
            }
          // fall through
          case 97: break;
          case 33:
            { print("\"INDICE\""); return new Symbol(MySymUser.INDICE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 98: break;
          case 34:
            { print("\"NOMBRE\""); return new Symbol(MySymUser.NAME_PERSONAL_USER ,yyline,yycolumn,yytext());
            }
          // fall through
          case 99: break;
          case 35:
            { print("\"TRIVIA\""); return new Symbol(MySymUser.TRIVIA ,yyline,yycolumn,yytext());
            }
          // fall through
          case 100: break;
          case 36:
            { print("\"USUARIO\""); return new Symbol(MySymUser.NAME_USER ,yyline,yycolumn,yytext());
            }
          // fall through
          case 101: break;
          case 37:
            { print("\"COLUMNAS\""); return new Symbol(MySymUser.COLUMNAS ,yyline,yycolumn,yytext());
            }
          // fall through
          case 102: break;
          case 38:
            { print("\"OPCIONES\""); return new Symbol(MySymUser.OPCIONES ,yyline,yycolumn,yytext());
            }
          // fall through
          case 103: break;
          case 39:
            { print("\"PASSWORD\""); return new Symbol(MySymUser.PASS_USER ,yyline,yycolumn,yytext());
            }
          // fall through
          case 104: break;
          case 40:
            { print("\"ID_TRIVIA\""); return new Symbol(MySymUser.ID_TRIVIA ,yyline,yycolumn,yytext());
            }
          // fall through
          case 105: break;
          case 41:
            { print("\"RESPUESTA\""); return new Symbol(MySymUser.RESPUESTA ,yyline,yycolumn,yytext());
            }
          // fall through
          case 106: break;
          case 42:
            { print("DATE"); return new Symbol(MySymUser.STRING_DATE,yyline,yycolumn,yytext());
            }
          // fall through
          case 107: break;
          case 43:
            { print("INSTITUCION"); return new Symbol(MySymUser.INSTITUCION ,yyline,yycolumn,yytext());
            }
          // fall through
          case 108: break;
          case 44:
            { print("\"NUEVA_TRIVIA\""); return new Symbol(MySymUser.NEW_TRIVIA ,yyline,yycolumn,yytext());
            }
          // fall through
          case 109: break;
          case 45:
            { print("\"DATOS_USUARIO\""); return new Symbol(MySymUser.USER_DATA ,yyline,yycolumn,yytext());
            }
          // fall through
          case 110: break;
          case 46:
            { print("\"TEXTO_VISIBLE\""); return new Symbol(MySymUser.TEXTO_VISIBLE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 111: break;
          case 47:
            { print("\"USUARIO_NUEVO\""); return new Symbol(MySymUser.NEW_USER ,yyline,yycolumn,yytext());
            }
          // fall through
          case 112: break;
          case 48:
            { print("FECHA_CREACION"); return new Symbol(MySymUser.DATE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 113: break;
          case 49:
            { print("\"NUEVO_PASSWORD\""); return new Symbol(MySymUser.NUEVO_PASSWORD ,yyline,yycolumn,yytext());
            }
          // fall through
          case 114: break;
          case 50:
            { print("\"ELIMINAR_TRIVIA\""); return new Symbol(MySymUser.ELIMINAR_TRIVIA ,yyline,yycolumn,yytext());
            }
          // fall through
          case 115: break;
          case 51:
            { print("\"TIEMPO_PREGUNTA\""); return new Symbol(MySymUser.TIEMPO_PREGUNTA ,yyline,yycolumn,yytext());
            }
          // fall through
          case 116: break;
          case 52:
            { print("\"USUARIO_ANTIGUO\""); return new Symbol(MySymUser.USUARIO_ANTIGUO ,yyline,yycolumn,yytext());
            }
          // fall through
          case 117: break;
          case 53:
            { print("\"ELIMINAR_USUARIO\""); return new Symbol(MySymUser.ELIMINAR_USUARIO  ,yyline,yycolumn,yytext());
            }
          // fall through
          case 118: break;
          case 54:
            { print("\"MODIFICAR_TRIVIA\""); return new Symbol(MySymUser.MODIFICAR_TRIVIA ,yyline,yycolumn,yytext());
            }
          // fall through
          case 119: break;
          case 55:
            { print("\"USUARIO_CREACION\""); return new Symbol(MySymUser.USUARIO_CREACION ,yyline,yycolumn,yytext());
            }
          // fall through
          case 120: break;
          case 56:
            { print("realizar_solicitud"); return new Symbol(MySymUser.MAKE_REQUEST ,yyline,yycolumn,yytext());
            }
          // fall through
          case 121: break;
          case 57:
            { print("\"MODIFICAR_USUARIO\""); return new Symbol(MySymUser.MODIFICAR_USUARIO  ,yyline,yycolumn,yytext());
            }
          // fall through
          case 122: break;
          case 58:
            { print("\"PARAMETROS_TRIVIA\""); return new Symbol(MySymUser.PARAMETROS_TRIVIA ,yyline,yycolumn,yytext());
            }
          // fall through
          case 123: break;
          case 59:
            { print("\"AGREGAR_COMPONENTE\""); return new Symbol(MySymUser.AGREGAR_COMPONENTE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 124: break;
          case 60:
            { print("realizar_solicitudes"); return new Symbol(MySymUser.MAKE_REQUESTS ,yyline,yycolumn,yytext());
            }
          // fall through
          case 125: break;
          case 61:
            { print("\"ELIMINAR_COMPONENTE\""); return new Symbol(MySymUser.ELIMINAR_COMPONENTE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 126: break;
          case 62:
            { print("\"MODIFICAR_COMPONENTE\""); return new Symbol(MySymUser.MODIFICAR_COMPONENTE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 127: break;
          case 63:
            { print("\"PARAMETROS_COMPONENTE\""); return new Symbol(MySymUser.PARAMETROS_COMPONENTE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 128: break;
          case 64:
            { print("fin_solicitud_realizada"); return new Symbol(MySymUser.FINAL_REQUEST ,yyline,yycolumn,yytext());
            }
          // fall through
          case 129: break;
          case 65:
            { print("fin_solicitudes_realizada"); return new Symbol(MySymUser.FINAL_REQUESTS ,yyline,yycolumn,yytext());
            }
          // fall through
          case 130: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
