// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: code.jflex

package LexicalAndSyntacticAnalyzer.jflexandcupManagerUser;

import java_cup.runtime.Symbol;

import reports.ReportErrorInterpreter;
import reports.ReportingConstants;
import reports.TypeIntreprete;

import java.util.ArrayList;

import LexicalAndSyntacticAnalyzer.analyzer.Token;


@SuppressWarnings("fallthrough")
public class LexemaByMyParesUser implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\2\1\4\2\22\0\1\1\1\3\1\4\5\0"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\12\15\1\16\1\0\1\17\1\20\1\21\1\22\1\0"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\2\0\1\34\1\35\1\36\1\37\1\40\1\0"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\2\0"+
    "\1\50\1\51\1\52\1\0\1\53\1\0\1\54\1\0"+
    "\1\55\1\56\1\57\1\60\2\0\1\61\2\0\1\62"+
    "\1\63\1\64\1\65\2\0\1\66\1\67\1\70\1\71"+
    "\1\72\1\0\1\73\1\0\1\74\1\75\1\1\1\76"+
    "\7\0\1\2\32\0\1\1\u01df\0\1\1\177\0\13\1"+
    "\22\0\1\77\12\0\2\2\5\0\1\1\57\0\1\1"+
    "\240\0\1\1\377\0\u0100\100";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\2\1\1\17\1\20\4\1\1\21\1\22\1\23\1\0"+
    "\1\24\20\0\1\25\1\26\1\27\31\0\1\12\5\0"+
    "\1\30\10\0\1\31\24\0\1\32\55\0\1\33\13\0"+
    "\1\34\3\0\1\35\17\0\1\36\3\0\1\37\6\0"+
    "\1\40\2\0\1\41\10\0\1\42\24\0\1\43\6\0"+
    "\1\44\7\0\1\45\1\0\1\46\17\0\1\47\5\0"+
    "\1\50\10\0\1\51\31\0\1\52\27\0\1\53\15\0"+
    "\1\54\11\0\1\55\3\0\1\56\1\57\12\0\1\60"+
    "\12\0\1\61\6\0\1\62\1\63\6\0\1\64\1\0"+
    "\1\65\3\0\1\66\2\0\1\67\3\0\1\70\1\0"+
    "\1\71\3\0\1\72\5\0\1\73\1\74\4\0\1\75"+
    "\3\0\1\76\1\77\2\0\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[436];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\101\0\101\0\101"+
    "\0\101\0\101\0\101\0\101\0\u0145\0\101\0\u0186\0\101"+
    "\0\101\0\u01c7\0\u0208\0\101\0\101\0\u0249\0\u028a\0\u02cb"+
    "\0\u030c\0\101\0\101\0\101\0\u034d\0\101\0\u038e\0\u03cf"+
    "\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596\0\u05d7"+
    "\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d\0\u079e\0\101"+
    "\0\101\0\u07df\0\u0820\0\u0861\0\u08a2\0\u08e3\0\u0924\0\u0965"+
    "\0\u09a6\0\u09e7\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c\0\u0b6d"+
    "\0\u0bae\0\u0bef\0\u0c30\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75"+
    "\0\u0db6\0\u0df7\0\u075d\0\u0e38\0\u0e79\0\u0eba\0\u0efb\0\u0f3c"+
    "\0\101\0\u0f7d\0\u0fbe\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u1103"+
    "\0\u1144\0\101\0\u1185\0\u11c6\0\u1207\0\u1248\0\u1289\0\u12ca"+
    "\0\u130b\0\u134c\0\u138d\0\u13ce\0\u140f\0\u1450\0\u1491\0\u14d2"+
    "\0\u1513\0\u1554\0\u1595\0\u15d6\0\u1617\0\u1658\0\101\0\u1699"+
    "\0\u16da\0\u171b\0\u175c\0\u179d\0\u17de\0\u181f\0\u1860\0\u18a1"+
    "\0\u18e2\0\u1923\0\u1964\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9"+
    "\0\u1aea\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1"+
    "\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\u1e78\0\u1eb9"+
    "\0\u1efa\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\u2080\0\u20c1"+
    "\0\u2102\0\u2143\0\u2184\0\u21c5\0\101\0\u2206\0\u2247\0\u2288"+
    "\0\u22c9\0\u230a\0\u234b\0\u238c\0\u23cd\0\u240e\0\u244f\0\u2490"+
    "\0\101\0\u24d1\0\u2512\0\u2553\0\101\0\u2594\0\u25d5\0\u2616"+
    "\0\u2657\0\u2698\0\u26d9\0\u271a\0\u275b\0\u279c\0\u27dd\0\u281e"+
    "\0\u285f\0\u28a0\0\u28e1\0\u2922\0\101\0\u2963\0\u29a4\0\u29e5"+
    "\0\101\0\u2a26\0\u2a67\0\u2aa8\0\u2ae9\0\u2b2a\0\u2b6b\0\101"+
    "\0\u2bac\0\u2bed\0\101\0\u2c2e\0\u2c6f\0\u2cb0\0\u2cf1\0\u2d32"+
    "\0\u2d73\0\u2db4\0\u2df5\0\101\0\u2e36\0\u2e77\0\u2eb8\0\u2ef9"+
    "\0\u2f3a\0\u2f7b\0\u2fbc\0\u2ffd\0\u303e\0\u307f\0\u30c0\0\u3101"+
    "\0\u3142\0\u3183\0\u31c4\0\u3205\0\u3246\0\u3287\0\u32c8\0\u3309"+
    "\0\101\0\u334a\0\u338b\0\u33cc\0\u340d\0\u344e\0\u348f\0\101"+
    "\0\u34d0\0\u3511\0\u3552\0\u3593\0\u35d4\0\u3615\0\u3656\0\101"+
    "\0\u3697\0\101\0\u36d8\0\u3719\0\u375a\0\u379b\0\u37dc\0\u381d"+
    "\0\u385e\0\u389f\0\u38e0\0\u3921\0\u3962\0\u39a3\0\u39e4\0\u3a25"+
    "\0\u3a66\0\101\0\u3aa7\0\u3ae8\0\u3b29\0\u3b6a\0\u3bab\0\101"+
    "\0\u3bec\0\u3c2d\0\u3c6e\0\u3caf\0\u3cf0\0\u3d31\0\u3d72\0\u3db3"+
    "\0\101\0\u3df4\0\u3e35\0\u3e76\0\u3eb7\0\u3ef8\0\u3f39\0\u3f7a"+
    "\0\u3fbb\0\u3ffc\0\u403d\0\u407e\0\u40bf\0\u4100\0\u4141\0\u4182"+
    "\0\u41c3\0\u4204\0\u4245\0\u4286\0\u42c7\0\u4308\0\u4349\0\u438a"+
    "\0\u43cb\0\u440c\0\101\0\u444d\0\u448e\0\u44cf\0\u4510\0\u4551"+
    "\0\u4592\0\u45d3\0\u4614\0\u4655\0\u4696\0\u46d7\0\u4718\0\u4759"+
    "\0\u479a\0\u47db\0\u481c\0\u485d\0\u489e\0\u48df\0\u4920\0\u4961"+
    "\0\u49a2\0\u49e3\0\101\0\u4a24\0\u4a65\0\u4aa6\0\u4ae7\0\u4b28"+
    "\0\u4b69\0\u4baa\0\u4beb\0\u4c2c\0\u4c6d\0\u4cae\0\u4cef\0\u4d30"+
    "\0\101\0\u4d71\0\u4db2\0\u4df3\0\u4e34\0\u4e75\0\u4eb6\0\u4ef7"+
    "\0\u4f38\0\u4f79\0\101\0\u4fba\0\u4ffb\0\u503c\0\101\0\101"+
    "\0\u507d\0\u50be\0\u50ff\0\u5140\0\u5181\0\u51c2\0\u5203\0\u5244"+
    "\0\u5285\0\u52c6\0\101\0\u5307\0\u5348\0\u5389\0\u53ca\0\u540b"+
    "\0\u544c\0\u548d\0\u54ce\0\u550f\0\u5550\0\101\0\u5591\0\u55d2"+
    "\0\u5613\0\u5654\0\u5695\0\u56d6\0\101\0\101\0\u5717\0\u5758"+
    "\0\u5799\0\u57da\0\u581b\0\u585c\0\101\0\u589d\0\101\0\u58de"+
    "\0\u591f\0\u5960\0\101\0\u59a1\0\u59e2\0\u5a23\0\u5a64\0\u5aa5"+
    "\0\u5ae6\0\101\0\u5b27\0\101\0\u5b68\0\u5ba9\0\u5bea\0\101"+
    "\0\u5c2b\0\u5c6c\0\u5cad\0\u5cee\0\u5d2f\0\101\0\101\0\u5d70"+
    "\0\u5db1\0\u5df2\0\u5e33\0\101\0\u5e74\0\u5eb5\0\u5ef6\0\101"+
    "\0\101\0\u5f37\0\u5f78\0\101";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[436];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\2\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\5\2\1\23\17\2\1\24\1\2\1\25"+
    "\5\2\1\26\5\2\1\27\3\2\1\30\1\31\1\2"+
    "\1\32\1\33\1\2\103\0\2\3\117\0\1\34\57\0"+
    "\4\35\1\36\10\35\1\37\5\35\1\40\1\35\1\41"+
    "\1\42\1\43\1\44\2\35\1\45\1\35\1\46\1\47"+
    "\1\50\1\51\1\52\1\35\1\53\1\54\4\35\1\55"+
    "\27\35\13\0\1\56\1\0\1\15\66\0\1\57\16\0"+
    "\1\60\77\0\1\61\106\0\1\62\132\0\1\63\76\0"+
    "\1\64\100\0\1\65\104\0\1\66\3\0\1\67\11\0"+
    "\4\35\1\36\44\35\1\55\33\35\1\36\10\35\1\70"+
    "\33\35\1\55\33\35\1\36\24\35\1\71\17\35\1\55"+
    "\33\35\1\36\27\35\1\72\2\35\1\73\11\35\1\55"+
    "\33\35\1\36\16\35\1\74\25\35\1\55\33\35\1\36"+
    "\27\35\1\75\14\35\1\55\33\35\1\36\26\35\1\76"+
    "\15\35\1\55\33\35\1\36\21\35\1\77\7\35\1\100"+
    "\12\35\1\55\33\35\1\36\32\35\1\101\11\35\1\55"+
    "\33\35\1\36\32\35\1\102\4\35\1\103\4\35\1\55"+
    "\33\35\1\36\33\35\1\104\10\35\1\55\33\35\1\36"+
    "\16\35\1\105\25\35\1\55\33\35\1\36\22\35\1\106"+
    "\21\35\1\55\33\35\1\36\22\35\1\107\3\35\1\110"+
    "\5\35\1\111\7\35\1\55\33\35\1\36\35\35\1\112"+
    "\6\35\1\55\31\35\1\0\75\35\16\0\1\113\75\0"+
    "\1\114\113\0\1\115\137\0\1\116\70\0\1\117\112\0"+
    "\1\120\74\0\1\121\103\0\1\122\13\0\4\35\1\36"+
    "\10\35\1\123\33\35\1\55\33\35\1\36\34\35\1\124"+
    "\7\35\1\55\33\35\1\36\16\35\1\125\25\35\1\55"+
    "\33\35\1\36\27\35\1\126\14\35\1\55\33\35\1\36"+
    "\36\35\1\127\5\35\1\55\33\35\1\36\26\35\1\130"+
    "\15\35\1\55\33\35\1\36\27\35\1\131\14\35\1\55"+
    "\33\35\1\132\44\35\1\55\1\35\1\133\31\35\1\36"+
    "\21\35\1\134\13\35\1\135\6\35\1\55\33\35\1\36"+
    "\21\35\1\136\22\35\1\55\33\35\1\36\30\35\1\137"+
    "\13\35\1\55\33\35\1\36\22\35\1\140\21\35\1\55"+
    "\33\35\1\36\20\35\1\141\23\35\1\55\33\35\1\36"+
    "\34\35\1\142\1\143\6\35\1\55\33\35\1\36\35\35"+
    "\1\144\6\35\1\55\33\35\1\36\30\35\1\145\11\35"+
    "\1\146\1\35\1\55\33\35\1\36\22\35\1\147\21\35"+
    "\1\55\33\35\1\36\26\35\1\150\15\35\1\55\33\35"+
    "\1\36\37\35\1\151\4\35\1\55\27\35\12\0\1\152"+
    "\120\0\1\153\121\0\1\154\107\0\1\155\105\0\1\156"+
    "\75\0\1\157\14\0\4\35\1\36\10\35\1\160\33\35"+
    "\1\55\33\35\1\36\22\35\1\161\21\35\1\55\33\35"+
    "\1\36\35\35\1\162\6\35\1\55\33\35\1\36\37\35"+
    "\1\163\4\35\1\55\33\35\1\36\32\35\1\164\11\35"+
    "\1\55\33\35\1\36\30\35\1\165\13\35\1\55\33\35"+
    "\1\36\16\35\1\166\25\35\1\55\33\35\1\36\36\35"+
    "\1\167\5\35\1\55\33\35\1\36\26\35\1\170\15\35"+
    "\1\55\33\35\1\36\36\35\1\171\5\35\1\55\33\35"+
    "\1\36\26\35\1\172\15\35\1\55\33\35\1\36\17\35"+
    "\1\173\24\35\1\55\33\35\1\36\40\35\1\174\3\35"+
    "\1\55\33\35\1\36\26\35\1\175\15\35\1\55\33\35"+
    "\1\36\16\35\1\176\25\35\1\55\33\35\1\36\35\35"+
    "\1\177\6\35\1\55\33\35\1\36\33\35\1\200\10\35"+
    "\1\55\33\35\1\36\16\35\1\201\25\35\1\55\33\35"+
    "\1\36\36\35\1\202\5\35\1\55\33\35\1\36\30\35"+
    "\1\203\13\35\1\55\33\35\1\36\40\35\1\204\3\35"+
    "\1\55\33\35\1\36\16\35\1\205\25\35\1\55\27\35"+
    "\12\152\1\206\66\152\23\0\1\207\144\0\1\210\72\0"+
    "\1\211\100\0\1\212\17\0\4\35\1\36\5\35\1\213"+
    "\36\35\1\55\33\35\1\36\24\35\1\214\17\35\1\55"+
    "\33\35\1\36\22\35\1\215\21\35\1\55\33\35\1\36"+
    "\30\35\1\216\13\35\1\55\33\35\1\36\35\35\1\217"+
    "\6\35\1\55\33\35\1\36\26\35\1\220\15\35\1\55"+
    "\33\35\1\36\35\35\1\221\6\35\1\55\33\35\1\36"+
    "\34\35\1\222\7\35\1\55\33\35\1\36\20\35\1\223"+
    "\23\35\1\55\33\35\1\36\26\35\1\224\15\35\1\55"+
    "\33\35\1\36\23\35\1\225\20\35\1\55\33\35\1\36"+
    "\34\35\1\226\7\35\1\55\33\35\1\36\16\35\1\227"+
    "\13\35\1\230\11\35\1\55\33\35\1\36\32\35\1\231"+
    "\11\35\1\55\33\35\1\36\30\35\1\232\13\35\1\55"+
    "\33\35\1\36\41\35\1\233\2\35\1\55\33\35\1\36"+
    "\37\35\1\234\4\35\1\55\33\35\1\235\44\35\1\55"+
    "\33\35\1\36\32\35\1\236\11\35\1\55\33\35\1\36"+
    "\33\35\1\237\10\35\1\55\33\35\1\36\26\35\1\240"+
    "\15\35\1\55\33\35\1\36\34\35\1\241\7\35\1\55"+
    "\27\35\12\152\1\242\66\152\53\0\1\243\112\0\1\244"+
    "\107\0\1\245\71\0\1\246\13\0\4\35\1\36\10\35"+
    "\1\247\33\35\1\55\33\35\1\36\16\35\1\250\25\35"+
    "\1\55\33\35\1\251\44\35\1\55\33\35\1\36\31\35"+
    "\1\252\12\35\1\55\33\35\1\36\44\35\1\55\1\35"+
    "\1\253\31\35\1\36\31\35\1\254\12\35\1\55\33\35"+
    "\1\255\44\35\1\55\33\35\1\36\26\35\1\256\15\35"+
    "\1\55\33\35\1\36\22\35\1\257\21\35\1\55\33\35"+
    "\1\36\36\35\1\260\5\35\1\55\33\35\1\36\26\35"+
    "\1\261\15\35\1\55\33\35\1\36\22\35\1\262\21\35"+
    "\1\55\33\35\1\36\44\35\1\55\1\35\1\263\31\35"+
    "\1\36\44\35\1\55\1\35\1\264\31\35\1\36\31\35"+
    "\1\265\12\35\1\55\33\35\1\36\22\35\1\266\21\35"+
    "\1\55\33\35\1\36\32\35\1\267\11\35\1\55\33\35"+
    "\1\36\22\35\1\270\21\35\1\55\33\35\1\36\44\35"+
    "\1\55\1\35\1\271\31\35\1\36\32\35\1\272\11\35"+
    "\1\55\33\35\1\36\16\35\1\273\25\35\1\55\33\35"+
    "\1\36\26\35\1\274\15\35\1\55\27\35\12\152\1\242"+
    "\6\152\1\275\57\152\25\0\1\276\135\0\1\277\72\0"+
    "\1\300\110\0\1\301\14\0\4\35\1\36\10\35\1\302"+
    "\33\35\1\55\33\35\1\36\34\35\1\303\7\35\1\55"+
    "\33\35\1\36\16\35\1\304\25\35\1\55\33\35\1\36"+
    "\37\35\1\305\4\35\1\55\33\35\1\36\16\35\1\306"+
    "\25\35\1\55\33\35\1\36\40\35\1\307\3\35\1\55"+
    "\33\35\1\310\44\35\1\55\33\35\1\36\37\35\1\311"+
    "\4\35\1\55\33\35\1\36\20\35\1\312\23\35\1\55"+
    "\33\35\1\313\44\35\1\55\33\35\1\36\36\35\1\314"+
    "\5\35\1\55\33\35\1\36\33\35\1\315\10\35\1\55"+
    "\33\35\1\36\22\35\1\316\21\35\1\55\33\35\1\36"+
    "\36\35\1\317\5\35\1\55\33\35\1\36\34\35\1\320"+
    "\7\35\1\55\33\35\1\36\35\35\1\321\6\35\1\55"+
    "\33\35\1\36\40\35\1\322\3\35\1\55\33\35\1\36"+
    "\44\35\1\55\1\35\1\323\31\35\1\324\44\35\1\55"+
    "\33\35\1\36\32\35\1\325\11\35\1\55\27\35\41\0"+
    "\1\326\120\0\1\327\105\0\1\330\12\0\4\35\1\36"+
    "\5\35\1\331\36\35\1\55\33\35\1\36\44\35\1\55"+
    "\1\35\1\332\31\35\1\36\35\35\1\333\6\35\1\55"+
    "\33\35\1\36\35\35\1\334\6\35\1\55\33\35\1\36"+
    "\34\35\1\335\7\35\1\55\33\35\1\36\26\35\1\336"+
    "\15\35\1\55\33\35\1\36\20\35\1\337\23\35\1\55"+
    "\33\35\1\36\16\35\1\340\25\35\1\55\33\35\1\36"+
    "\34\35\1\341\7\35\1\55\33\35\1\36\16\35\1\342"+
    "\25\35\1\55\33\35\1\36\35\35\1\343\6\35\1\55"+
    "\33\35\1\36\34\35\1\344\7\35\1\55\33\35\1\36"+
    "\21\35\1\345\22\35\1\55\33\35\1\36\36\35\1\346"+
    "\5\35\1\55\33\35\1\36\26\35\1\347\15\35\1\55"+
    "\33\35\1\36\33\35\1\350\10\35\1\55\33\35\1\351"+
    "\44\35\1\55\1\35\1\352\25\35\27\0\1\353\126\0"+
    "\1\354\76\0\1\355\25\0\4\35\1\36\10\35\1\356"+
    "\33\35\1\55\33\35\1\36\20\35\1\357\23\35\1\55"+
    "\33\35\1\360\44\35\1\55\33\35\1\36\37\35\1\361"+
    "\4\35\1\55\33\35\1\36\44\35\1\55\1\35\1\362"+
    "\31\35\1\36\16\35\1\363\25\35\1\55\33\35\1\36"+
    "\26\35\1\364\15\35\1\55\33\35\1\36\34\35\1\365"+
    "\7\35\1\55\33\35\1\36\26\35\1\366\15\35\1\55"+
    "\33\35\1\36\35\35\1\367\6\35\1\55\33\35\1\370"+
    "\44\35\1\55\33\35\1\36\32\35\1\371\11\35\1\55"+
    "\33\35\1\372\44\35\1\55\33\35\1\36\16\35\1\373"+
    "\25\35\1\55\33\35\1\36\35\35\1\374\6\35\1\55"+
    "\33\35\1\36\34\35\1\375\7\35\1\55\33\35\1\36"+
    "\16\35\1\376\1\35\1\377\10\35\1\u0100\12\35\1\55"+
    "\27\35\23\0\1\u0101\136\0\1\u0102\106\0\1\u0103\11\0"+
    "\4\35\1\36\10\35\1\u0104\33\35\1\55\33\35\1\36"+
    "\32\35\1\u0105\11\35\1\55\33\35\1\36\16\35\1\u0106"+
    "\25\35\1\55\33\35\1\36\20\35\1\u0107\15\35\1\u0108"+
    "\1\u0109\4\35\1\55\33\35\1\u010a\44\35\1\55\33\35"+
    "\1\36\32\35\1\u010b\11\35\1\55\33\35\1\36\44\35"+
    "\1\55\1\35\1\u010c\31\35\1\36\40\35\1\u010d\3\35"+
    "\1\55\33\35\1\36\35\35\1\u010e\6\35\1\55\33\35"+
    "\1\36\35\35\1\u010f\6\35\1\55\33\35\1\u0110\44\35"+
    "\1\55\33\35\1\36\26\35\1\u0111\15\35\1\55\33\35"+
    "\1\36\22\35\1\u0112\21\35\1\55\33\35\1\36\31\35"+
    "\1\u0113\12\35\1\55\33\35\1\36\34\35\1\u0114\7\35"+
    "\1\55\33\35\1\36\37\35\1\u0115\4\35\1\55\27\35"+
    "\25\0\1\u0116\143\0\1\u0117\75\0\1\u0118\13\0\4\35"+
    "\1\u0119\44\35\1\55\33\35\1\36\30\35\1\u011a\13\35"+
    "\1\55\33\35\1\36\34\35\1\u011b\7\35\1\55\33\35"+
    "\1\36\32\35\1\u011c\11\35\1\55\33\35\1\36\34\35"+
    "\1\u011d\7\35\1\55\33\35\1\36\35\35\1\u011e\6\35"+
    "\1\55\33\35\1\36\31\35\1\u011f\12\35\1\55\33\35"+
    "\1\36\20\35\1\u0120\15\35\1\u0121\1\u0122\4\35\1\55"+
    "\33\35\1\36\26\35\1\u0123\15\35\1\55\33\35\1\36"+
    "\41\35\1\u0124\2\35\1\55\33\35\1\36\44\35\1\55"+
    "\1\35\1\u0125\31\35\1\36\17\35\1\u0126\24\35\1\55"+
    "\33\35\1\36\24\35\1\u0127\17\35\1\55\33\35\1\36"+
    "\36\35\1\u0128\5\35\1\55\33\35\1\36\22\35\1\u0129"+
    "\21\35\1\55\33\35\1\36\22\35\1\u012a\21\35\1\55"+
    "\27\35\33\0\1\u012b\136\0\1\u012c\71\0\1\u012d\16\0"+
    "\4\35\1\36\33\35\1\u012e\10\35\1\55\33\35\1\36"+
    "\26\35\1\u012f\15\35\1\55\33\35\1\36\30\35\1\u0130"+
    "\13\35\1\55\33\35\1\36\26\35\1\u0131\15\35\1\55"+
    "\33\35\1\36\37\35\1\u0132\4\35\1\55\33\35\1\u0133"+
    "\44\35\1\55\33\35\1\36\32\35\1\u0134\11\35\1\55"+
    "\33\35\1\36\34\35\1\u0135\7\35\1\55\33\35\1\36"+
    "\35\35\1\u0136\6\35\1\55\33\35\1\36\16\35\1\u0137"+
    "\25\35\1\55\33\35\1\36\32\35\1\u0138\11\35\1\55"+
    "\33\35\1\36\20\35\1\u0139\15\35\1\u013a\5\35\1\55"+
    "\33\35\1\36\27\35\1\u013b\14\35\1\55\33\35\1\36"+
    "\37\35\1\u013c\4\35\1\55\33\35\1\36\26\35\1\u013d"+
    "\15\35\1\55\33\35\1\36\16\35\1\u013e\25\35\1\55"+
    "\33\35\1\36\40\35\1\u013f\3\35\1\55\27\35\37\0"+
    "\1\u0140\117\0\1\u0141\103\0\1\u0142\17\0\4\35\1\36"+
    "\32\35\1\u0143\11\35\1\55\33\35\1\36\32\35\1\u0144"+
    "\11\35\1\55\33\35\1\36\33\35\1\u0145\10\35\1\55"+
    "\33\35\1\36\40\35\1\u0146\3\35\1\55\33\35\1\36"+
    "\16\35\1\u0147\25\35\1\55\33\35\1\36\30\35\1\u0148"+
    "\13\35\1\55\33\35\1\36\26\35\1\u0149\15\35\1\55"+
    "\33\35\1\36\37\35\1\u014a\4\35\1\55\33\35\1\u014b"+
    "\44\35\1\55\33\35\1\36\34\35\1\u014c\7\35\1\55"+
    "\33\35\1\36\32\35\1\u014d\11\35\1\55\33\35\1\36"+
    "\34\35\1\u014e\7\35\1\55\33\35\1\36\22\35\1\u014f"+
    "\21\35\1\55\33\35\1\36\31\35\1\u0150\12\35\1\55"+
    "\33\35\1\36\24\35\1\u0151\17\35\1\55\33\35\1\36"+
    "\20\35\1\u0152\23\35\1\55\33\35\1\36\32\35\1\u0153"+
    "\11\35\1\55\27\35\36\0\1\u0154\115\0\1\u0155\3\0"+
    "\1\u0156\76\0\1\u0157\23\0\4\35\1\36\31\35\1\u0158"+
    "\12\35\1\55\33\35\1\u0159\44\35\1\55\33\35\1\36"+
    "\32\35\1\u015a\11\35\1\55\33\35\1\36\26\35\1\u015b"+
    "\15\35\1\55\33\35\1\36\34\35\1\u015c\7\35\1\55"+
    "\33\35\1\36\33\35\1\u015d\10\35\1\55\33\35\1\36"+
    "\40\35\1\u015e\3\35\1\55\33\35\1\36\16\35\1\u015f"+
    "\25\35\1\55\33\35\1\36\21\35\1\u0160\22\35\1\55"+
    "\33\35\1\36\30\35\1\u0161\13\35\1\55\33\35\1\36"+
    "\26\35\1\u0162\15\35\1\55\33\35\1\u0163\44\35\1\55"+
    "\33\35\1\36\36\35\1\u0164\5\35\1\55\33\35\1\36"+
    "\37\35\1\u0165\4\35\1\55\33\35\1\36\26\35\1\u0166"+
    "\15\35\1\55\33\35\1\u0167\44\35\1\55\27\35\77\0"+
    "\1\u0168\67\0\1\u0169\101\0\1\u016a\72\0\1\u016b\17\0"+
    "\4\35\1\36\22\35\1\u016c\21\35\1\55\33\35\1\36"+
    "\31\35\1\u016d\12\35\1\55\33\35\1\36\16\35\1\u016e"+
    "\25\35\1\55\33\35\1\36\26\35\1\u016f\15\35\1\55"+
    "\33\35\1\36\32\35\1\u0170\11\35\1\55\33\35\1\36"+
    "\26\35\1\u0171\15\35\1\55\33\35\1\36\34\35\1\u0172"+
    "\7\35\1\55\33\35\1\u0173\44\35\1\55\33\35\1\36"+
    "\33\35\1\u0174\10\35\1\55\33\35\1\36\40\35\1\u0175"+
    "\3\35\1\55\33\35\1\36\16\35\1\u0176\25\35\1\55"+
    "\33\35\1\36\32\35\1\u0177\11\35\1\55\33\35\1\36"+
    "\32\35\1\u0178\11\35\1\55\27\35\57\0\1\u0179\74\0"+
    "\1\u017a\115\0\1\u017b\10\0\4\35\1\36\31\35\1\u017c"+
    "\12\35\1\55\33\35\1\36\22\35\1\u017d\21\35\1\55"+
    "\33\35\1\u017e\44\35\1\55\33\35\1\36\32\35\1\u017f"+
    "\11\35\1\55\33\35\1\36\31\35\1\u0180\12\35\1\55"+
    "\33\35\1\36\16\35\1\u0181\25\35\1\55\33\35\1\36"+
    "\26\35\1\u0182\15\35\1\55\33\35\1\36\32\35\1\u0183"+
    "\11\35\1\55\33\35\1\36\26\35\1\u0184\15\35\1\55"+
    "\33\35\1\u0185\44\35\1\55\33\35\1\u0186\44\35\1\55"+
    "\33\35\1\36\31\35\1\u0187\12\35\1\55\27\35\54\0"+
    "\1\u0188\112\0\1\u0189\103\0\1\u018a\7\0\4\35\1\36"+
    "\36\35\1\u018b\5\35\1\55\33\35\1\36\31\35\1\u018c"+
    "\12\35\1\55\33\35\1\u018d\44\35\1\55\33\35\1\36"+
    "\22\35\1\u018e\21\35\1\55\33\35\1\u018f\44\35\1\55"+
    "\33\35\1\36\32\35\1\u0190\11\35\1\55\33\35\1\36"+
    "\31\35\1\u0191\12\35\1\55\33\35\1\36\16\35\1\u0192"+
    "\25\35\1\55\33\35\1\u0193\44\35\1\55\27\35\62\0"+
    "\1\u0194\75\0\1\u0195\77\0\1\u0196\22\0\4\35\1\36"+
    "\22\35\1\u0197\21\35\1\55\33\35\1\36\36\35\1\u0198"+
    "\5\35\1\55\33\35\1\36\31\35\1\u0199\12\35\1\55"+
    "\33\35\1\u019a\44\35\1\55\33\35\1\36\22\35\1\u019b"+
    "\21\35\1\55\33\35\1\u019c\44\35\1\55\27\35\61\0"+
    "\1\u019d\73\0\1\u019e\103\0\1\u019f\21\0\4\35\1\u01a0"+
    "\44\35\1\55\33\35\1\36\22\35\1\u01a1\21\35\1\55"+
    "\33\35\1\36\36\35\1\u01a2\5\35\1\55\33\35\1\36"+
    "\31\35\1\u01a3\12\35\1\55\27\35\74\0\1\u01a4\66\0"+
    "\1\u01a5\105\0\1\u01a6\11\0\4\35\1\u01a7\44\35\1\55"+
    "\33\35\1\36\22\35\1\u01a8\21\35\1\55\33\35\1\36"+
    "\36\35\1\u01a9\5\35\1\55\27\35\54\0\1\u01aa\105\0"+
    "\1\u01ab\17\0\4\35\1\u01ac\44\35\1\55\33\35\1\36"+
    "\22\35\1\u01ad\21\35\1\55\27\35\56\0\1\u01ae\116\0"+
    "\1\u01af\4\0\4\35\1\u01b0\44\35\1\55\27\35\54\0"+
    "\1\u01b1\100\0\1\u01b2\102\0\1\u01b3\76\0\1\u01b4\24\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[24505];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\7\11\1\1\1\11\1\1\2\11"+
    "\2\1\2\11\4\1\3\11\1\0\1\11\20\0\1\1"+
    "\2\11\31\0\1\1\5\0\1\11\10\0\1\11\24\0"+
    "\1\11\55\0\1\11\13\0\1\11\3\0\1\11\17\0"+
    "\1\11\3\0\1\11\6\0\1\11\2\0\1\11\10\0"+
    "\1\11\24\0\1\11\6\0\1\11\7\0\1\11\1\0"+
    "\1\11\17\0\1\11\5\0\1\11\10\0\1\11\31\0"+
    "\1\11\27\0\1\11\15\0\1\11\11\0\1\11\3\0"+
    "\2\11\12\0\1\11\12\0\1\11\6\0\2\11\6\0"+
    "\1\11\1\0\1\11\3\0\1\11\2\0\1\1\3\0"+
    "\1\11\1\0\1\11\3\0\1\11\5\0\2\11\4\0"+
    "\1\11\3\0\2\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[436];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    /*START-CODE*/
    private ArrayList<ReportErrorInterpreter> listError = new ArrayList();
  
    private void print(String token) {
        //System.out.println(" < " + yytext() + " > <Linea\"" + (yyline + 1) + "\">" + "<Columna\"" + (yycolumn+1) + "\">");
    }

    private void addError(){
        print("error");
        TypeIntreprete type = TypeIntreprete.LEXICON;
        Token toke = new Token(yyline + 1, yycolumn + 1, yytext());
        this.listError.add(new ReportErrorInterpreter(type, toke, ReportingConstants.ERROR_LEXEMA));
    }
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    /*FINAL-CODE*/


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexemaByMyParesUser(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {   return new java_cup.runtime.Symbol(MySymUser.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { //MANEJAR EL ERROR LEXICO
                        print("ERROR");
                        addError();
            }
          // fall through
          case 65: break;
          case 2:
            { /* print(); */
            }
          // fall through
          case 66: break;
          case 3:
            { print("("); return new Symbol(MySymUser.PARENTESIS_A,yyline,yycolumn,yytext());
            }
          // fall through
          case 67: break;
          case 4:
            { print(")"); return new Symbol(MySymUser.PARENTESIS_C,yyline,yycolumn,yytext());
            }
          // fall through
          case 68: break;
          case 5:
            { print("*"); return new Symbol(MySymUser.MULTIPLICAR,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 69: break;
          case 6:
            { print("+"); return new Symbol(MySymUser.SUMAR,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 70: break;
          case 7:
            { print(","); return new Symbol(MySymUser.COMA,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 71: break;
          case 8:
            { print("-"); return new Symbol(MySymUser.RESTAR,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 72: break;
          case 9:
            { print("/"); return new Symbol(MySymUser.DIVIDIR,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 73: break;
          case 10:
            { print("REAL_NUMEBERS"); return new Symbol(MySymUser.REAL_NUMEBERS ,yyline,yycolumn,yytext());
            }
          // fall through
          case 74: break;
          case 11:
            { print(":"); return new Symbol(MySymUser.COLNO,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 75: break;
          case 12:
            { print("<" ); return new Symbol(MySymUser.OPEN ,yyline,yycolumn,yytext());
            }
          // fall through
          case 76: break;
          case 13:
            { print("="); return new Symbol(MySymUser.EQUAL,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 77: break;
          case 14:
            { print(">" ); return new Symbol(MySymUser.CLOSE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 78: break;
          case 15:
            { print("["); return new Symbol(MySymUser.BRACKETS_O ,yyline,yycolumn,yytext());
            }
          // fall through
          case 79: break;
          case 16:
            { print("]"); return new Symbol(MySymUser.BRACKETS_C ,yyline,yycolumn,yytext());
            }
          // fall through
          case 80: break;
          case 17:
            { print("{"); return new Symbol(MySymUser.KEYS_O ,yyline,yycolumn,yytext());
            }
          // fall through
          case 81: break;
          case 18:
            { print("}"); return new Symbol(MySymUser.KEYS_C ,yyline,yycolumn,yytext());
            }
          // fall through
          case 82: break;
          case 19:
            { print("!>" ); return new Symbol(MySymUser.CLOSE_REQUEST ,yyline,yycolumn,yytext());
            }
          // fall through
          case 83: break;
          case 20:
            { print("STRING"); return new Symbol(MySymUser.STRING ,yyline,yycolumn,yytext());
            }
          // fall through
          case 84: break;
          case 21:
            { print("<!" ); return new Symbol(MySymUser.OPEN_REQUEST ,yyline,yycolumn,yytext());
            }
          // fall through
          case 85: break;
          case 22:
            { print("<?" ); return new Symbol(MySymUser.OPEN_VERSION ,yyline,yycolumn,yytext());
            }
          // fall through
          case 86: break;
          case 23:
            { print("?>" ); return new Symbol(MySymUser.CLOSE_VERSION ,yyline,yycolumn,yytext());
            }
          // fall through
          case 87: break;
          case 24:
            { print("xml"); return new Symbol(MySymUser.XML ,yyline,yycolumn,yytext());
            }
          // fall through
          case 88: break;
          case 25:
            { print("\"ID\""); return new Symbol(MySymUser.ID ,yyline,yycolumn,yytext());
            }
          // fall through
          case 89: break;
          case 26:
            { print("xson"); return new Symbol(MySymUser.XSON ,yyline,yycolumn,yytext());
            }
          // fall through
          case 90: break;
          case 27:
            { print("\"TEMA\""); return new Symbol(MySymUser.TEMA ,yyline,yycolumn,yytext());
            }
          // fall through
          case 91: break;
          case 28:
            { print("\"CLASE\""); return new Symbol(MySymUser.CLASE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 92: break;
          case 29:
            { print("\"FILAS\""); return new Symbol(MySymUser.FILAS ,yyline,yycolumn,yytext());
            }
          // fall through
          case 93: break;
          case 30:
            { /*COMENTARIO*/
            }
          // fall through
          case 94: break;
          case 31:
            { print("version"); return new Symbol(MySymUser.VERSION ,yyline,yycolumn,yytext());
            }
          // fall through
          case 95: break;
          case 32:
            { print("\"INDICE\""); return new Symbol(MySymUser.INDICE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 96: break;
          case 33:
            { print("\"NOMBRE\""); return new Symbol(MySymUser.NAME_PERSONAL_USER ,yyline,yycolumn,yytext());
            }
          // fall through
          case 97: break;
          case 34:
            { print("\"TRIVIA\""); return new Symbol(MySymUser.TRIVIA ,yyline,yycolumn,yytext());
            }
          // fall through
          case 98: break;
          case 35:
            { print("\"USUARIO\""); return new Symbol(MySymUser.NAME_USER ,yyline,yycolumn,yytext());
            }
          // fall through
          case 99: break;
          case 36:
            { print("\"COLUMNAS\""); return new Symbol(MySymUser.COLUMNAS ,yyline,yycolumn,yytext());
            }
          // fall through
          case 100: break;
          case 37:
            { print("\"OPCIONES\""); return new Symbol(MySymUser.OPCIONES ,yyline,yycolumn,yytext());
            }
          // fall through
          case 101: break;
          case 38:
            { print("\"PASSWORD\""); return new Symbol(MySymUser.PASS_USER ,yyline,yycolumn,yytext());
            }
          // fall through
          case 102: break;
          case 39:
            { print("\"ID_TRIVIA\""); return new Symbol(MySymUser.ID_TRIVIA ,yyline,yycolumn,yytext());
            }
          // fall through
          case 103: break;
          case 40:
            { print("\"RESPUESTA\""); return new Symbol(MySymUser.RESPUESTA ,yyline,yycolumn,yytext());
            }
          // fall through
          case 104: break;
          case 41:
            { print("DATE"); return new Symbol(MySymUser.STRING_DATE,yyline,yycolumn,yytext());
            }
          // fall through
          case 105: break;
          case 42:
            { print("INSTITUCION"); return new Symbol(MySymUser.INSTITUCION ,yyline,yycolumn,yytext());
            }
          // fall through
          case 106: break;
          case 43:
            { print("\"NUEVA_TRIVIA\""); return new Symbol(MySymUser.NEW_TRIVIA ,yyline,yycolumn,yytext());
            }
          // fall through
          case 107: break;
          case 44:
            { print("\"DATOS_USUARIO\""); return new Symbol(MySymUser.USER_DATA ,yyline,yycolumn,yytext());
            }
          // fall through
          case 108: break;
          case 45:
            { print("\"TEXTO_VISIBLE\""); return new Symbol(MySymUser.TEXTO_VISIBLE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 109: break;
          case 46:
            { print("\"USUARIO_NUEVO\""); return new Symbol(MySymUser.NEW_USER ,yyline,yycolumn,yytext());
            }
          // fall through
          case 110: break;
          case 47:
            { print("FECHA_CREACION"); return new Symbol(MySymUser.DATE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 111: break;
          case 48:
            { print("\"NUEVO_PASSWORD\""); return new Symbol(MySymUser.NUEVO_PASSWORD ,yyline,yycolumn,yytext());
            }
          // fall through
          case 112: break;
          case 49:
            { print("\"ELIMINAR_TRIVIA\""); return new Symbol(MySymUser.ELIMINAR_TRIVIA ,yyline,yycolumn,yytext());
            }
          // fall through
          case 113: break;
          case 50:
            { print("\"TIEMPO_PREGUNTA\""); return new Symbol(MySymUser.TIEMPO_PREGUNTA ,yyline,yycolumn,yytext());
            }
          // fall through
          case 114: break;
          case 51:
            { print("\"USUARIO_ANTIGUO\""); return new Symbol(MySymUser.USUARIO_ANTIGUO ,yyline,yycolumn,yytext());
            }
          // fall through
          case 115: break;
          case 52:
            { print("\"ELIMINAR_USUARIO\""); return new Symbol(MySymUser.ELIMINAR_USUARIO  ,yyline,yycolumn,yytext());
            }
          // fall through
          case 116: break;
          case 53:
            { print("\"MODIFICAR_TRIVIA\""); return new Symbol(MySymUser.MODIFICAR_TRIVIA ,yyline,yycolumn,yytext());
            }
          // fall through
          case 117: break;
          case 54:
            { print("\"USUARIO_CREACION\""); return new Symbol(MySymUser.USUARIO_CREACION ,yyline,yycolumn,yytext());
            }
          // fall through
          case 118: break;
          case 55:
            { print("realizar_solicitud"); return new Symbol(MySymUser.MAKE_REQUEST ,yyline,yycolumn,yytext());
            }
          // fall through
          case 119: break;
          case 56:
            { print("\"MODIFICAR_USUARIO\""); return new Symbol(MySymUser.MODIFICAR_USUARIO  ,yyline,yycolumn,yytext());
            }
          // fall through
          case 120: break;
          case 57:
            { print("\"PARAMETROS_TRIVIA\""); return new Symbol(MySymUser.PARAMETROS_TRIVIA ,yyline,yycolumn,yytext());
            }
          // fall through
          case 121: break;
          case 58:
            { print("\"AGREGAR_COMPONENTE\""); return new Symbol(MySymUser.AGREGAR_COMPONENTE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 122: break;
          case 59:
            { print("realizar_solicitudes"); return new Symbol(MySymUser.MAKE_REQUESTS ,yyline,yycolumn,yytext());
            }
          // fall through
          case 123: break;
          case 60:
            { print("\"ELIMINAR_COMPONENTE\""); return new Symbol(MySymUser.ELIMINAR_COMPONENTE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 124: break;
          case 61:
            { print("\"MODIFICAR_COMPONENTE\""); return new Symbol(MySymUser.MODIFICAR_COMPONENTE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 125: break;
          case 62:
            { print("\"PARAMETROS_COMPONENTE\""); return new Symbol(MySymUser.PARAMETROS_COMPONENTE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 126: break;
          case 63:
            { print("fin_solicitud_realizada"); return new Symbol(MySymUser.FINAL_REQUEST ,yyline,yycolumn,yytext());
            }
          // fall through
          case 127: break;
          case 64:
            { print("fin_solicitudes_realizada"); return new Symbol(MySymUser.FINAL_REQUESTS ,yyline,yycolumn,yytext());
            }
          // fall through
          case 128: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
