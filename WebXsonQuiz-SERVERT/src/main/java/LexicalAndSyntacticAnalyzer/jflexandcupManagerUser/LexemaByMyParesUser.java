// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: code.jflex

package LexicalAndSyntacticAnalyzer.jflexandcupManagerUser;

import java_cup.runtime.Symbol;

import reports.ReportErrorInterpreter;
import reports.ReportingConstants;
import reports.TypeIntreprete;

import java.util.ArrayList;

import LexicalAndSyntacticAnalyzer.analyzer.Token;


@SuppressWarnings("fallthrough")
public class LexemaByMyParesUser implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\2\1\4\2\22\0\1\1\1\3\1\4\1\0"+
    "\1\5\3\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\12\16\1\17\1\0\1\20\1\21\1\22"+
    "\1\23\1\0\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\2\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\35\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\2\35\1\52\1\53\1\54\1\0\1\55\1\0"+
    "\1\56\1\35\1\57\1\60\1\61\1\62\2\35\1\63"+
    "\2\35\1\64\1\65\1\66\1\67\2\35\1\70\1\71"+
    "\1\72\1\73\1\74\1\35\1\75\1\35\1\76\1\77"+
    "\1\100\1\101\7\0\1\2\32\0\1\1\u01df\0\1\1"+
    "\177\0\13\1\22\0\1\102\12\0\2\2\5\0\1\1"+
    "\57\0\1\1\240\0\1\1\377\0\u0100\103";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\1\2\17\1\20\1\21\4\17\1\22\1\23\1\24"+
    "\1\0\1\25\21\0\1\26\1\27\1\30\6\17\1\31"+
    "\24\0\1\12\1\0\4\17\1\32\1\17\7\0\1\33"+
    "\20\0\4\17\1\34\27\0\4\17\22\0\1\35\5\0"+
    "\4\17\2\0\1\36\3\0\1\37\17\0\1\40\3\17"+
    "\1\41\6\0\1\42\2\0\1\43\10\0\1\44\1\0"+
    "\3\17\20\0\1\45\1\0\3\17\2\0\1\46\7\0"+
    "\1\47\1\0\1\50\6\0\3\17\6\0\1\51\5\0"+
    "\1\52\5\0\3\17\1\53\21\0\3\17\5\0\1\54"+
    "\14\0\3\17\10\0\1\55\10\0\4\17\1\0\1\56"+
    "\11\0\1\57\3\0\1\60\1\61\3\17\7\0\1\62"+
    "\5\0\3\17\2\0\1\63\6\0\1\64\1\65\1\0"+
    "\3\17\2\0\1\66\1\0\1\67\3\0\1\70\2\17"+
    "\1\71\3\0\1\72\1\0\1\73\3\17\1\74\3\0"+
    "\2\17\1\75\1\76\2\0\2\17\1\77\1\0\2\17"+
    "\1\100\1\101\2\17\1\102";

  private static int [] zzUnpackAction() {
    int [] result = new int[440];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\104\0\104\0\104"+
    "\0\104\0\104\0\104\0\104\0\u0154\0\104\0\u0198\0\104"+
    "\0\104\0\u01dc\0\u0220\0\u0264\0\104\0\104\0\u02a8\0\u02ec"+
    "\0\u0330\0\u0374\0\104\0\104\0\104\0\u03b8\0\104\0\u03fc"+
    "\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c"+
    "\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8\0\u083c"+
    "\0\u0880\0\104\0\104\0\u08c4\0\u0908\0\u094c\0\u0990\0\u09d4"+
    "\0\u0a18\0\104\0\u0a5c\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c\0\u0bb0"+
    "\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04\0\u0d48\0\u0d8c\0\u0dd0"+
    "\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0\0\u0f24\0\u0f68\0\u083c\0\u0fac"+
    "\0\u0ff0\0\u1034\0\u1078\0\u10bc\0\u0220\0\u1100\0\u1144\0\u1188"+
    "\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc\0\104\0\u1320\0\u1364"+
    "\0\u13a8\0\u13ec\0\u1430\0\u1474\0\u14b8\0\u14fc\0\u1540\0\u1584"+
    "\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8\0\u171c\0\u1760\0\u17a4"+
    "\0\u17e8\0\u182c\0\u0220\0\u1870\0\u18b4\0\u18f8\0\u193c\0\u1980"+
    "\0\u19c4\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0"+
    "\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0"+
    "\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0"+
    "\0\u2024\0\u2068\0\u20ac\0\u20f0\0\u2134\0\u2178\0\u21bc\0\u2200"+
    "\0\u2244\0\u2288\0\u22cc\0\u2310\0\u2354\0\u2398\0\u23dc\0\u2420"+
    "\0\104\0\u2464\0\u24a8\0\u24ec\0\u2530\0\u2574\0\u25b8\0\u25fc"+
    "\0\u2640\0\u2684\0\u26c8\0\u270c\0\104\0\u2750\0\u2794\0\u27d8"+
    "\0\104\0\u281c\0\u2860\0\u28a4\0\u28e8\0\u292c\0\u2970\0\u29b4"+
    "\0\u29f8\0\u2a3c\0\u2a80\0\u2ac4\0\u2b08\0\u2b4c\0\u2b90\0\u2bd4"+
    "\0\104\0\u2c18\0\u2c5c\0\u2ca0\0\u0220\0\u2ce4\0\u2d28\0\u2d6c"+
    "\0\u2db0\0\u2df4\0\u2e38\0\104\0\u2e7c\0\u2ec0\0\104\0\u2f04"+
    "\0\u2f48\0\u2f8c\0\u2fd0\0\u3014\0\u3058\0\u309c\0\u30e0\0\104"+
    "\0\u3124\0\u3168\0\u31ac\0\u31f0\0\u3234\0\u3278\0\u32bc\0\u3300"+
    "\0\u3344\0\u3388\0\u33cc\0\u3410\0\u3454\0\u3498\0\u34dc\0\u3520"+
    "\0\u3564\0\u35a8\0\u35ec\0\u3630\0\104\0\u3674\0\u36b8\0\u36fc"+
    "\0\u3740\0\u3784\0\u37c8\0\104\0\u380c\0\u3850\0\u3894\0\u38d8"+
    "\0\u391c\0\u3960\0\u39a4\0\104\0\u39e8\0\104\0\u3a2c\0\u3a70"+
    "\0\u3ab4\0\u3af8\0\u3b3c\0\u3b80\0\u3bc4\0\u3c08\0\u3c4c\0\u3c90"+
    "\0\u3cd4\0\u3d18\0\u3d5c\0\u3da0\0\u3de4\0\104\0\u3e28\0\u3e6c"+
    "\0\u3eb0\0\u3ef4\0\u3f38\0\104\0\u3f7c\0\u3fc0\0\u4004\0\u4048"+
    "\0\u408c\0\u40d0\0\u4114\0\u4158\0\104\0\u419c\0\u41e0\0\u4224"+
    "\0\u4268\0\u42ac\0\u42f0\0\u4334\0\u4378\0\u43bc\0\u4400\0\u4444"+
    "\0\u4488\0\u44cc\0\u4510\0\u4554\0\u4598\0\u45dc\0\u4620\0\u4664"+
    "\0\u46a8\0\u46ec\0\u4730\0\u4774\0\u47b8\0\u47fc\0\104\0\u4840"+
    "\0\u4884\0\u48c8\0\u490c\0\u4950\0\u4994\0\u49d8\0\u4a1c\0\u4a60"+
    "\0\u4aa4\0\u4ae8\0\u4b2c\0\u4b70\0\u4bb4\0\u4bf8\0\u4c3c\0\u4c80"+
    "\0\u4cc4\0\u4d08\0\u4d4c\0\u4d90\0\u4dd4\0\u4e18\0\104\0\u4e5c"+
    "\0\u4ea0\0\u4ee4\0\u4f28\0\u4f6c\0\u4fb0\0\u4ff4\0\u5038\0\u507c"+
    "\0\u50c0\0\u5104\0\u5148\0\u518c\0\104\0\u51d0\0\u5214\0\u5258"+
    "\0\u529c\0\u52e0\0\u5324\0\u5368\0\u53ac\0\u53f0\0\104\0\u5434"+
    "\0\u5478\0\u54bc\0\104\0\104\0\u5500\0\u5544\0\u5588\0\u55cc"+
    "\0\u5610\0\u5654\0\u5698\0\u56dc\0\u5720\0\u5764\0\104\0\u57a8"+
    "\0\u57ec\0\u5830\0\u5874\0\u58b8\0\u58fc\0\u5940\0\u5984\0\u59c8"+
    "\0\u5a0c\0\104\0\u5a50\0\u5a94\0\u5ad8\0\u5b1c\0\u5b60\0\u5ba4"+
    "\0\104\0\104\0\u5be8\0\u5c2c\0\u5c70\0\u5cb4\0\u5cf8\0\u5d3c"+
    "\0\104\0\u5d80\0\104\0\u5dc4\0\u5e08\0\u5e4c\0\104\0\u5e90"+
    "\0\u5ed4\0\u5f18\0\u5f5c\0\u5fa0\0\u5fe4\0\104\0\u6028\0\104"+
    "\0\u606c\0\u60b0\0\u60f4\0\104\0\u6138\0\u617c\0\u61c0\0\u6204"+
    "\0\u6248\0\u0220\0\104\0\u628c\0\u62d0\0\u6314\0\u6358\0\104"+
    "\0\u639c\0\u63e0\0\u6424\0\104\0\u0220\0\u6468\0\u64ac\0\u0220";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[440];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\2\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\5\23\1\24\20\23\1\25\1\2"+
    "\1\26\5\23\1\27\5\23\1\30\3\23\1\31\1\32"+
    "\1\23\1\33\1\3\1\34\1\2\106\0\2\3\75\0"+
    "\1\3\25\0\1\35\61\0\4\36\1\37\1\40\10\36"+
    "\1\41\5\36\1\42\1\36\1\43\1\44\1\45\1\46"+
    "\2\36\1\47\2\36\1\50\1\51\1\52\1\53\1\54"+
    "\1\36\1\55\1\56\4\36\1\57\1\36\1\40\22\36"+
    "\1\40\3\36\14\0\1\60\1\0\1\15\70\0\1\61"+
    "\17\0\1\62\102\0\1\63\105\0\26\23\3\0\22\23"+
    "\31\0\4\23\1\64\21\23\3\0\22\23\31\0\26\23"+
    "\3\0\6\23\1\65\13\23\31\0\26\23\3\0\4\23"+
    "\1\66\15\23\31\0\26\23\3\0\4\23\1\67\15\23"+
    "\31\0\26\23\3\0\10\23\1\70\3\23\1\71\5\23"+
    "\5\0\4\36\1\37\46\36\1\57\30\36\4\40\1\72"+
    "\46\40\1\73\30\40\4\36\1\37\11\36\1\74\34\36"+
    "\1\57\34\36\1\37\25\36\1\75\20\36\1\57\34\36"+
    "\1\37\31\36\1\76\2\36\1\77\11\36\1\57\34\36"+
    "\1\37\17\36\1\100\26\36\1\57\34\36\1\37\31\36"+
    "\1\101\14\36\1\57\34\36\1\37\27\36\1\102\16\36"+
    "\1\57\34\36\1\37\22\36\1\103\10\36\1\104\12\36"+
    "\1\57\34\36\1\37\34\36\1\105\11\36\1\57\34\36"+
    "\1\37\34\36\1\106\4\36\1\107\4\36\1\57\34\36"+
    "\1\37\35\36\1\110\10\36\1\57\34\36\1\37\17\36"+
    "\1\111\26\36\1\57\34\36\1\37\23\36\1\112\22\36"+
    "\1\57\34\36\1\37\23\36\1\113\3\36\1\114\6\36"+
    "\1\115\7\36\1\57\34\36\1\37\37\36\1\116\6\36"+
    "\1\57\32\36\1\0\100\36\17\0\1\117\100\0\1\120"+
    "\114\0\2\23\1\121\23\23\3\0\22\23\31\0\26\23"+
    "\3\0\11\23\1\122\10\23\31\0\26\23\3\0\1\23"+
    "\1\123\20\23\31\0\26\23\3\0\13\23\1\124\6\23"+
    "\31\0\26\23\3\0\7\23\1\125\12\23\31\0\26\23"+
    "\3\0\12\23\1\126\7\23\5\0\2\40\1\0\100\40"+
    "\1\0\4\36\1\37\11\36\1\127\34\36\1\57\34\36"+
    "\1\37\36\36\1\130\7\36\1\57\34\36\1\37\17\36"+
    "\1\131\26\36\1\57\34\36\1\37\31\36\1\132\14\36"+
    "\1\57\34\36\1\37\40\36\1\133\5\36\1\57\34\36"+
    "\1\37\27\36\1\134\16\36\1\57\34\36\1\37\31\36"+
    "\1\135\14\36\1\57\34\36\1\136\46\36\1\57\1\36"+
    "\1\137\32\36\1\37\22\36\1\140\14\36\1\141\6\36"+
    "\1\57\34\36\1\37\22\36\1\142\23\36\1\57\34\36"+
    "\1\37\32\36\1\143\13\36\1\57\34\36\1\37\23\36"+
    "\1\144\22\36\1\57\34\36\1\37\21\36\1\145\24\36"+
    "\1\57\34\36\1\37\36\36\1\146\1\147\6\36\1\57"+
    "\34\36\1\37\37\36\1\150\6\36\1\57\34\36\1\37"+
    "\32\36\1\151\11\36\1\152\1\36\1\57\34\36\1\37"+
    "\23\36\1\153\22\36\1\57\34\36\1\37\27\36\1\154"+
    "\16\36\1\57\34\36\1\37\41\36\1\155\4\36\1\57"+
    "\30\36\13\0\1\156\114\0\7\23\1\157\16\23\3\0"+
    "\22\23\31\0\26\23\3\0\1\160\21\23\31\0\26\23"+
    "\3\0\7\23\1\161\12\23\31\0\26\23\3\0\14\23"+
    "\1\162\5\23\31\0\26\23\3\0\11\23\1\163\10\23"+
    "\5\0\4\36\1\37\11\36\1\164\34\36\1\57\34\36"+
    "\1\37\23\36\1\165\22\36\1\57\34\36\1\37\37\36"+
    "\1\166\6\36\1\57\34\36\1\37\41\36\1\167\4\36"+
    "\1\57\34\36\1\37\34\36\1\170\11\36\1\57\34\36"+
    "\1\37\32\36\1\171\13\36\1\57\34\36\1\37\17\36"+
    "\1\172\26\36\1\57\34\36\1\37\40\36\1\173\5\36"+
    "\1\57\34\36\1\37\27\36\1\174\16\36\1\57\34\36"+
    "\1\37\40\36\1\175\5\36\1\57\34\36\1\37\27\36"+
    "\1\176\16\36\1\57\34\36\1\37\20\36\1\177\25\36"+
    "\1\57\34\36\1\37\42\36\1\200\3\36\1\57\34\36"+
    "\1\37\27\36\1\201\16\36\1\57\34\36\1\37\17\36"+
    "\1\202\26\36\1\57\34\36\1\37\37\36\1\203\6\36"+
    "\1\57\34\36\1\37\35\36\1\204\10\36\1\57\34\36"+
    "\1\37\17\36\1\205\26\36\1\57\34\36\1\37\40\36"+
    "\1\206\5\36\1\57\34\36\1\37\32\36\1\207\13\36"+
    "\1\57\34\36\1\37\42\36\1\210\3\36\1\57\34\36"+
    "\1\37\17\36\1\211\26\36\1\57\30\36\13\156\1\212"+
    "\70\156\24\0\1\213\25\23\3\0\22\23\31\0\26\23"+
    "\3\0\14\23\1\214\5\23\31\0\26\23\3\0\6\23"+
    "\1\215\13\23\31\0\26\23\3\0\6\23\1\216\13\23"+
    "\5\0\4\36\1\37\6\36\1\217\37\36\1\57\34\36"+
    "\1\37\25\36\1\220\20\36\1\57\34\36\1\37\23\36"+
    "\1\221\22\36\1\57\34\36\1\37\32\36\1\222\13\36"+
    "\1\57\34\36\1\37\37\36\1\223\6\36\1\57\34\36"+
    "\1\37\27\36\1\224\16\36\1\57\34\36\1\37\37\36"+
    "\1\225\6\36\1\57\34\36\1\37\36\36\1\226\7\36"+
    "\1\57\34\36\1\37\21\36\1\227\24\36\1\57\34\36"+
    "\1\37\27\36\1\230\16\36\1\57\34\36\1\37\24\36"+
    "\1\231\21\36\1\57\34\36\1\37\36\36\1\232\7\36"+
    "\1\57\34\36\1\37\17\36\1\233\14\36\1\234\11\36"+
    "\1\57\34\36\1\37\34\36\1\235\11\36\1\57\34\36"+
    "\1\37\32\36\1\236\13\36\1\57\34\36\1\37\43\36"+
    "\1\237\2\36\1\57\34\36\1\37\41\36\1\240\4\36"+
    "\1\57\34\36\1\241\46\36\1\57\34\36\1\37\34\36"+
    "\1\242\11\36\1\57\34\36\1\37\35\36\1\243\10\36"+
    "\1\57\34\36\1\37\27\36\1\244\16\36\1\57\34\36"+
    "\1\37\36\36\1\245\7\36\1\57\30\36\13\156\1\246"+
    "\70\156\24\0\26\23\3\0\1\247\21\23\31\0\26\23"+
    "\3\0\12\23\1\250\7\23\31\0\26\23\3\0\21\23"+
    "\1\251\31\0\26\23\3\0\12\23\1\252\7\23\5\0"+
    "\4\36\1\37\11\36\1\253\34\36\1\57\34\36\1\37"+
    "\17\36\1\254\26\36\1\57\34\36\1\255\46\36\1\57"+
    "\34\36\1\37\33\36\1\256\12\36\1\57\34\36\1\37"+
    "\46\36\1\57\1\36\1\257\32\36\1\37\33\36\1\260"+
    "\12\36\1\57\34\36\1\261\46\36\1\57\34\36\1\37"+
    "\27\36\1\262\16\36\1\57\34\36\1\37\23\36\1\263"+
    "\22\36\1\57\34\36\1\37\40\36\1\264\5\36\1\57"+
    "\34\36\1\37\27\36\1\265\16\36\1\57\34\36\1\37"+
    "\23\36\1\266\22\36\1\57\34\36\1\37\46\36\1\57"+
    "\1\36\1\267\32\36\1\37\46\36\1\57\1\36\1\270"+
    "\32\36\1\37\33\36\1\271\12\36\1\57\34\36\1\37"+
    "\23\36\1\272\22\36\1\57\34\36\1\37\34\36\1\273"+
    "\11\36\1\57\34\36\1\37\23\36\1\274\22\36\1\57"+
    "\34\36\1\37\46\36\1\57\1\36\1\275\32\36\1\37"+
    "\34\36\1\276\11\36\1\57\34\36\1\37\17\36\1\277"+
    "\26\36\1\57\34\36\1\37\27\36\1\300\16\36\1\57"+
    "\30\36\13\156\1\246\6\156\1\301\61\156\24\0\2\23"+
    "\1\302\23\23\3\0\22\23\31\0\26\23\3\0\7\23"+
    "\1\303\12\23\31\0\26\23\3\0\1\23\1\304\20\23"+
    "\31\0\26\23\3\0\11\23\1\305\10\23\5\0\4\36"+
    "\1\37\11\36\1\306\34\36\1\57\34\36\1\37\36\36"+
    "\1\307\7\36\1\57\34\36\1\37\17\36\1\310\26\36"+
    "\1\57\34\36\1\37\41\36\1\311\4\36\1\57\34\36"+
    "\1\37\17\36\1\312\26\36\1\57\34\36\1\37\42\36"+
    "\1\313\3\36\1\57\34\36\1\314\46\36\1\57\34\36"+
    "\1\37\41\36\1\315\4\36\1\57\34\36\1\37\21\36"+
    "\1\316\24\36\1\57\34\36\1\317\46\36\1\57\34\36"+
    "\1\37\40\36\1\320\5\36\1\57\34\36\1\37\35\36"+
    "\1\321\10\36\1\57\34\36\1\37\23\36\1\322\22\36"+
    "\1\57\34\36\1\37\40\36\1\323\5\36\1\57\34\36"+
    "\1\37\36\36\1\324\7\36\1\57\34\36\1\37\37\36"+
    "\1\325\6\36\1\57\34\36\1\37\42\36\1\326\3\36"+
    "\1\57\34\36\1\37\46\36\1\57\1\36\1\327\32\36"+
    "\1\330\46\36\1\57\34\36\1\37\34\36\1\331\11\36"+
    "\1\57\30\36\24\0\17\23\1\332\6\23\3\0\22\23"+
    "\31\0\26\23\3\0\6\23\1\333\13\23\31\0\26\23"+
    "\3\0\13\23\1\334\6\23\5\0\4\36\1\37\6\36"+
    "\1\335\37\36\1\57\34\36\1\37\46\36\1\57\1\36"+
    "\1\336\32\36\1\37\37\36\1\337\6\36\1\57\34\36"+
    "\1\37\37\36\1\340\6\36\1\57\34\36\1\37\36\36"+
    "\1\341\7\36\1\57\34\36\1\37\27\36\1\342\16\36"+
    "\1\57\34\36\1\37\21\36\1\343\24\36\1\57\34\36"+
    "\1\37\17\36\1\344\26\36\1\57\34\36\1\37\36\36"+
    "\1\345\7\36\1\57\34\36\1\37\17\36\1\346\26\36"+
    "\1\57\34\36\1\37\37\36\1\347\6\36\1\57\34\36"+
    "\1\37\36\36\1\350\7\36\1\57\34\36\1\37\22\36"+
    "\1\351\23\36\1\57\34\36\1\37\40\36\1\352\5\36"+
    "\1\57\34\36\1\37\27\36\1\353\16\36\1\57\34\36"+
    "\1\37\35\36\1\354\10\36\1\57\34\36\1\355\46\36"+
    "\1\57\1\36\1\356\26\36\24\0\4\23\1\357\21\23"+
    "\3\0\22\23\31\0\26\23\3\0\2\23\1\360\17\23"+
    "\31\0\26\23\3\0\1\361\21\23\5\0\4\36\1\37"+
    "\11\36\1\362\34\36\1\57\34\36\1\37\21\36\1\363"+
    "\24\36\1\57\34\36\1\364\46\36\1\57\34\36\1\37"+
    "\41\36\1\365\4\36\1\57\34\36\1\37\46\36\1\57"+
    "\1\36\1\366\32\36\1\37\17\36\1\367\26\36\1\57"+
    "\34\36\1\37\27\36\1\370\16\36\1\57\34\36\1\37"+
    "\36\36\1\371\7\36\1\57\34\36\1\37\27\36\1\372"+
    "\16\36\1\57\34\36\1\37\37\36\1\373\6\36\1\57"+
    "\34\36\1\374\46\36\1\57\34\36\1\37\34\36\1\375"+
    "\11\36\1\57\34\36\1\376\46\36\1\57\34\36\1\37"+
    "\17\36\1\377\26\36\1\57\34\36\1\37\37\36\1\u0100"+
    "\6\36\1\57\34\36\1\37\36\36\1\u0101\7\36\1\57"+
    "\34\36\1\37\17\36\1\u0102\1\36\1\u0103\11\36\1\u0104"+
    "\12\36\1\57\30\36\24\0\1\u0105\25\23\3\0\22\23"+
    "\31\0\26\23\3\0\6\23\1\u0106\13\23\31\0\26\23"+
    "\3\0\14\23\1\u0107\5\23\5\0\4\36\1\37\11\36"+
    "\1\u0108\34\36\1\57\34\36\1\37\34\36\1\u0109\11\36"+
    "\1\57\34\36\1\37\17\36\1\u010a\26\36\1\57\34\36"+
    "\1\37\21\36\1\u010b\16\36\1\u010c\1\u010d\4\36\1\57"+
    "\34\36\1\u010e\46\36\1\57\34\36\1\37\34\36\1\u010f"+
    "\11\36\1\57\34\36\1\37\46\36\1\57\1\36\1\u0110"+
    "\32\36\1\37\42\36\1\u0111\3\36\1\57\34\36\1\37"+
    "\37\36\1\u0112\6\36\1\57\34\36\1\37\37\36\1\u0113"+
    "\6\36\1\57\34\36\1\u0114\46\36\1\57\34\36\1\37"+
    "\27\36\1\u0115\16\36\1\57\34\36\1\37\23\36\1\u0116"+
    "\22\36\1\57\34\36\1\37\33\36\1\u0117\12\36\1\57"+
    "\34\36\1\37\36\36\1\u0118\7\36\1\57\34\36\1\37"+
    "\41\36\1\u0119\4\36\1\57\30\36\24\0\2\23\1\u011a"+
    "\23\23\3\0\22\23\31\0\26\23\3\0\15\23\1\u011b"+
    "\4\23\31\0\26\23\3\0\12\23\1\u011c\7\23\5\0"+
    "\4\36\1\u011d\46\36\1\57\34\36\1\37\32\36\1\u011e"+
    "\13\36\1\57\34\36\1\37\36\36\1\u011f\7\36\1\57"+
    "\34\36\1\37\34\36\1\u0120\11\36\1\57\34\36\1\37"+
    "\36\36\1\u0121\7\36\1\57\34\36\1\37\37\36\1\u0122"+
    "\6\36\1\57\34\36\1\37\33\36\1\u0123\12\36\1\57"+
    "\34\36\1\37\21\36\1\u0124\16\36\1\u0125\1\u0126\4\36"+
    "\1\57\34\36\1\37\27\36\1\u0127\16\36\1\57\34\36"+
    "\1\37\43\36\1\u0128\2\36\1\57\34\36\1\37\46\36"+
    "\1\57\1\36\1\u0129\32\36\1\37\20\36\1\u012a\25\36"+
    "\1\57\34\36\1\37\25\36\1\u012b\20\36\1\57\34\36"+
    "\1\37\40\36\1\u012c\5\36\1\57\34\36\1\37\23\36"+
    "\1\u012d\22\36\1\57\34\36\1\37\23\36\1\u012e\22\36"+
    "\1\57\30\36\24\0\10\23\1\u012f\15\23\3\0\22\23"+
    "\31\0\26\23\3\0\16\23\1\u0130\3\23\31\0\26\23"+
    "\3\0\7\23\1\u0131\12\23\5\0\4\36\1\37\35\36"+
    "\1\u0132\10\36\1\57\34\36\1\37\27\36\1\u0133\16\36"+
    "\1\57\34\36\1\37\32\36\1\u0134\13\36\1\57\34\36"+
    "\1\37\27\36\1\u0135\16\36\1\57\34\36\1\37\41\36"+
    "\1\u0136\4\36\1\57\34\36\1\u0137\46\36\1\57\34\36"+
    "\1\37\34\36\1\u0138\11\36\1\57\34\36\1\37\36\36"+
    "\1\u0139\7\36\1\57\34\36\1\37\37\36\1\u013a\6\36"+
    "\1\57\34\36\1\37\17\36\1\u013b\26\36\1\57\34\36"+
    "\1\37\34\36\1\u013c\11\36\1\57\34\36\1\37\21\36"+
    "\1\u013d\16\36\1\u013e\5\36\1\57\34\36\1\37\31\36"+
    "\1\u013f\14\36\1\57\34\36\1\37\41\36\1\u0140\4\36"+
    "\1\57\34\36\1\37\27\36\1\u0141\16\36\1\57\34\36"+
    "\1\37\17\36\1\u0142\26\36\1\57\34\36\1\37\42\36"+
    "\1\u0143\3\36\1\57\30\36\24\0\15\23\1\u0144\10\23"+
    "\3\0\22\23\31\0\26\23\3\0\3\23\1\u0145\16\23"+
    "\31\0\26\23\3\0\6\23\1\u0146\13\23\5\0\4\36"+
    "\1\37\34\36\1\u0147\11\36\1\57\34\36\1\37\34\36"+
    "\1\u0148\11\36\1\57\34\36\1\37\35\36\1\u0149\10\36"+
    "\1\57\34\36\1\37\42\36\1\u014a\3\36\1\57\34\36"+
    "\1\37\17\36\1\u014b\26\36\1\57\34\36\1\37\32\36"+
    "\1\u014c\13\36\1\57\34\36\1\37\27\36\1\u014d\16\36"+
    "\1\57\34\36\1\37\41\36\1\u014e\4\36\1\57\34\36"+
    "\1\u014f\46\36\1\57\34\36\1\37\36\36\1\u0150\7\36"+
    "\1\57\34\36\1\37\34\36\1\u0151\11\36\1\57\34\36"+
    "\1\37\36\36\1\u0152\7\36\1\57\34\36\1\37\23\36"+
    "\1\u0153\22\36\1\57\34\36\1\37\33\36\1\u0154\12\36"+
    "\1\57\34\36\1\37\25\36\1\u0155\20\36\1\57\34\36"+
    "\1\37\21\36\1\u0156\24\36\1\57\34\36\1\37\34\36"+
    "\1\u0157\11\36\1\57\30\36\24\0\14\23\1\u0158\11\23"+
    "\3\0\22\23\31\0\26\23\3\0\1\u0159\3\23\1\u015a"+
    "\15\23\31\0\26\23\3\0\2\23\1\u015b\17\23\5\0"+
    "\4\36\1\37\33\36\1\u015c\12\36\1\57\34\36\1\u015d"+
    "\46\36\1\57\34\36\1\37\34\36\1\u015e\11\36\1\57"+
    "\34\36\1\37\27\36\1\u015f\16\36\1\57\34\36\1\37"+
    "\36\36\1\u0160\7\36\1\57\34\36\1\37\35\36\1\u0161"+
    "\10\36\1\57\34\36\1\37\42\36\1\u0162\3\36\1\57"+
    "\34\36\1\37\17\36\1\u0163\26\36\1\57\34\36\1\37"+
    "\22\36\1\u0164\23\36\1\57\34\36\1\37\32\36\1\u0165"+
    "\13\36\1\57\34\36\1\37\27\36\1\u0166\16\36\1\57"+
    "\34\36\1\u0167\46\36\1\57\34\36\1\37\40\36\1\u0168"+
    "\5\36\1\57\34\36\1\37\41\36\1\u0169\4\36\1\57"+
    "\34\36\1\37\27\36\1\u016a\16\36\1\57\34\36\1\u016b"+
    "\46\36\1\57\30\36\24\0\26\23\3\0\22\23\3\0"+
    "\1\u016c\25\0\26\23\3\0\13\23\1\u016d\6\23\31\0"+
    "\26\23\3\0\14\23\1\u016e\5\23\31\0\26\23\3\0"+
    "\6\23\1\u016f\13\23\5\0\4\36\1\37\23\36\1\u0170"+
    "\22\36\1\57\34\36\1\37\33\36\1\u0171\12\36\1\57"+
    "\34\36\1\37\17\36\1\u0172\26\36\1\57\34\36\1\37"+
    "\27\36\1\u0173\16\36\1\57\34\36\1\37\34\36\1\u0174"+
    "\11\36\1\57\34\36\1\37\27\36\1\u0175\16\36\1\57"+
    "\34\36\1\37\36\36\1\u0176\7\36\1\57\34\36\1\u0177"+
    "\46\36\1\57\34\36\1\37\35\36\1\u0178\10\36\1\57"+
    "\34\36\1\37\42\36\1\u0179\3\36\1\57\34\36\1\37"+
    "\17\36\1\u017a\26\36\1\57\34\36\1\37\34\36\1\u017b"+
    "\11\36\1\57\34\36\1\37\34\36\1\u017c\11\36\1\57"+
    "\30\36\24\0\26\23\3\0\4\23\1\u017d\15\23\31\0"+
    "\26\23\3\0\1\u017e\21\23\31\0\26\23\3\0\15\23"+
    "\1\u017f\4\23\5\0\4\36\1\37\33\36\1\u0180\12\36"+
    "\1\57\34\36\1\37\23\36\1\u0181\22\36\1\57\34\36"+
    "\1\u0182\46\36\1\57\34\36\1\37\34\36\1\u0183\11\36"+
    "\1\57\34\36\1\37\33\36\1\u0184\12\36\1\57\34\36"+
    "\1\37\17\36\1\u0185\26\36\1\57\34\36\1\37\27\36"+
    "\1\u0186\16\36\1\57\34\36\1\37\34\36\1\u0187\11\36"+
    "\1\57\34\36\1\37\27\36\1\u0188\16\36\1\57\34\36"+
    "\1\u0189\46\36\1\57\34\36\1\u018a\46\36\1\57\34\36"+
    "\1\37\33\36\1\u018b\12\36\1\57\30\36\24\0\26\23"+
    "\3\0\1\23\1\u018c\20\23\31\0\26\23\3\0\13\23"+
    "\1\u018d\6\23\31\0\26\23\3\0\16\23\1\u018e\3\23"+
    "\5\0\4\36\1\37\40\36\1\u018f\5\36\1\57\34\36"+
    "\1\37\33\36\1\u0190\12\36\1\57\34\36\1\u0191\46\36"+
    "\1\57\34\36\1\37\23\36\1\u0192\22\36\1\57\34\36"+
    "\1\u0193\46\36\1\57\34\36\1\37\34\36\1\u0194\11\36"+
    "\1\57\34\36\1\37\33\36\1\u0195\12\36\1\57\34\36"+
    "\1\37\17\36\1\u0196\26\36\1\57\34\36\1\u0197\46\36"+
    "\1\57\30\36\24\0\26\23\3\0\7\23\1\u0198\12\23"+
    "\31\0\26\23\3\0\4\23\1\u0199\15\23\31\0\26\23"+
    "\3\0\3\23\1\u019a\16\23\5\0\4\36\1\37\23\36"+
    "\1\u019b\22\36\1\57\34\36\1\37\40\36\1\u019c\5\36"+
    "\1\57\34\36\1\37\33\36\1\u019d\12\36\1\57\34\36"+
    "\1\u019e\46\36\1\57\34\36\1\37\23\36\1\u019f\22\36"+
    "\1\57\34\36\1\u01a0\46\36\1\57\30\36\24\0\26\23"+
    "\3\0\6\23\1\u01a1\13\23\31\0\26\23\3\0\1\23"+
    "\1\u01a2\20\23\31\0\26\23\3\0\4\23\1\u01a3\15\23"+
    "\5\0\4\36\1\u01a4\46\36\1\57\34\36\1\37\23\36"+
    "\1\u01a5\22\36\1\57\34\36\1\37\40\36\1\u01a6\5\36"+
    "\1\57\34\36\1\37\33\36\1\u01a7\12\36\1\57\30\36"+
    "\24\0\26\23\3\0\21\23\1\u01a8\31\0\26\23\3\0"+
    "\7\23\1\u01a9\12\23\31\0\26\23\3\0\14\23\1\u01aa"+
    "\5\23\5\0\4\36\1\u01ab\46\36\1\57\34\36\1\37"+
    "\23\36\1\u01ac\22\36\1\57\34\36\1\37\40\36\1\u01ad"+
    "\5\36\1\57\30\36\24\0\26\23\3\0\1\23\1\u01ae"+
    "\20\23\31\0\26\23\3\0\6\23\1\u01af\13\23\5\0"+
    "\4\36\1\u01b0\46\36\1\57\34\36\1\37\23\36\1\u01b1"+
    "\22\36\1\57\30\36\24\0\26\23\3\0\3\23\1\u01b2"+
    "\16\23\31\0\26\23\3\0\21\23\1\u01b3\5\0\4\36"+
    "\1\u01b4\46\36\1\57\30\36\24\0\26\23\3\0\1\23"+
    "\1\u01b5\20\23\31\0\26\23\3\0\1\23\1\u01b6\20\23"+
    "\31\0\26\23\3\0\3\23\1\u01b7\16\23\31\0\26\23"+
    "\3\0\1\23\1\u01b8\20\23\5\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[25840];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\7\11\1\1\1\11\1\1\2\11"+
    "\3\1\2\11\4\1\3\11\1\0\1\11\21\0\1\1"+
    "\2\11\6\1\1\11\24\0\1\1\1\0\6\1\7\0"+
    "\1\11\20\0\5\1\27\0\4\1\22\0\1\11\5\0"+
    "\4\1\2\0\1\11\3\0\1\11\17\0\1\11\4\1"+
    "\6\0\1\11\2\0\1\11\10\0\1\11\1\0\3\1"+
    "\20\0\1\11\1\0\3\1\2\0\1\11\7\0\1\11"+
    "\1\0\1\11\6\0\3\1\6\0\1\11\5\0\1\11"+
    "\5\0\3\1\1\11\21\0\3\1\5\0\1\11\14\0"+
    "\3\1\10\0\1\11\10\0\4\1\1\0\1\11\11\0"+
    "\1\11\3\0\2\11\3\1\7\0\1\11\5\0\3\1"+
    "\2\0\1\11\6\0\2\11\1\0\3\1\2\0\1\11"+
    "\1\0\1\11\3\0\1\11\3\1\3\0\1\11\1\0"+
    "\1\11\3\1\1\11\3\0\3\1\1\11\2\0\2\1"+
    "\1\11\1\0\2\1\1\11\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[440];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    /*START-CODE*/
    private ArrayList<ReportErrorInterpreter> listError = new ArrayList();
  
    private void print(String token) {
        //System.out.println(token+" < " + yytext() + " > <Linea\"" + (yyline + 1) + "\">" + "<Columna\"" + (yycolumn+1) + "\">");
    }

    private void addError(){
        print("error");
        TypeIntreprete type = TypeIntreprete.LEXICON;
        Token toke = new Token(yyline + 1, yycolumn + 1, yytext());
        this.listError.add(new ReportErrorInterpreter(type, toke, ReportingConstants.ERROR_LEXEMA));
    }
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    /*FINAL-CODE*/


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexemaByMyParesUser(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {   return new java_cup.runtime.Symbol(MySymUser.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { //MANEJAR EL ERROR LEXICO
                        print("ERROR");
                        addError();
            }
          // fall through
          case 67: break;
          case 2:
            { /* print(); */
            }
          // fall through
          case 68: break;
          case 3:
            { print("("); return new Symbol(MySymUser.PARENTESIS_A,yyline,yycolumn,yytext());
            }
          // fall through
          case 69: break;
          case 4:
            { print(")"); return new Symbol(MySymUser.PARENTESIS_C,yyline,yycolumn,yytext());
            }
          // fall through
          case 70: break;
          case 5:
            { print("*"); return new Symbol(MySymUser.MULTIPLICAR,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 71: break;
          case 6:
            { print("+"); return new Symbol(MySymUser.SUMAR,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 72: break;
          case 7:
            { print(","); return new Symbol(MySymUser.COMA,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 73: break;
          case 8:
            { print("-"); return new Symbol(MySymUser.RESTAR,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 74: break;
          case 9:
            { print("/"); return new Symbol(MySymUser.DIVIDIR,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 75: break;
          case 10:
            { print("REAL_NUMEBERS"); return new Symbol(MySymUser.REAL_NUMEBERS ,yyline,yycolumn,yytext());
            }
          // fall through
          case 76: break;
          case 11:
            { print(":"); return new Symbol(MySymUser.COLNO,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 77: break;
          case 12:
            { print("<" ); return new Symbol(MySymUser.OPEN ,yyline,yycolumn,yytext());
            }
          // fall through
          case 78: break;
          case 13:
            { print("="); return new Symbol(MySymUser.EQUAL,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 79: break;
          case 14:
            { print(">" ); return new Symbol(MySymUser.CLOSE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 80: break;
          case 15:
            { String lowercaseText = yytext().toLowerCase();
                                     switch(lowercaseText) {
                                         case "xson":
                                            print("xson"); 
                                            return new Symbol(MySymUser.XSON ,yyline,yycolumn,yytext());
                                         case "version":
                                            print("version"); 
                                            return new Symbol(MySymUser.VERSION ,yyline,yycolumn,yytext());
                                        case "realizar_solicitud":
                                            print("realizar_solicitud"); 
                                            return new Symbol(MySymUser.MAKE_REQUEST ,yyline,yycolumn,yytext());
                                        case "fin_solicitud_realizada":
                                            print("fin_solicitud_realizada"); 
                                            return new Symbol(MySymUser.FINAL_REQUEST ,yyline,yycolumn,yytext());
                                        default:
                                            print("ERROR");
                                            addError();
                                            break;
                                     }
            }
          // fall through
          case 81: break;
          case 16:
            { print("["); return new Symbol(MySymUser.BRACKETS_O ,yyline,yycolumn,yytext());
            }
          // fall through
          case 82: break;
          case 17:
            { print("]"); return new Symbol(MySymUser.BRACKETS_C ,yyline,yycolumn,yytext());
            }
          // fall through
          case 83: break;
          case 18:
            { print("{"); return new Symbol(MySymUser.KEYS_O ,yyline,yycolumn,yytext());
            }
          // fall through
          case 84: break;
          case 19:
            { print("}"); return new Symbol(MySymUser.KEYS_C ,yyline,yycolumn,yytext());
            }
          // fall through
          case 85: break;
          case 20:
            { print("!>" ); return new Symbol(MySymUser.CLOSE_REQUEST ,yyline,yycolumn,yytext());
            }
          // fall through
          case 86: break;
          case 21:
            { print("STRING"); return new Symbol(MySymUser.STRING ,yyline,yycolumn,yytext());
            }
          // fall through
          case 87: break;
          case 22:
            { print("<!" ); return new Symbol(MySymUser.OPEN_REQUEST ,yyline,yycolumn,yytext());
            }
          // fall through
          case 88: break;
          case 23:
            { print("<?" ); return new Symbol(MySymUser.OPEN_VERSION ,yyline,yycolumn,yytext());
            }
          // fall through
          case 89: break;
          case 24:
            { print("?>" ); return new Symbol(MySymUser.CLOSE_VERSION ,yyline,yycolumn,yytext());
            }
          // fall through
          case 90: break;
          case 25:
            { print("ID_TRIVIA_SPECIAL"); return new Symbol(MySymUser.ID_TRIVIA_SPECIAL,yyline,yycolumn,yytext().replaceAll("\"",""));
            }
          // fall through
          case 91: break;
          case 26:
            { print("xml"); return new Symbol(MySymUser.XML ,yyline,yycolumn,yytext());
            }
          // fall through
          case 92: break;
          case 27:
            { print("\"ID\""); return new Symbol(MySymUser.ID ,yyline,yycolumn,yytext());
            }
          // fall through
          case 93: break;
          case 28:
            { print("xson"); return new Symbol(MySymUser.XSON ,yyline,yycolumn,yytext());
            }
          // fall through
          case 94: break;
          case 29:
            { print("\"TEMA\""); return new Symbol(MySymUser.TEMA ,yyline,yycolumn,yytext());
            }
          // fall through
          case 95: break;
          case 30:
            { print("\"CLASE\""); return new Symbol(MySymUser.CLASE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 96: break;
          case 31:
            { print("\"FILAS\""); return new Symbol(MySymUser.FILAS ,yyline,yycolumn,yytext());
            }
          // fall through
          case 97: break;
          case 32:
            { /*COMENTARIO*/
            }
          // fall through
          case 98: break;
          case 33:
            { print("version"); return new Symbol(MySymUser.VERSION ,yyline,yycolumn,yytext());
            }
          // fall through
          case 99: break;
          case 34:
            { print("\"INDICE\""); return new Symbol(MySymUser.INDICE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 100: break;
          case 35:
            { print("\"NOMBRE\""); return new Symbol(MySymUser.NAME_PERSONAL_USER ,yyline,yycolumn,yytext());
            }
          // fall through
          case 101: break;
          case 36:
            { print("\"TRIVIA\""); return new Symbol(MySymUser.TRIVIA ,yyline,yycolumn,yytext());
            }
          // fall through
          case 102: break;
          case 37:
            { print("\"USUARIO\""); return new Symbol(MySymUser.NAME_USER ,yyline,yycolumn,yytext());
            }
          // fall through
          case 103: break;
          case 38:
            { print("\"COLUMNAS\""); return new Symbol(MySymUser.COLUMNAS ,yyline,yycolumn,yytext());
            }
          // fall through
          case 104: break;
          case 39:
            { print("\"OPCIONES\""); return new Symbol(MySymUser.OPCIONES ,yyline,yycolumn,yytext());
            }
          // fall through
          case 105: break;
          case 40:
            { print("\"PASSWORD\""); return new Symbol(MySymUser.PASS_USER ,yyline,yycolumn,yytext());
            }
          // fall through
          case 106: break;
          case 41:
            { print("\"ID_TRIVIA\""); return new Symbol(MySymUser.ID_TRIVIA ,yyline,yycolumn,yytext());
            }
          // fall through
          case 107: break;
          case 42:
            { print("\"RESPUESTA\""); return new Symbol(MySymUser.RESPUESTA ,yyline,yycolumn,yytext());
            }
          // fall through
          case 108: break;
          case 43:
            { print("DATE"); return new Symbol(MySymUser.STRING_DATE,yyline,yycolumn,yytext());
            }
          // fall through
          case 109: break;
          case 44:
            { print("INSTITUCION"); return new Symbol(MySymUser.INSTITUCION ,yyline,yycolumn,yytext());
            }
          // fall through
          case 110: break;
          case 45:
            { print("\"NUEVA_TRIVIA\""); return new Symbol(MySymUser.NEW_TRIVIA ,yyline,yycolumn,yytext());
            }
          // fall through
          case 111: break;
          case 46:
            { print("\"DATOS_USUARIO\""); return new Symbol(MySymUser.USER_DATA ,yyline,yycolumn,yytext());
            }
          // fall through
          case 112: break;
          case 47:
            { print("\"TEXTO_VISIBLE\""); return new Symbol(MySymUser.TEXTO_VISIBLE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 113: break;
          case 48:
            { print("\"USUARIO_NUEVO\""); return new Symbol(MySymUser.NEW_USER ,yyline,yycolumn,yytext());
            }
          // fall through
          case 114: break;
          case 49:
            { print("FECHA_CREACION"); return new Symbol(MySymUser.DATE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 115: break;
          case 50:
            { print("\"NUEVO_PASSWORD\""); return new Symbol(MySymUser.NUEVO_PASSWORD ,yyline,yycolumn,yytext());
            }
          // fall through
          case 116: break;
          case 51:
            { print("\"ELIMINAR_TRIVIA\""); return new Symbol(MySymUser.ELIMINAR_TRIVIA ,yyline,yycolumn,yytext());
            }
          // fall through
          case 117: break;
          case 52:
            { print("\"TIEMPO_PREGUNTA\""); return new Symbol(MySymUser.TIEMPO_PREGUNTA ,yyline,yycolumn,yytext());
            }
          // fall through
          case 118: break;
          case 53:
            { print("\"USUARIO_ANTIGUO\""); return new Symbol(MySymUser.USUARIO_ANTIGUO ,yyline,yycolumn,yytext());
            }
          // fall through
          case 119: break;
          case 54:
            { print("\"ELIMINAR_USUARIO\""); return new Symbol(MySymUser.ELIMINAR_USUARIO  ,yyline,yycolumn,yytext());
            }
          // fall through
          case 120: break;
          case 55:
            { print("\"MODIFICAR_TRIVIA\""); return new Symbol(MySymUser.MODIFICAR_TRIVIA ,yyline,yycolumn,yytext());
            }
          // fall through
          case 121: break;
          case 56:
            { print("\"USUARIO_CREACION\""); return new Symbol(MySymUser.USUARIO_CREACION ,yyline,yycolumn,yytext());
            }
          // fall through
          case 122: break;
          case 57:
            { print("realizar_solicitud"); return new Symbol(MySymUser.MAKE_REQUEST ,yyline,yycolumn,yytext());
            }
          // fall through
          case 123: break;
          case 58:
            { print("\"MODIFICAR_USUARIO\""); return new Symbol(MySymUser.MODIFICAR_USUARIO  ,yyline,yycolumn,yytext());
            }
          // fall through
          case 124: break;
          case 59:
            { print("\"PARAMETROS_TRIVIA\""); return new Symbol(MySymUser.PARAMETROS_TRIVIA ,yyline,yycolumn,yytext());
            }
          // fall through
          case 125: break;
          case 60:
            { print("\"AGREGAR_COMPONENTE\""); return new Symbol(MySymUser.AGREGAR_COMPONENTE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 126: break;
          case 61:
            { print("realizar_solicitudes"); return new Symbol(MySymUser.MAKE_REQUESTS ,yyline,yycolumn,yytext());
            }
          // fall through
          case 127: break;
          case 62:
            { print("\"ELIMINAR_COMPONENTE\""); return new Symbol(MySymUser.ELIMINAR_COMPONENTE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 128: break;
          case 63:
            { print("\"MODIFICAR_COMPONENTE\""); return new Symbol(MySymUser.MODIFICAR_COMPONENTE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 129: break;
          case 64:
            { print("\"PARAMETROS_COMPONENTE\""); return new Symbol(MySymUser.PARAMETROS_COMPONENTE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 130: break;
          case 65:
            { print("fin_solicitud_realizada"); return new Symbol(MySymUser.FINAL_REQUEST ,yyline,yycolumn,yytext());
            }
          // fall through
          case 131: break;
          case 66:
            { print("fin_solicitudes_realizada"); return new Symbol(MySymUser.FINAL_REQUESTS ,yyline,yycolumn,yytext());
            }
          // fall through
          case 132: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
