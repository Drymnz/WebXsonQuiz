
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package LexicalAndSyntacticAnalyzer.jflexandcup;

import java_cup.runtime.*;
import java.util.ArrayList;
import LexicalAndSyntacticAnalyzer.analyzer.Token;
import reports.*;
import LexicalAndSyntacticAnalyzer.dataAnalyzer.*;
import LexicalAndSyntacticAnalyzer.dataAnalyzer.RequestAnalyzer;
import LexicalAndSyntacticAnalyzer.ListRequests;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MyParserLoginUser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return MySymLoginUser.class;
}

  /** Default constructor. */
  @Deprecated
  public MyParserLoginUser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MyParserLoginUser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MyParserLoginUser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\051\000\002\002\004\000\002\007\003\000\002\007" +
    "\004\000\002\006\004\000\002\006\003\000\002\005\010" +
    "\000\002\005\007\000\002\010\005\000\002\010\005\000" +
    "\002\012\005\000\002\011\005\000\002\011\003\000\002" +
    "\011\002\000\002\014\004\000\002\014\003\000\002\014" +
    "\002\000\002\013\010\000\002\017\005\000\002\017\003" +
    "\000\002\016\004\000\002\016\004\000\002\016\004\000" +
    "\002\016\004\000\002\016\004\000\002\016\003\000\002" +
    "\016\002\000\002\015\004\000\002\015\004\000\002\015" +
    "\004\000\002\015\003\000\002\015\002\000\002\002\003" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\003\000\002" +
    "\003\006\000\002\004\003\000\002\004\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\116\000\010\003\004\005\006\031\011\001\002\000" +
    "\006\005\006\031\011\001\002\000\010\002\ufffd\005\ufffd" +
    "\031\ufffd\001\002\000\004\007\113\001\002\000\010\002" +
    "\000\005\006\031\011\001\002\000\004\002\111\001\002" +
    "\000\004\034\012\001\002\000\004\011\013\001\002\000" +
    "\006\036\016\037\014\001\002\000\004\012\107\001\002" +
    "\000\004\013\104\001\002\000\004\012\017\001\002\000" +
    "\010\003\020\013\ufff5\027\022\001\002\000\004\013\ufff6" +
    "\001\002\000\004\013\ufffa\001\002\000\010\003\025\030" +
    "\ufff2\040\024\001\002\000\004\030\102\001\002\000\004" +
    "\011\027\001\002\000\004\030\ufff3\001\002\000\004\030" +
    "\ufff4\001\002\000\004\025\030\001\002\000\004\027\031" +
    "\001\002\000\022\003\034\030\uffe8\035\uffe8\041\041\042" +
    "\032\043\040\044\037\045\036\001\002\000\012\003\042" +
    "\011\043\030\uffe3\035\uffe3\001\002\000\006\030\076\035" +
    "\075\001\002\000\006\030\uffe9\035\uffe9\001\002\000\006" +
    "\030\uffef\035\uffef\001\002\000\012\003\042\011\043\030" +
    "\uffe3\035\uffe3\001\002\000\012\003\042\011\043\030\uffe3" +
    "\035\uffe3\001\002\000\012\003\042\011\043\030\uffe3\035" +
    "\uffe3\001\002\000\012\003\042\011\043\030\uffe3\035\uffe3" +
    "\001\002\000\006\030\uffe4\035\uffe4\001\002\000\012\014" +
    "\046\021\051\022\045\023\050\001\002\000\006\030\uffee" +
    "\035\uffee\001\002\000\006\030\uffe5\035\uffe5\001\002\000" +
    "\006\030\uffe7\035\uffe7\001\002\000\006\030\uffe6\035\uffe6" +
    "\001\002\000\006\021\051\023\050\001\002\000\022\015" +
    "\uffdc\016\uffdc\017\uffdc\020\uffdc\023\063\024\uffdc\030\uffdc" +
    "\035\uffdc\001\002\000\016\015\055\016\056\017\053\020" +
    "\054\030\uffe2\035\uffe2\001\002\000\006\021\051\023\050" +
    "\001\002\000\006\021\051\023\050\001\002\000\006\021" +
    "\051\023\050\001\002\000\006\021\051\023\050\001\002" +
    "\000\020\015\uffe0\016\uffe0\017\053\020\054\024\uffe0\030" +
    "\uffe0\035\uffe0\001\002\000\020\015\uffe1\016\uffe1\017\053" +
    "\020\054\024\uffe1\030\uffe1\035\uffe1\001\002\000\020\015" +
    "\uffde\016\uffde\017\uffde\020\uffde\024\uffde\030\uffde\035\uffde" +
    "\001\002\000\020\015\uffdf\016\uffdf\017\uffdf\020\uffdf\024" +
    "\uffdf\030\uffdf\035\uffdf\001\002\000\006\021\051\023\050" +
    "\001\002\000\014\015\055\016\056\017\053\020\054\024" +
    "\065\001\002\000\020\015\uffdb\016\uffdb\017\uffdb\020\uffdb" +
    "\024\uffdb\030\uffdb\035\uffdb\001\002\000\014\015\055\016" +
    "\056\017\053\020\054\024\067\001\002\000\024\015\uffda" +
    "\016\uffda\017\uffda\020\uffda\021\051\023\050\024\uffda\030" +
    "\uffda\035\uffda\001\002\000\020\015\uffdd\016\uffdd\017\uffdd" +
    "\020\uffdd\024\uffdd\030\uffdd\035\uffdd\001\002\000\020\015" +
    "\uffd9\016\uffd9\017\uffd9\020\uffd9\024\uffd9\030\uffd9\035\uffd9" +
    "\001\002\000\006\030\uffec\035\uffec\001\002\000\006\030" +
    "\uffeb\035\uffeb\001\002\000\006\030\uffea\035\uffea\001\002" +
    "\000\022\003\034\030\uffe8\035\uffe8\041\041\042\032\043" +
    "\040\044\037\045\036\001\002\000\004\026\077\001\002" +
    "\000\004\030\ufff1\001\002\000\006\030\ufff0\035\ufff0\001" +
    "\002\000\006\030\uffed\035\uffed\001\002\000\004\013\ufff7" +
    "\001\002\000\010\002\ufffb\005\ufffb\031\ufffb\001\002\000" +
    "\004\032\105\001\002\000\004\033\106\001\002\000\010" +
    "\002\ufff8\005\ufff8\031\ufff8\001\002\000\010\003\020\013" +
    "\ufff5\027\022\001\002\000\004\013\ufff9\001\002\000\004" +
    "\002\001\001\002\000\010\002\ufffe\005\ufffe\031\ufffe\001" +
    "\002\000\004\010\114\001\002\000\004\004\115\001\002" +
    "\000\004\014\116\001\002\000\004\006\117\001\002\000" +
    "\010\002\ufffc\005\ufffc\031\ufffc\001\002\000\010\002\uffff" +
    "\005\006\031\011\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\116\000\010\005\004\006\006\007\007\001\001\000" +
    "\006\005\004\006\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\014\001\001" +
    "\000\002\001\001\000\004\012\102\001\001\000\002\001" +
    "\001\000\004\011\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\022\001\001\000\002\001\001\000" +
    "\004\013\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\034\017" +
    "\032\001\001\000\004\015\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\073\001" +
    "\001\000\004\015\072\001\001\000\004\015\071\001\001" +
    "\000\004\015\043\001\001\000\002\001\001\000\006\002" +
    "\046\003\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\061" +
    "\001\001\000\004\003\060\001\001\000\004\003\057\001" +
    "\001\000\004\003\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\067\001\001\000\004\003\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\111\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MyParserLoginUser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MyParserLoginUser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MyParserLoginUser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




private ArrayList<ReportErrorInterpreter> listError = new ArrayList();
private ArrayList<DataAnalyzer> dataStack = new ArrayList();
private ArrayList<RequestAnalyzer> listRquest = new ArrayList();


	  public MyParserLoginUser(LexemaUser lexer) {
        super(lexer);
    }

    //erorr
    public void syntax_error(Symbol cur_token) {
        String nameTerminal = symbl_name_from_id(this.cur_token.sym);
        int numberTerminal = this.cur_token.sym;
        ///codigo para el objeto
        TypeIntreprete type = TypeIntreprete.SYNTACTIC;
        Token token = getMyToken();
        System.out.println(token.toString());
        this.listError.add(new ReportErrorInterpreter(type, token, ReportingConstants.ERROR_SICTATICO));
    }

    // get current token 
    private Token getMyToken(){
      int line = cur_token.left+1;
      int columna = cur_token.right +1;
      String lexema = this.cur_token.value.toString();
      return new Token(line, columna, lexema);
    }

    //Returnar el listado de errores
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    //Returnar el listado de Rquest
    public ArrayList<RequestAnalyzer> getListRquest(){
      return this.listRquest;
    }

    /**
     * ***END CODE*******
     */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MyParserLoginUser$actions {
  private final MyParserLoginUser parser;

  /** Constructor */
  CUP$MyParserLoginUser$actions(MyParserLoginUser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MyParserLoginUser$do_action_part00000000(
    int                        CUP$MyParserLoginUser$act_num,
    java_cup.runtime.lr_parser CUP$MyParserLoginUser$parser,
    java.util.Stack            CUP$MyParserLoginUser$stack,
    int                        CUP$MyParserLoginUser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MyParserLoginUser$result;

      /* select the action based on the action number */
      switch (CUP$MyParserLoginUser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-1)).value;
		RESULT = start_val;
              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MyParserLoginUser$parser.done_parsing();
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= bucle_inicio 
            {
              Object RESULT =null;

              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("inicio",5, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error bucle_inicio 
            {
              Object RESULT =null;

              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("inicio",5, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bucle_inicio ::= bucle_inicio inicio_xson 
            {
              Object RESULT =null;

              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("bucle_inicio",4, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bucle_inicio ::= inicio_xson 
            {
              Object RESULT =null;

              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("bucle_inicio",4, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inicio_xson ::= OPEN_VERSION XSON VERSION EQUAL STRING CLOSE_VERSION 
            {
              Object RESULT =null;

              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("inicio_xson",3, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicio_xson ::= OPEN_REQUEST MAKE_REQUEST COLNO solicitud cerrar_solicitud 
            {
              Object RESULT =null;

              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("inicio_xson",3, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-4)), ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // solicitud ::= NEW_USER CLOSE json 
            {
              Object RESULT =null;
		
    listRquest.add(new RequestAnalyzer(dataStack, ListRequests.NEW_USER));
    dataStack = new ArrayList();
  
              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("solicitud",6, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // solicitud ::= LOGIN_USER CLOSE json 
            {
              Object RESULT =null;
		
    listRquest.add(new RequestAnalyzer(dataStack, ListRequests.LOGIN_USER));
    dataStack = new ArrayList();
  
              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("solicitud",6, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cerrar_solicitud ::= OPEN FINAL_REQUEST CLOSE_REQUEST 
            {
              Object RESULT =null;

              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("cerrar_solicitud",8, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // json ::= KEYS_O obj_json KEYS_C 
            {
              Object RESULT =null;

              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("json",7, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // json ::= error 
            {
              Object RESULT =null;

              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("json",7, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // json ::= 
            {
              Object RESULT =null;

              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("json",7, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // obj_json ::= USER_DATA solicitud_usuario 
            {
              Object RESULT =null;

              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("obj_json",10, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // obj_json ::= error 
            {
              Object RESULT =null;

              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("obj_json",10, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // obj_json ::= 
            {
              Object RESULT =null;

              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("obj_json",10, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // solicitud_usuario ::= COLNO BRACKETS_O KEYS_O datas_user KEYS_C BRACKETS_C 
            {
              Object RESULT =null;

              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("solicitud_usuario",9, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // datas_user ::= datas_user COMA data_user 
            {
              Object RESULT =null;

              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("datas_user",13, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // datas_user ::= data_user 
            {
              Object RESULT =null;

              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("datas_user",13, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // data_user ::= NAME_USER data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserLoginUser$stack.peek()).value;
		if(a!=null)dataStack.add(new DataAnalyzer(getMyToken(),ListTypeData.USUARIO,a.toString()));
              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("data_user",12, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // data_user ::= PASS_USER data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserLoginUser$stack.peek()).value;
		if(a!=null)dataStack.add(new DataAnalyzer(getMyToken(),ListTypeData.PASSWORD,a.toString()));
              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("data_user",12, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // data_user ::= NAME_PERSONAL_USER data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserLoginUser$stack.peek()).value;
		if(a!=null)dataStack.add(new DataAnalyzer(getMyToken(),ListTypeData.NAME,a.toString()));
              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("data_user",12, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // data_user ::= INSTITUCION data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserLoginUser$stack.peek()).value;
		if(a!=null)dataStack.add(new DataAnalyzer(getMyToken(),ListTypeData.INSTITUTION,a.toString()));
              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("data_user",12, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // data_user ::= DATE data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserLoginUser$stack.peek()).value;
		if(a!=null)dataStack.add(new DataAnalyzer(getMyToken(),ListTypeData.DATE,a.toString()));
              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("data_user",12, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // data_user ::= error 
            {
              Object RESULT =null;

              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("data_user",12, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // data_user ::= 
            {
              Object RESULT =null;

              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("data_user",12, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // data ::= COLNO STRING 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$MyParserLoginUser$stack.peek()).value;
		RESULT = a;
              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("data",11, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // data ::= COLNO inico_opereacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserLoginUser$stack.peek()).value;
		RESULT = a;
              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("data",11, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // data ::= COLNO STRING_DATE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$MyParserLoginUser$stack.peek()).value;
		RESULT = a;
              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("data",11, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // data ::= error 
            {
              Object RESULT =null;

              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("data",11, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // data ::= 
            {
              Object RESULT =null;

              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("data",11, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // inico_opereacion ::= operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserLoginUser$stack.peek()).value;
		
    //////////////////////////////////////////
		Double aDouble = 0.0;
    if (a!=null) {
        aDouble =   Double.valueOf(a.toString());
        RESULT = aDouble;
    }else{
      RESULT = aDouble;
    }
    //////////////////////////////////////////
    
              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("inico_opereacion",0, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operacion ::= operacion SUMAR operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParserLoginUser$stack.peek()).value;
		
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double resultDouble = aDouble + bDouble;
      RESULT = resultDouble;
    }else{
      RESULT = aDouble;
    }
    /////////////////////////////////////////////
    
              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("operacion",1, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operacion ::= operacion RESTAR operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParserLoginUser$stack.peek()).value;
		
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double resultDouble = aDouble - bDouble;
      RESULT = resultDouble;
    }else{
      RESULT = aDouble;
    }
    /////////////////////////////////////////////

    
              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("operacion",1, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operacion ::= operacion DIVIDIR operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParserLoginUser$stack.peek()).value;
		
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      if (bDouble>0) {
        Double result = ( bDouble/ bDouble);
        RESULT = result;
      }else{
        /// manejar un error de sintasis
        RESULT = aDouble;// si es 15/0
      }
    }else{
      RESULT = aDouble;
    }
    /////////////////////////////////////////////

    
              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("operacion",1, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operacion ::= operacion MULTIPLICAR operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParserLoginUser$stack.peek()).value;
		
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double result = aDouble * bDouble;
      RESULT = result;
    }else{
      RESULT = aDouble;
    }
    /////////////////////////////////////////////

    
              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("operacion",1, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operacion ::= PARENTESIS_A operacion parente 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParserLoginUser$stack.peek()).value;
		
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double result = aDouble * bDouble;
      RESULT = result;
    }else{
      RESULT = a;
    }
    /////////////////////////////////////////////
    
              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("operacion",1, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operacion ::= REAL_NUMEBERS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$MyParserLoginUser$stack.peek()).value;
		RESULT = a;
              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("operacion",1, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operacion ::= REAL_NUMEBERS PARENTESIS_A operacion PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-1)).value;
		
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double result = aDouble * bDouble;
      RESULT = result;
    }else{
      RESULT = a;
    }
    /////////////////////////////////////////////
    
              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("operacion",1, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parente ::= PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("parente",2, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parente ::= PARENTESIS_C operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserLoginUser$stack.peek()).value;
		RESULT = a;
              CUP$MyParserLoginUser$result = parser.getSymbolFactory().newSymbol("parente",2, ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.elementAt(CUP$MyParserLoginUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserLoginUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginUser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MyParserLoginUser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MyParserLoginUser$do_action(
    int                        CUP$MyParserLoginUser$act_num,
    java_cup.runtime.lr_parser CUP$MyParserLoginUser$parser,
    java.util.Stack            CUP$MyParserLoginUser$stack,
    int                        CUP$MyParserLoginUser$top)
    throws java.lang.Exception
    {
              return CUP$MyParserLoginUser$do_action_part00000000(
                               CUP$MyParserLoginUser$act_num,
                               CUP$MyParserLoginUser$parser,
                               CUP$MyParserLoginUser$stack,
                               CUP$MyParserLoginUser$top);
    }
}

}
