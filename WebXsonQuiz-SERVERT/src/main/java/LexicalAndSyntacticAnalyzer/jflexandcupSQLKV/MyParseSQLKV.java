
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package LexicalAndSyntacticAnalyzer.jflexandcupSQLKV;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import LexicalAndSyntacticAnalyzer.analyzer.Token;
import reports.*;
import LexicalAndSyntacticAnalyzer.dataAnalyzer.*;
import LexicalAndSyntacticAnalyzer.dataAnalyzer.RequestAnalyzer;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MyParseSQLKV extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return MySymSQLKV.class;
}

  /** Default constructor. */
  @Deprecated
  public MyParseSQLKV() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MyParseSQLKV(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MyParseSQLKV(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\002\004\000\002\015\004\000\002\015" +
    "\003\000\002\005\010\000\002\007\003\000\002\007\003" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\003\000\002\010\004\000\002\010\004\000\002" +
    "\010\004\000\002\010\004\000\002\010\004\000\002\011" +
    "\004\000\002\006\003\000\002\006\002\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\002" +
    "\003\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\003\000" +
    "\002\003\006\000\002\004\003\000\002\004\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\006\003\005\033\006\001\002\000\004\002" +
    "\uffff\001\002\000\004\033\006\001\002\000\004\034\011" +
    "\001\002\000\004\002\010\001\002\000\004\002\001\001" +
    "\002\000\006\012\013\035\ufff0\001\002\000\004\035\014" +
    "\001\002\000\004\035\ufff1\001\002\000\004\036\015\001" +
    "\002\000\026\017\036\020\017\021\034\024\033\026\020" +
    "\027\027\030\024\031\016\032\035\037\021\001\002\000" +
    "\004\010\053\001\002\000\032\002\uffdf\004\uffdf\005\uffdf" +
    "\006\uffdf\007\uffdf\010\uffdf\013\uffdf\014\uffdf\015\uffdf\016" +
    "\uffdf\021\101\022\uffdf\001\002\000\004\010\053\001\002" +
    "\000\004\010\053\001\002\000\016\002\ufffc\004\067\005" +
    "\065\006\066\007\071\010\070\001\002\000\016\002\uffe9" +
    "\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\001\002\000" +
    "\004\010\053\001\002\000\016\002\uffea\004\uffea\005\uffea" +
    "\006\uffea\007\uffea\010\uffea\001\002\000\012\002\ufff8\040" +
    "\ufff8\041\ufff8\042\ufff8\001\002\000\016\002\uffe7\004\uffe7" +
    "\005\uffe7\006\uffe7\007\uffe7\010\uffe7\001\002\000\004\002" +
    "\ufffe\001\002\000\012\002\ufffd\040\057\041\060\042\056" +
    "\001\002\000\026\002\uffe5\004\uffe5\005\uffe5\006\uffe5\007" +
    "\uffe5\010\uffe5\013\043\014\044\015\040\016\041\001\002" +
    "\000\004\010\053\001\002\000\006\020\017\021\034\001" +
    "\002\000\016\002\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6" +
    "\010\uffe6\001\002\000\016\002\uffe8\004\uffe8\005\uffe8\006" +
    "\uffe8\007\uffe8\010\uffe8\001\002\000\014\013\043\014\044" +
    "\015\040\016\041\022\042\001\002\000\006\020\017\021" +
    "\034\001\002\000\006\020\017\021\034\001\002\000\034" +
    "\002\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\013" +
    "\uffdd\014\uffdd\015\uffdd\016\uffdd\020\017\021\034\022\uffdd" +
    "\001\002\000\006\020\017\021\034\001\002\000\006\020" +
    "\017\021\034\001\002\000\030\002\uffe0\004\uffe0\005\uffe0" +
    "\006\uffe0\007\uffe0\010\uffe0\013\uffe0\014\uffe0\015\uffe0\016" +
    "\uffe0\022\uffe0\001\002\000\030\002\uffe3\004\uffe3\005\uffe3" +
    "\006\uffe3\007\uffe3\010\uffe3\013\uffe3\014\uffe3\015\040\016" +
    "\041\022\uffe3\001\002\000\030\002\uffe4\004\uffe4\005\uffe4" +
    "\006\uffe4\007\uffe4\010\uffe4\013\uffe4\014\uffe4\015\040\016" +
    "\041\022\uffe4\001\002\000\030\002\uffdc\004\uffdc\005\uffdc" +
    "\006\uffdc\007\uffdc\010\uffdc\013\uffdc\014\uffdc\015\uffdc\016" +
    "\uffdc\022\uffdc\001\002\000\030\002\uffe1\004\uffe1\005\uffe1" +
    "\006\uffe1\007\uffe1\010\uffe1\013\uffe1\014\uffe1\015\uffe1\016" +
    "\uffe1\022\uffe1\001\002\000\030\002\uffe2\004\uffe2\005\uffe2" +
    "\006\uffe2\007\uffe2\010\uffe2\013\uffe2\014\uffe2\015\uffe2\016" +
    "\uffe2\022\uffe2\001\002\000\004\011\055\001\002\000\012" +
    "\002\ufff5\040\ufff5\041\ufff5\042\ufff5\001\002\000\012\002" +
    "\ufff2\040\ufff2\041\ufff2\042\ufff2\001\002\000\014\024\033" +
    "\026\020\030\024\031\016\037\021\001\002\000\014\024" +
    "\033\026\020\030\024\031\016\037\021\001\002\000\014" +
    "\024\033\026\020\030\024\031\016\037\021\001\002\000" +
    "\012\002\ufffa\040\ufffa\041\ufffa\042\ufffa\001\002\000\012" +
    "\002\ufffb\040\ufffb\041\ufffb\042\ufffb\001\002\000\012\002" +
    "\ufff9\040\ufff9\041\ufff9\042\ufff9\001\002\000\012\002\ufff6" +
    "\040\ufff6\041\ufff6\042\ufff6\001\002\000\014\017\036\020" +
    "\017\021\034\027\027\032\035\001\002\000\014\017\036" +
    "\020\017\021\034\027\027\032\035\001\002\000\014\017" +
    "\036\020\017\021\034\027\027\032\035\001\002\000\014" +
    "\017\036\020\017\021\034\027\027\032\035\001\002\000" +
    "\014\017\036\020\017\021\034\027\027\032\035\001\002" +
    "\000\016\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010" +
    "\070\001\002\000\016\002\uffeb\004\uffeb\005\uffeb\006\uffeb" +
    "\007\uffeb\010\uffeb\001\002\000\016\002\uffef\004\uffef\005" +
    "\uffef\006\uffef\007\uffef\010\070\001\002\000\016\002\uffed" +
    "\004\uffed\005\uffed\006\uffed\007\uffed\010\070\001\002\000" +
    "\016\002\uffee\004\uffee\005\uffee\006\uffee\007\uffee\010\070" +
    "\001\002\000\012\002\ufff7\040\ufff7\041\ufff7\042\ufff7\001" +
    "\002\000\012\002\ufff3\040\ufff3\041\ufff3\042\ufff3\001\002" +
    "\000\006\020\017\021\034\001\002\000\014\013\043\014" +
    "\044\015\040\016\041\022\103\001\002\000\030\002\uffde" +
    "\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\013\uffde\014" +
    "\uffde\015\uffde\016\uffde\022\uffde\001\002\000\012\002\ufff4" +
    "\040\ufff4\041\ufff4\042\ufff4\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\006\005\003\015\006\001\001\000\002\001" +
    "\001\000\004\005\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\002\022\003\031\007\027\010\025\012\024\013\021\014" +
    "\030\001\001\000\004\011\103\001\001\000\002\001\001" +
    "\000\004\011\077\001\001\000\004\011\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\053\001\001\000\004\003\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\044\001\001\000\004" +
    "\003\051\001\001\000\004\003\050\001\001\000\004\003" +
    "\047\001\001\000\004\003\046\001\001\000\004\003\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\025\014\062\001\001\000\006\010\025\014\061" +
    "\001\001\000\006\010\025\014\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\002\022\003\031\012\024\013\075\001\001\000" +
    "\012\002\022\003\031\012\024\013\074\001\001\000\012" +
    "\002\022\003\031\012\024\013\073\001\001\000\012\002" +
    "\022\003\031\012\024\013\072\001\001\000\012\002\022" +
    "\003\031\012\024\013\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MyParseSQLKV$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MyParseSQLKV$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MyParseSQLKV$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




private ArrayList<ReportErrorInterpreter> listError = new ArrayList();
private List<String> listTrivias = new ArrayList();
private ArrayList<DataAnalyzer> dataStack = new ArrayList();
private ArrayList<RequestAnalyzer> listRquest = new ArrayList();
private ArrayList<OperationSQLKV> listOperationSQLKV = new ArrayList();



	  public MyParseSQLKV(LexemaMySQLKV lexer) {
        super(lexer);
    }

    //erorr
    public void syntax_error(Symbol cur_token) {
        String nameTerminal = symbl_name_from_id(this.cur_token.sym);
        int numberTerminal = this.cur_token.sym;
        ///codigo para el objeto
        TypeIntreprete type = TypeIntreprete.SYNTACTIC;
        int line = cur_token.left+1;
        int columna = cur_token.right +1;
        String lexema = this.cur_token.value.toString();
        Token token = new Token(line, columna, lexema);
        System.out.println(token.toString());
        this.listError.add(new ReportErrorInterpreter(type, token, ReportingConstants.ERROR_SICTATICO));
    }

    //Returnar el listado de errores
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    //Returnar el listado de Rquest
    public ArrayList<RequestAnalyzer> getListRquest(){
      return this.listRquest;
    }

    /**
     * ***END CODE*******
     */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MyParseSQLKV$actions {
  private final MyParseSQLKV parser;

  /** Constructor */
  CUP$MyParseSQLKV$actions(MyParseSQLKV parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MyParseSQLKV$do_action_part00000000(
    int                        CUP$MyParseSQLKV$act_num,
    java_cup.runtime.lr_parser CUP$MyParseSQLKV$parser,
    java.util.Stack            CUP$MyParseSQLKV$stack,
    int                        CUP$MyParseSQLKV$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MyParseSQLKV$result;

      /* select the action based on the action number */
      switch (CUP$MyParseSQLKV$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-1)).value;
		RESULT = start_val;
              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-1)), ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MyParseSQLKV$parser.done_parsing();
          return CUP$MyParseSQLKV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= error sql_kv 
            {
              Object RESULT =null;

              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("inicio",11, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-1)), ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          return CUP$MyParseSQLKV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= sql_kv 
            {
              Object RESULT =null;

              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("inicio",11, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          return CUP$MyParseSQLKV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sql_kv ::= SELECCIONAR REPORTE id_trivia FILTRAR POR operacion_logic 
            {
              Object RESULT =null;

              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("sql_kv",3, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-5)), ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          return CUP$MyParseSQLKV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // operacion_logic ::= operation_date_type_string 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.peek()).value;
		
   if (a != null && a instanceof DataAnalyzer) {
      DataAnalyzer left = (DataAnalyzer) a;
      listOperationSQLKV.add((new OperationSQLKV(null, left, ListTypeOperationSQLKV.AND)));
      
    }
  
              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("operacion_logic",5, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          return CUP$MyParseSQLKV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // operacion_logic ::= operation_date_type_number 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.peek()).value;
		
    if (a != null && a instanceof DataAnalyzer) {
      DataAnalyzer left = (DataAnalyzer) a;
      listOperationSQLKV.add((new OperationSQLKV(null, left, ListTypeOperationSQLKV.GREATER_THAN)));
      
    }
  
              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("operacion_logic",5, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          return CUP$MyParseSQLKV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // operation_date_type_string ::= operation_date_type_string AND operation_date_type_string 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.peek()).value;
		
  if (a != null && b != null && a instanceof DataAnalyzer &&  b instanceof DataAnalyzer) {
      DataAnalyzer left = (DataAnalyzer) a;
      DataAnalyzer right = (DataAnalyzer) b;
      listOperationSQLKV.add((new OperationSQLKV(right, left, ListTypeOperationSQLKV.AND)));
    }
  
              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("operation_date_type_string",10, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)), ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          return CUP$MyParseSQLKV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // operation_date_type_string ::= operation_date_type_string OR operation_date_type_string 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.peek()).value;
		
  if (a != null && b != null && a instanceof DataAnalyzer &&  b instanceof DataAnalyzer) {
      DataAnalyzer left = (DataAnalyzer) a;
      DataAnalyzer right = (DataAnalyzer) b;
      listOperationSQLKV.add((new OperationSQLKV(right, left, ListTypeOperationSQLKV.OR)));
      
    }
  
              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("operation_date_type_string",10, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)), ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          return CUP$MyParseSQLKV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // operation_date_type_string ::= operation_date_type_string NOT operation_date_type_string 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.peek()).value;
		
  if (a != null && b != null && a instanceof DataAnalyzer &&  b instanceof DataAnalyzer) {
      DataAnalyzer left = (DataAnalyzer) a;
      DataAnalyzer right = (DataAnalyzer) b;
      listOperationSQLKV.add((new OperationSQLKV(right, left, ListTypeOperationSQLKV.NOT)));
      
    }
  
              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("operation_date_type_string",10, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)), ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          return CUP$MyParseSQLKV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // operation_date_type_string ::= date_type_string 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.peek()).value;
		RESULT = a;
              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("operation_date_type_string",10, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          return CUP$MyParseSQLKV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // date_type_string ::= USUARIO derviar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.peek()).value;
		RESULT = new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.ID_USER,a.toString());
              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("date_type_string",6, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-1)), ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          return CUP$MyParseSQLKV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // date_type_string ::= TEMA derviar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.peek()).value;
		RESULT = new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.TEMA,a.toString());
              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("date_type_string",6, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-1)), ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          return CUP$MyParseSQLKV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // date_type_string ::= NOMBRE derviar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.peek()).value;
		RESULT = new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.NAME,a.toString());
              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("date_type_string",6, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-1)), ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          return CUP$MyParseSQLKV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // date_type_string ::= USUARIO_CREACION derviar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.peek()).value;
		RESULT = new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.USUARIO_CREACION,a.toString());
              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("date_type_string",6, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-1)), ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          return CUP$MyParseSQLKV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // date_type_string ::= INSTITUCION derviar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.peek()).value;
		RESULT = new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.INSTITUTION,a.toString());
              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("date_type_string",6, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-1)), ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          return CUP$MyParseSQLKV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // derviar ::= EQUAL STRING 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.peek()).value;
		RESULT = a;
              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("derviar",7, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-1)), ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          return CUP$MyParseSQLKV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // id_trivia ::= ID_TRIVIA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.peek()).value;
		
    listTrivias.add(a.toString());
  
              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("id_trivia",4, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          return CUP$MyParseSQLKV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // id_trivia ::= 
            {
              Object RESULT =null;

              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("id_trivia",4, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          return CUP$MyParseSQLKV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operation_date_type_number ::= operation_date_type_number GREATER_THAN operation_date_type_number 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.peek()).value;
		
    if (a != null && b != null && a instanceof DataAnalyzer &&  b instanceof DataAnalyzer) {
      DataAnalyzer left = (DataAnalyzer) a;
      DataAnalyzer right = (DataAnalyzer) b;
      listOperationSQLKV.add((new OperationSQLKV(right, left, ListTypeOperationSQLKV.GREATER_THAN)));
      
    }
  
              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("operation_date_type_number",9, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)), ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          return CUP$MyParseSQLKV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operation_date_type_number ::= operation_date_type_number LESS_THAN operation_date_type_number 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.peek()).value;
		
  if (a != null && b != null && a instanceof DataAnalyzer &&  b instanceof DataAnalyzer) {
      DataAnalyzer left = (DataAnalyzer) a;
      DataAnalyzer right = (DataAnalyzer) b;
      listOperationSQLKV.add((new OperationSQLKV(right, left, ListTypeOperationSQLKV.LESS_THAN)));
      
    }
  
              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("operation_date_type_number",9, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)), ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          return CUP$MyParseSQLKV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operation_date_type_number ::= operation_date_type_number GREATER_THAN_OR_EQUAL operation_date_type_number 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.peek()).value;
		
  if (a != null && b != null && a instanceof DataAnalyzer &&  b instanceof DataAnalyzer) {
      DataAnalyzer left = (DataAnalyzer) a;
      DataAnalyzer right = (DataAnalyzer) b;
      listOperationSQLKV.add((new OperationSQLKV(right, left, ListTypeOperationSQLKV.GREATER_THAN_OR_EQUAL)));
      
    }
  
              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("operation_date_type_number",9, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)), ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          return CUP$MyParseSQLKV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operation_date_type_number ::= operation_date_type_number LESS_THAN_OR_EQUAL operation_date_type_number 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.peek()).value;
		
  if (a != null && b != null && a instanceof DataAnalyzer &&  b instanceof DataAnalyzer) {
      DataAnalyzer left = (DataAnalyzer) a;
      DataAnalyzer right = (DataAnalyzer) b;
      listOperationSQLKV.add((new OperationSQLKV(right, left, ListTypeOperationSQLKV.LESS_THAN_OR_EQUAL)));
      
    }
  
              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("operation_date_type_number",9, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)), ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          return CUP$MyParseSQLKV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operation_date_type_number ::= operation_date_type_number EQUAL operation_date_type_number 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.peek()).value;
		
  if (a != null && b != null && a instanceof DataAnalyzer &&  b instanceof DataAnalyzer) {
      DataAnalyzer left = (DataAnalyzer) a;
      DataAnalyzer right = (DataAnalyzer) b;
      listOperationSQLKV.add((new OperationSQLKV(right, left, ListTypeOperationSQLKV.EQUAL)));
      
    }
  
              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("operation_date_type_number",9, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)), ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          return CUP$MyParseSQLKV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operation_date_type_number ::= date_type_number 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.peek()).value;
		RESULT = a;
              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("operation_date_type_number",9, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          return CUP$MyParseSQLKV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // date_type_number ::= inico_opereacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.peek()).value;
		RESULT = new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.INDICE,a.toString());
              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("date_type_number",8, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          return CUP$MyParseSQLKV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // date_type_number ::= TIEMPO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.peek()).value;
		RESULT = new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.RESPONSE_TIME,a.toString());
              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("date_type_number",8, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          return CUP$MyParseSQLKV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // date_type_number ::= TIEMPO_PREGUNTA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.peek()).value;
		RESULT = new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.TIEMPO_PREGUNTA,a.toString());
              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("date_type_number",8, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          return CUP$MyParseSQLKV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // date_type_number ::= SCORE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.peek()).value;
		RESULT = new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.SCORE,a.toString());
              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("date_type_number",8, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          return CUP$MyParseSQLKV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // inico_opereacion ::= operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.peek()).value;
		
    //////////////////////////////////////////
		Double aDouble = 0.0;
    if (a!=null) {
        aDouble =   Double.valueOf(a.toString());
        RESULT = aDouble;
    }else{
      RESULT = aDouble;
    }
    //////////////////////////////////////////
    
              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("inico_opereacion",0, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          return CUP$MyParseSQLKV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operacion ::= operacion SUMAR operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.peek()).value;
		
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double resultDouble = aDouble + bDouble;
      RESULT = resultDouble;
    }else{
      RESULT = aDouble;
    }
    /////////////////////////////////////////////
    
              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("operacion",1, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)), ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          return CUP$MyParseSQLKV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operacion ::= operacion RESTAR operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.peek()).value;
		
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double resultDouble = aDouble - bDouble;
      RESULT = resultDouble;
    }else{
      RESULT = aDouble;
    }
    /////////////////////////////////////////////

    
              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("operacion",1, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)), ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          return CUP$MyParseSQLKV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operacion ::= operacion DIVIDIR operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.peek()).value;
		
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      if (bDouble>0) {
        Double result = ( bDouble/ bDouble);
        RESULT = result;
      }else{
        /// manejar un error de sintasis
        RESULT = aDouble;// si es 15/0
      }
    }else{
      RESULT = aDouble;
    }
    /////////////////////////////////////////////

    
              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("operacion",1, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)), ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          return CUP$MyParseSQLKV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operacion ::= operacion MULTIPLICAR operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.peek()).value;
		
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double result = aDouble * bDouble;
      RESULT = result;
    }else{
      RESULT = aDouble;
    }
    /////////////////////////////////////////////

    
              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("operacion",1, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)), ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          return CUP$MyParseSQLKV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operacion ::= PARENTESIS_A operacion parente 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.peek()).value;
		
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double result = aDouble * bDouble;
      RESULT = result;
    }else{
      RESULT = a;
    }
    /////////////////////////////////////////////
    
              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("operacion",1, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-2)), ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          return CUP$MyParseSQLKV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operacion ::= REAL_NUMEBERS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.peek()).value;
		RESULT = a;
              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("operacion",1, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          return CUP$MyParseSQLKV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operacion ::= REAL_NUMEBERS PARENTESIS_A operacion PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-1)).value;
		
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double result = aDouble * bDouble;
      RESULT = result;
    }else{
      RESULT = a;
    }
    /////////////////////////////////////////////
    
              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("operacion",1, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-3)), ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          return CUP$MyParseSQLKV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parente ::= PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("parente",2, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          return CUP$MyParseSQLKV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parente ::= PARENTESIS_C operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParseSQLKV$stack.peek()).value;
		RESULT = a;
              CUP$MyParseSQLKV$result = parser.getSymbolFactory().newSymbol("parente",2, ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.elementAt(CUP$MyParseSQLKV$top-1)), ((java_cup.runtime.Symbol)CUP$MyParseSQLKV$stack.peek()), RESULT);
            }
          return CUP$MyParseSQLKV$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MyParseSQLKV$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MyParseSQLKV$do_action(
    int                        CUP$MyParseSQLKV$act_num,
    java_cup.runtime.lr_parser CUP$MyParseSQLKV$parser,
    java.util.Stack            CUP$MyParseSQLKV$stack,
    int                        CUP$MyParseSQLKV$top)
    throws java.lang.Exception
    {
              return CUP$MyParseSQLKV$do_action_part00000000(
                               CUP$MyParseSQLKV$act_num,
                               CUP$MyParseSQLKV$parser,
                               CUP$MyParseSQLKV$stack,
                               CUP$MyParseSQLKV$top);
    }
}

}
