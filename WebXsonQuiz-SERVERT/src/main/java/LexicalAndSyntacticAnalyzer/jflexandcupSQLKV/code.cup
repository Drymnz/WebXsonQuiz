package LexicalAndSyntacticAnalyzer.jflexandcupSQLKV;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;

import LexicalAndSyntacticAnalyzer.analyzer.Token;
import reports.*;
import LexicalAndSyntacticAnalyzer.dataAnalyzer.*;
import LexicalAndSyntacticAnalyzer.dataAnalyzer.RequestAnalyzer;

/**
     * ***STAR CODE*******
     */
    parser code {:

private ArrayList<ReportErrorInterpreter> listError = new ArrayList();
private List<String> listTrivias = new ArrayList();
private ArrayList<OperationSQLKV> listOperationSQLKV = new ArrayList();



	  public MyParseSQLKV(LexemaMySQLKV lexer) {
        super(lexer);
    }

    //erorr
    public void syntax_error(Symbol cur_token) {
        String nameTerminal = symbl_name_from_id(this.cur_token.sym);
        int numberTerminal = this.cur_token.sym;
        ///codigo para el objeto
        TypeIntreprete type = TypeIntreprete.SYNTACTIC;
        int line = cur_token.left+1;
        int columna = cur_token.right +1;
        String lexema = (this.cur_token.value!=null)? this.cur_token.value.toString() : "Token no existe";
        Token token = new Token(line, columna, lexema);
        this.listError.add(new ReportErrorInterpreter(type, token, ReportingConstants.ERROR_SICTATICO));
    }

    //Returnar el listado de errores
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    //Returnar el listado de nombres de trivias
    public List<String> getListNameTrivias() {
        return this.listTrivias;
    }

   //Returnar el listado de operaciones
    public ArrayList<OperationSQLKV>  getListOperationSQLKV() {
        return this.listOperationSQLKV;
    }

    /**
     * ***END CODE*******
     */
:}

/* Terminales */
terminal `GREATER_THAN,LESS_THAN,GREATER_THAN_OR_EQUAL,LESS_THAN_OR_EQUAL,EQUAL;
terminal String STRING,ID_TRIVIA;
/*SIMBOLOS DE OPERACION*/
terminal SUMAR,RESTAR,DIVIDIR,MULTIPLICAR,TIEMPO;
terminal String REAL_NUMEBERS;
/*AGRUPACION*/
terminal PARENTESIS_A,PARENTESIS_C;
/*SOLICITUD*/
terminal COMA;
//tipos de solicitud
terminal NOMBRE,FECHA_CREACION,INSTITUCION;
/*TRIVIAS*/
terminal TIEMPO_PREGUNTA,TEMA,USUARIO_CREACION,SCORE;
/*SQLVK*/
terminal SELECCIONAR,REPORTE,FILTRAR,POR,USUARIO;
terminal AND,OR,NOT;
/* No terminales */
//operaicones
non terminal inico_opereacion,operacion,parente;
//SQL KV
non terminal sql_kv;
non terminal id_trivia;
non terminal operacion_logic,date_type_string,derviar;
non terminal date_type_number,operation_date_type_number,operation_date_type_string;
non terminal various_trivia;
//inicio
non terminal inicio;
/*************************************PRECEDENCIA******************************************************/
precedence left SUMAR, RESTAR;
precedence left MULTIPLICAR, DIVIDIR;
precedence left PARENTESIS_A, PARENTESIS_C;
precedence left GREATER_THAN,LESS_THAN,GREATER_THAN_OR_EQUAL,LESS_THAN_OR_EQUAL;
precedence left EQUAL,AND,OR,NOT;


/* Gram√°tica */
start with inicio;
/******operaciones matematicas*****/
inicio 
  ::= error sql_kv
    |sql_kv
    ;

sql_kv
  ::= SELECCIONAR REPORTE various_trivia FILTRAR POR operacion_logic 
  ;
/// como funciona las operaciones
operacion_logic
  ::= operation_date_type_string:a
   {:
   if (a != null && a instanceof DataAnalyzer) {
      DataAnalyzer left = (DataAnalyzer) a;
      listOperationSQLKV.add((new OperationSQLKV(null, left, ListTypeOperationSQLKV.AND)));
      
    }
  :}
  |operation_date_type_number:a
  {:
    if (a != null && a instanceof DataAnalyzer) {
      DataAnalyzer left = (DataAnalyzer) a;
      listOperationSQLKV.add((new OperationSQLKV(null, left, ListTypeOperationSQLKV.GREATER_THAN)));
      
    }
  :}
  ;

//String
operation_date_type_string
  ::=
   operation_date_type_string:a AND operation_date_type_string:b
   {:
  if (a != null && b != null && a instanceof DataAnalyzer &&  b instanceof DataAnalyzer) {
      DataAnalyzer left = (DataAnalyzer) a;
      DataAnalyzer right = (DataAnalyzer) b;
      listOperationSQLKV.add((new OperationSQLKV(right, left, ListTypeOperationSQLKV.AND)));
    }
  :}
  |operation_date_type_string:a OR  operation_date_type_string:b
  {:
  if (a != null && b != null && a instanceof DataAnalyzer &&  b instanceof DataAnalyzer) {
      DataAnalyzer left = (DataAnalyzer) a;
      DataAnalyzer right = (DataAnalyzer) b;
      listOperationSQLKV.add((new OperationSQLKV(right, left, ListTypeOperationSQLKV.OR)));
      
    }
  :}
  |operation_date_type_string:a NOT operation_date_type_string:b
  {:
  if (a != null && b != null && a instanceof DataAnalyzer &&  b instanceof DataAnalyzer) {
      DataAnalyzer left = (DataAnalyzer) a;
      DataAnalyzer right = (DataAnalyzer) b;
      listOperationSQLKV.add((new OperationSQLKV(right, left, ListTypeOperationSQLKV.NOT)));
      
    }
  :}
  |date_type_string:a {:RESULT = a;:}
  ;

date_type_string
  ::=
  USUARIO derviar:a
  {:RESULT = new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.ID_USER,a.toString());:}
  |TEMA derviar:a
  {:RESULT = new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.TEMA,a.toString());:}
  |NOMBRE derviar:a
  {:RESULT = new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.NAME,a.toString());:}
  |USUARIO_CREACION derviar:a
  {:RESULT = new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.USUARIO_CREACION,a.toString());:}
  |INSTITUCION derviar:a
  {:RESULT = new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.INSTITUTION,a.toString());:}
  ;

derviar
  ::=EQUAL STRING:a {:RESULT = a;:}
  ;

////Trivias

various_trivia
  ::= various_trivia COMA id_trivia
  |id_trivia
  ;

id_trivia
  ::= ID_TRIVIA:a 
  {:
    listTrivias.add(a.toString());
  :}
  |
  ;

//Numero
operation_date_type_number
  ::=
   operation_date_type_number:a GREATER_THAN operation_date_type_number:b
   {:
    if (a != null && b != null && a instanceof DataAnalyzer &&  b instanceof DataAnalyzer) {
      DataAnalyzer left = (DataAnalyzer) a;
      DataAnalyzer right = (DataAnalyzer) b;
      listOperationSQLKV.add((new OperationSQLKV(right, left, ListTypeOperationSQLKV.GREATER_THAN)));
      
    }
  :}
  |operation_date_type_number:a LESS_THAN operation_date_type_number:b
  {:
  if (a != null && b != null && a instanceof DataAnalyzer &&  b instanceof DataAnalyzer) {
      DataAnalyzer left = (DataAnalyzer) a;
      DataAnalyzer right = (DataAnalyzer) b;
      listOperationSQLKV.add((new OperationSQLKV(right, left, ListTypeOperationSQLKV.LESS_THAN)));
      
    }
  :}
  |operation_date_type_number:a GREATER_THAN_OR_EQUAL operation_date_type_number:b
  {:
  if (a != null && b != null && a instanceof DataAnalyzer &&  b instanceof DataAnalyzer) {
      DataAnalyzer left = (DataAnalyzer) a;
      DataAnalyzer right = (DataAnalyzer) b;
      listOperationSQLKV.add((new OperationSQLKV(right, left, ListTypeOperationSQLKV.GREATER_THAN_OR_EQUAL)));
      
    }
  :}
  |operation_date_type_number:a LESS_THAN_OR_EQUAL operation_date_type_number:b
  {:
  if (a != null && b != null && a instanceof DataAnalyzer &&  b instanceof DataAnalyzer) {
      DataAnalyzer left = (DataAnalyzer) a;
      DataAnalyzer right = (DataAnalyzer) b;
      listOperationSQLKV.add((new OperationSQLKV(right, left, ListTypeOperationSQLKV.LESS_THAN_OR_EQUAL)));
      
    }
  :}
  |operation_date_type_number:a EQUAL operation_date_type_number:b
  {:
  if (a != null && b != null && a instanceof DataAnalyzer &&  b instanceof DataAnalyzer) {
      DataAnalyzer left = (DataAnalyzer) a;
      DataAnalyzer right = (DataAnalyzer) b;
      listOperationSQLKV.add((new OperationSQLKV(right, left, ListTypeOperationSQLKV.EQUAL)));
      
    }
  :}
  |date_type_number:a {:RESULT = a;:}
  ;

date_type_number
  ::=
  inico_opereacion:a 
  {:RESULT = new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.INDICE,a.toString());:}
  |TIEMPO:a 
  {:RESULT = new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.RESPONSE_TIME,a.toString());:}
  |TIEMPO_PREGUNTA:a 
  {:RESULT = new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.TIEMPO_PREGUNTA,a.toString());:}
  |SCORE:a 
  {:RESULT = new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.SCORE,a.toString());:}
  ;
/******operaciones matematicas*****/
/*A QUI ESTA EL TOTAL DE LA OPERACION*/
inico_opereacion ::= operacion:a 
    {:
    //////////////////////////////////////////
		Double aDouble = 0.0;
    if (a!=null) {
        aDouble =   Double.valueOf(a.toString());
        RESULT = aDouble;
    }else{
      RESULT = aDouble;
    }
    //////////////////////////////////////////
    :} 
    ;
/******operaciones matematicas*****/
operacion 
/**SUMA**/
::= operacion:a SUMAR operacion:b 
    {:
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double resultDouble = aDouble + bDouble;
      RESULT = resultDouble;
    }else{
      RESULT = aDouble;
    }
    /////////////////////////////////////////////
    :}

/**RESTA**/
|  operacion:a RESTAR operacion:b 
    {:
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double resultDouble = aDouble - bDouble;
      RESULT = resultDouble;
    }else{
      RESULT = aDouble;
    }
    /////////////////////////////////////////////

    :}
/**DIVISION**/
|  operacion:a DIVIDIR operacion:b 
    {:
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      if (bDouble>0) {
        Double result = ( bDouble/ bDouble);
        RESULT = result;
      }else{
        /// manejar un error de sintasis
        RESULT = aDouble;// si es 15/0
      }
    }else{
      RESULT = aDouble;
    }
    /////////////////////////////////////////////

    :}

/**MULTIPLICACION**/
|  operacion:a MULTIPLICAR operacion:b 
    {:
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double result = aDouble * bDouble;
      RESULT = result;
    }else{
      RESULT = aDouble;
    }
    /////////////////////////////////////////////

    :}
/****solo retornar*****/
| PARENTESIS_A operacion:a  parente:b
    {:
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double result = aDouble * bDouble;
      RESULT = result;
    }else{
      RESULT = a;
    }
    /////////////////////////////////////////////
    :}
| REAL_NUMEBERS:a {:RESULT = a;:}
| REAL_NUMEBERS:a PARENTESIS_A  operacion:b  PARENTESIS_C
    {:
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double result = aDouble * bDouble;
      RESULT = result;
    }else{
      RESULT = a;
    }
    /////////////////////////////////////////////
    :}
/***manejar el error***/
;

parente
  ::= PARENTESIS_C
  | PARENTESIS_C operacion:a {:RESULT = a;:}
  ;