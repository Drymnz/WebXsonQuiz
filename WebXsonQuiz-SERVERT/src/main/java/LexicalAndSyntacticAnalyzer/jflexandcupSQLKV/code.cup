package LexicalAndSyntacticAnalyzer.jflexandcupSQLKV;

import java_cup.runtime.*;
import java.util.ArrayList;

import LexicalAndSyntacticAnalyzer.analyzer.Token;
import reports.*;
import LexicalAndSyntacticAnalyzer.dataAnalyzer.*;
import LexicalAndSyntacticAnalyzer.dataAnalyzer.RequestAnalyzer;
import LexicalAndSyntacticAnalyzer.ListRequests;

/**
     * ***STAR CODE*******
     */
    parser code {:

private ArrayList<ReportErrorInterpreter> listError = new ArrayList();
private ArrayList<DataAnalyzer> dataStack = new ArrayList();
private ArrayList<RequestAnalyzer> listRquest = new ArrayList();


	  public MyParseSQLKV(LexemaMySQLKV lexer) {
        super(lexer);
    }

    //erorr
    public void syntax_error(Symbol cur_token) {
        String nameTerminal = symbl_name_from_id(this.cur_token.sym);
        int numberTerminal = this.cur_token.sym;
        ///codigo para el objeto
        TypeIntreprete type = TypeIntreprete.SYNTACTIC;
        int line = cur_token.left+1;
        int columna = cur_token.right +1;
        String lexema = this.cur_token.value.toString();
        Token token = new Token(line, columna, lexema);
        System.out.println(token.toString());
        this.listError.add(new ReportErrorInterpreter(type, token, ReportingConstants.ERROR_SICTATICO));
    }

    //Returnar el listado de errores
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    //Returnar el listado de Rquest
    public ArrayList<RequestAnalyzer> getListRquest(){
      return this.listRquest;
    }

    /**
     * ***END CODE*******
     */
:}

/* Terminales */
terminal COLNO,CLOSE,OPEN,EQUAL;
terminal String STRING,ID_TRIVIA;
/*SIMBOLOS DE OPERACION*/
terminal SUMAR,RESTAR,DIVIDIR,MULTIPLICAR;
terminal String REAL_NUMEBERS,STRING_DATE;
/*AGRUPACION*/
terminal PARENTESIS_A,PARENTESIS_C;
terminal BRACKETS_O,BRACKETS_C;
terminal KEYS_O,KEYS_C;
/*SOLICITUD*/
terminal MAKE_REQUESTS,FINAL_REQUESTS,COMA;
//tipos de solicitud
terminal NAME_USER,NAME_PERSONAL_USER,INSTITUCION,DATE;
/*TRIVIAS*/
terminal TIEMPO_PREGUNTA,TEMA,USUARIO_CREACION;
terminal ID,TRIVIA,CLASE,TEXTO_VISIBLE,RESPUESTA,INDICE,OPCIONES,COLUMNAS,FILAS;
/*SQLVK*/
terminal SELECCIONAR,REPORTE,FILTRAR,POR,USUARIO;
/* No terminales */
//operaicones
non terminal inico_opereacion,operacion,parente;
//SQL KV
non terminal sql_kv;
non terminal id_trivia,id_user;
//inicio
non terminal inicio,bucle_inicio;
//solicitud
non terminal data;
/*************************************PRECEDENCIA******************************************************/
precedence left SUMAR, RESTAR;
precedence left MULTIPLICAR, DIVIDIR;
precedence left PARENTESIS_A, PARENTESIS_C;

/* GramÃ¡tica */
start with inicio;
/******operaciones matematicas*****/
inicio ::= bucle_inicio
    | error bucle_inicio
    |sql_kv
    ;

sql_kv
  ::= SELECCIONAR REPORTE id_trivia FILTRAR POR USUARIO EQUAL id_user
  ;

id_trivia
  ::= ID_TRIVIA:a {:RESULT = a;:}
  ;

id_user
  ::=  STRING:a {:RESULT = a;:}
  ;

bucle_inicio
  ::=data
  ;

data ::=COLNO STRING:a {:RESULT = a;:}
  | COLNO inico_opereacion:a {:RESULT = a;:}
  | COLNO STRING_DATE:a {:RESULT = a;:}
  ;

/******operaciones matematicas*****/
/*A QUI ESTA EL TOTAL DE LA OPERACION*/
inico_opereacion ::= operacion:a 
    {:
    //////////////////////////////////////////
		Double aDouble = 0.0;
    if (a!=null) {
        aDouble =   Double.valueOf(a.toString());
        RESULT = aDouble;
    }else{
      RESULT = aDouble;
    }
    //////////////////////////////////////////
    :} 
    ;
/******operaciones matematicas*****/
operacion 
/**SUMA**/
::= operacion:a SUMAR operacion:b 
    {:
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double resultDouble = aDouble + bDouble;
      RESULT = resultDouble;
    }else{
      RESULT = aDouble;
    }
    /////////////////////////////////////////////
    :}

/**RESTA**/
|  operacion:a RESTAR operacion:b 
    {:
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double resultDouble = aDouble - bDouble;
      RESULT = resultDouble;
    }else{
      RESULT = aDouble;
    }
    /////////////////////////////////////////////

    :}
/**DIVISION**/
|  operacion:a DIVIDIR operacion:b 
    {:
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      if (bDouble>0) {
        Double result = ( bDouble/ bDouble);
        RESULT = result;
      }else{
        /// manejar un error de sintasis
        RESULT = aDouble;// si es 15/0
      }
    }else{
      RESULT = aDouble;
    }
    /////////////////////////////////////////////

    :}

/**MULTIPLICACION**/
|  operacion:a MULTIPLICAR operacion:b 
    {:
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double result = aDouble * bDouble;
      RESULT = result;
    }else{
      RESULT = aDouble;
    }
    /////////////////////////////////////////////

    :}
/****solo retornar*****/
| PARENTESIS_A operacion:a  parente:b
    {:
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double result = aDouble * bDouble;
      RESULT = result;
    }else{
      RESULT = a;
    }
    /////////////////////////////////////////////
    :}
| REAL_NUMEBERS:a {:RESULT = a;:}
| REAL_NUMEBERS:a PARENTESIS_A  operacion:b  PARENTESIS_C
    {:
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double result = aDouble * bDouble;
      RESULT = result;
    }else{
      RESULT = a;
    }
    /////////////////////////////////////////////
    :}
/***manejar el error***/
;

parente
  ::= PARENTESIS_C
  | PARENTESIS_C operacion:a {:RESULT = a;:}
  ;