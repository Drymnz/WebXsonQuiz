// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: code.jflex

package LexicalAndSyntacticAnalyzer.jflexandcupSQLKV;

import java_cup.runtime.Symbol;

import reports.ReportErrorInterpreter;
import reports.ReportingConstants;
import reports.TypeIntreprete;

import java.util.ArrayList;

import LexicalAndSyntacticAnalyzer.analyzer.Token;


@SuppressWarnings("fallthrough")
public class LexemaMySQLKV implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\1\1\1\2\4\3\22\0\1\2\1\4\1\5"+
    "\1\0\1\6\3\0\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\12\17\1\20\1\0\1\21\1\22"+
    "\1\23\2\0\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\2\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\35\1\43\1\44\1\45\1\46\1\47\1\35"+
    "\1\50\2\35\1\51\1\52\1\53\1\0\1\54\1\0"+
    "\32\35\1\55\1\1\1\56\7\0\1\3\32\0\1\2"+
    "\u01df\0\1\2\177\0\13\2\22\0\1\57\12\0\2\3"+
    "\5\0\1\2\57\0\1\2\240\0\1\2\377\0\u0100\60";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\5\1\1\17\1\20\1\21\1\22\1\0\1\23\12\0"+
    "\1\3\25\0\1\12\3\0\1\24\7\0\1\25\55\0"+
    "\1\26\13\0\1\27\1\0\1\30\11\0\1\31\1\0"+
    "\1\32\1\33\1\0\1\34\2\0\1\35\1\0\1\36"+
    "\4\0\1\37\12\0\1\40\4\0\1\41\1\0\1\42"+
    "\10\0\1\43\4\0\1\44\1\45\5\0\1\46\10\0"+
    "\1\47\2\0\1\50\2\0\1\51\1\0\1\52";

  private static int [] zzUnpackAction() {
    int [] result = new int[213];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\61\0\61\0\61"+
    "\0\61\0\61\0\61\0\365\0\61\0\u0126\0\61\0\61"+
    "\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\61\0\61\0\61"+
    "\0\61\0\u024c\0\61\0\u027d\0\u02ae\0\u02df\0\u0310\0\u0341"+
    "\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467\0\u0498\0\u04c9"+
    "\0\u04fa\0\u052b\0\u055c\0\u058d\0\u05be\0\u05ef\0\u0620\0\u0651"+
    "\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9"+
    "\0\u080a\0\u083b\0\u086c\0\u0498\0\u089d\0\u08ce\0\u08ff\0\61"+
    "\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\61"+
    "\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde"+
    "\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66"+
    "\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee"+
    "\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076"+
    "\0\u10a7\0\u10d8\0\u1109\0\u113a\0\u116b\0\u119c\0\u11cd\0\u11fe"+
    "\0\u122f\0\u1260\0\u1291\0\u12c2\0\u12f3\0\61\0\u1324\0\u1355"+
    "\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd"+
    "\0\u150e\0\61\0\u153f\0\61\0\u1570\0\u15a1\0\u15d2\0\u1603"+
    "\0\u1634\0\u1665\0\u1696\0\u16c7\0\u16f8\0\61\0\u1729\0\61"+
    "\0\61\0\u175a\0\61\0\u178b\0\u17bc\0\61\0\u17ed\0\61"+
    "\0\u181e\0\u184f\0\u1880\0\u18b1\0\61\0\u18e2\0\u1913\0\u1944"+
    "\0\u1975\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\61"+
    "\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\61\0\u1b90\0\61\0\u1bc1"+
    "\0\u1bf2\0\u1c23\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18\0\61"+
    "\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc\0\61\0\61\0\u1e0d\0\u1e3e"+
    "\0\u1e6f\0\u1ea0\0\u1ed1\0\61\0\u1f02\0\u1f33\0\u1f64\0\u1f95"+
    "\0\u1fc6\0\u1ff7\0\u2028\0\u2059\0\61\0\u208a\0\u20bb\0\61"+
    "\0\u20ec\0\u211d\0\61\0\u214e\0\61";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[213];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\5\1\2\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\5\2\1\21\10\2\1\22\1\23\1\24"+
    "\1\2\1\25\2\2\1\26\1\2\1\27\1\5\1\30"+
    "\1\31\1\2\63\0\3\3\55\0\5\32\1\33\11\32"+
    "\1\34\6\32\1\35\2\32\1\36\2\32\1\37\3\32"+
    "\1\40\1\41\1\32\1\42\1\32\1\43\1\44\3\32"+
    "\1\45\6\32\2\0\2\46\2\0\1\5\5\0\1\5"+
    "\2\0\1\5\4\0\25\5\3\0\1\5\21\0\1\47"+
    "\1\0\1\14\45\0\1\50\104\0\1\51\3\0\1\52"+
    "\65\0\1\53\47\0\1\54\60\0\1\55\74\0\1\56"+
    "\14\0\5\32\1\33\44\32\1\45\13\32\1\33\11\32"+
    "\1\57\32\32\1\45\13\32\1\33\30\32\1\60\2\32"+
    "\1\61\10\32\1\45\13\32\1\33\26\32\1\62\15\32"+
    "\1\45\13\32\1\33\21\32\1\63\10\32\1\64\11\32"+
    "\1\45\13\32\1\33\33\32\1\65\10\32\1\45\13\32"+
    "\1\33\34\32\1\66\7\32\1\45\13\32\1\33\22\32"+
    "\1\67\21\32\1\45\13\32\1\33\22\32\1\70\3\32"+
    "\1\71\6\32\1\72\6\32\1\45\13\32\1\33\36\32"+
    "\1\73\5\32\1\45\11\32\1\0\54\32\3\0\2\46"+
    "\74\0\1\74\55\0\1\75\72\0\1\76\70\0\1\77"+
    "\65\0\1\100\57\0\1\101\54\0\1\102\70\0\1\103"+
    "\12\0\5\32\1\33\11\32\1\104\32\32\1\45\13\32"+
    "\1\33\16\32\1\105\25\32\1\45\13\32\1\33\30\32"+
    "\1\106\13\32\1\45\13\32\1\33\30\32\1\107\13\32"+
    "\1\45\13\32\1\110\44\32\1\45\13\32\1\33\21\32"+
    "\1\111\14\32\1\112\5\32\1\45\13\32\1\33\31\32"+
    "\1\113\12\32\1\45\13\32\1\33\20\32\1\114\23\32"+
    "\1\45\13\32\1\33\36\32\1\115\5\32\1\45\13\32"+
    "\1\33\31\32\1\116\10\32\1\117\1\32\1\45\13\32"+
    "\1\33\22\32\1\120\21\32\1\45\13\32\1\33\26\32"+
    "\1\121\15\32\1\45\13\32\1\33\40\32\1\122\3\32"+
    "\1\45\6\32\14\0\1\123\77\0\1\124\72\0\1\125"+
    "\54\0\1\126\47\0\1\127\54\0\1\130\34\0\5\32"+
    "\1\33\11\32\1\131\32\32\1\45\13\32\1\33\36\32"+
    "\1\132\5\32\1\45\13\32\1\33\40\32\1\133\3\32"+
    "\1\45\13\32\1\33\16\32\1\134\25\32\1\45\13\32"+
    "\1\33\26\32\1\135\15\32\1\45\13\32\1\33\37\32"+
    "\1\136\4\32\1\45\13\32\1\33\17\32\1\137\24\32"+
    "\1\45\13\32\1\33\26\32\1\140\15\32\1\45\13\32"+
    "\1\33\34\32\1\141\7\32\1\45\13\32\1\33\16\32"+
    "\1\142\25\32\1\45\13\32\1\33\37\32\1\143\4\32"+
    "\1\45\13\32\1\33\31\32\1\144\12\32\1\45\13\32"+
    "\1\33\41\32\1\145\2\32\1\45\13\32\1\33\16\32"+
    "\1\146\25\32\1\45\6\32\14\123\1\147\44\123\24\0"+
    "\1\150\77\0\1\151\60\0\1\152\43\0\1\153\75\0"+
    "\1\154\15\0\5\32\1\33\6\32\1\155\35\32\1\45"+
    "\13\32\1\33\22\32\1\156\21\32\1\45\13\32\1\33"+
    "\31\32\1\157\12\32\1\45\13\32\1\33\36\32\1\160"+
    "\5\32\1\45\13\32\1\33\20\32\1\161\23\32\1\45"+
    "\13\32\1\33\26\32\1\162\15\32\1\45\13\32\1\33"+
    "\35\32\1\163\6\32\1\45\13\32\1\33\33\32\1\164"+
    "\10\32\1\45\13\32\1\33\40\32\1\165\3\32\1\45"+
    "\13\32\1\166\44\32\1\45\13\32\1\33\33\32\1\167"+
    "\10\32\1\45\13\32\1\33\34\32\1\170\7\32\1\45"+
    "\13\32\1\33\26\32\1\171\15\32\1\45\13\32\1\33"+
    "\35\32\1\172\6\32\1\45\6\32\14\123\1\173\44\123"+
    "\54\0\1\174\30\0\1\175\101\0\1\176\41\0\1\177"+
    "\66\0\1\200\24\0\5\32\1\33\11\32\1\201\32\32"+
    "\1\45\13\32\1\202\44\32\1\45\13\32\1\33\32\32"+
    "\1\203\11\32\1\45\13\32\1\204\44\32\1\45\13\32"+
    "\1\33\22\32\1\205\21\32\1\45\13\32\1\33\37\32"+
    "\1\206\4\32\1\45\13\32\1\33\22\32\1\207\21\32"+
    "\1\45\13\32\1\33\32\32\1\210\11\32\1\45\13\32"+
    "\1\33\22\32\1\211\21\32\1\45\13\32\1\33\44\32"+
    "\1\45\1\32\1\212\11\32\1\33\33\32\1\213\10\32"+
    "\1\45\13\32\1\33\16\32\1\214\25\32\1\45\13\32"+
    "\1\33\26\32\1\215\15\32\1\45\6\32\14\123\1\173"+
    "\6\123\1\216\35\123\26\0\1\217\75\0\1\220\45\0"+
    "\1\221\64\0\1\222\65\0\1\223\17\0\5\32\1\33"+
    "\11\32\1\224\32\32\1\45\13\32\1\33\16\32\1\225"+
    "\25\32\1\45\13\32\1\226\44\32\1\45\13\32\1\33"+
    "\40\32\1\227\3\32\1\45\13\32\1\230\44\32\1\45"+
    "\13\32\1\33\22\32\1\231\21\32\1\45\13\32\1\33"+
    "\36\32\1\232\5\32\1\45\13\32\1\33\41\32\1\233"+
    "\2\32\1\45\13\32\1\33\44\32\1\45\1\32\1\234"+
    "\11\32\1\235\44\32\1\45\13\32\1\33\33\32\1\236"+
    "\10\32\1\45\6\32\43\0\1\237\56\0\1\240\17\0"+
    "\5\32\1\33\6\32\1\241\35\32\1\45\13\32\1\33"+
    "\36\32\1\242\5\32\1\45\13\32\1\33\20\32\1\243"+
    "\23\32\1\45\13\32\1\33\36\32\1\244\5\32\1\45"+
    "\13\32\1\33\37\32\1\245\4\32\1\45\13\32\1\33"+
    "\26\32\1\246\15\32\1\45\13\32\1\33\34\32\1\247"+
    "\7\32\1\45\13\32\1\250\44\32\1\45\1\32\1\251"+
    "\4\32\30\0\1\252\70\0\1\253\20\0\5\32\1\33"+
    "\11\32\1\254\32\32\1\45\13\32\1\255\44\32\1\45"+
    "\13\32\1\33\26\32\1\256\15\32\1\45\13\32\1\257"+
    "\44\32\1\45\13\32\1\33\16\32\1\260\25\32\1\45"+
    "\13\32\1\33\36\32\1\261\5\32\1\45\13\32\1\33"+
    "\35\32\1\262\6\32\1\45\13\32\1\33\20\32\1\263"+
    "\23\32\1\45\6\32\24\0\1\264\60\0\1\265\34\0"+
    "\5\32\1\33\11\32\1\266\32\32\1\45\13\32\1\33"+
    "\33\32\1\267\10\32\1\45\13\32\1\270\44\32\1\45"+
    "\13\32\1\33\26\32\1\271\15\32\1\45\13\32\1\33"+
    "\22\32\1\272\21\32\1\45\13\32\1\33\35\32\1\273"+
    "\6\32\1\45\6\32\26\0\1\274\75\0\1\275\15\0"+
    "\5\32\1\276\44\32\1\45\13\32\1\33\32\32\1\277"+
    "\11\32\1\45\13\32\1\33\17\32\1\300\24\32\1\45"+
    "\13\32\1\33\24\32\1\301\17\32\1\45\13\32\1\33"+
    "\22\32\1\302\21\32\1\45\6\32\34\0\1\303\24\0"+
    "\5\32\1\304\44\32\1\45\13\32\1\33\30\32\1\305"+
    "\13\32\1\45\13\32\1\33\40\32\1\306\3\32\1\45"+
    "\13\32\1\33\16\32\1\307\25\32\1\45\6\32\41\0"+
    "\1\310\17\0\5\32\1\33\22\32\1\311\21\32\1\45"+
    "\13\32\1\33\32\32\1\312\11\32\1\45\13\32\1\33"+
    "\20\32\1\313\23\32\1\45\6\32\40\0\1\314\20\0"+
    "\5\32\1\315\44\32\1\45\13\32\1\33\37\32\1\316"+
    "\4\32\1\45\13\32\1\33\26\32\1\317\15\32\1\45"+
    "\6\32\57\0\1\320\1\0\5\32\1\33\16\32\1\321"+
    "\25\32\1\45\13\32\1\33\33\32\1\322\10\32\1\45"+
    "\13\32\1\323\44\32\1\45\13\32\1\33\32\32\1\324"+
    "\11\32\1\45\13\32\1\325\44\32\1\45\6\32";

  private static int [] zzUnpacktrans() {
    int [] result = new int[8575];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\6\11\1\1\1\11\1\1\2\11"+
    "\5\1\4\11\1\0\1\11\12\0\1\1\25\0\1\1"+
    "\3\0\1\11\7\0\1\11\55\0\1\11\13\0\1\11"+
    "\1\0\1\11\11\0\1\11\1\0\2\11\1\0\1\11"+
    "\2\0\1\11\1\0\1\11\4\0\1\11\12\0\1\11"+
    "\4\0\1\11\1\0\1\11\10\0\1\11\4\0\2\11"+
    "\5\0\1\11\10\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[213];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    /*START-CODE*/
    private ArrayList<ReportErrorInterpreter> listError = new ArrayList();
  
    private void print(String token) {
        //System.out.println(" < " + yytext() + " > <Linea\"" + (yyline + 1) + "\">" + "<Columna\"" + (yycolumn+1) + "\">");
    }

    private void addError(){
        print("error");
        TypeIntreprete type = TypeIntreprete.LEXICON;
        Token toke = new Token(yyline + 1, yycolumn + 1, yytext());
        this.listError.add(new ReportErrorInterpreter(type, toke, ReportingConstants.ERROR_LEXEMA));
    }
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    /*FINAL-CODE*/


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexemaMySQLKV(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {   return new java_cup.runtime.Symbol(MySymSQLKV.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { //MANEJAR EL ERROR LEXICO
                        print("ERROR");
                        addError();
            }
          // fall through
          case 43: break;
          case 2:
            { /* print(); */
            }
          // fall through
          case 44: break;
          case 3:
            { print("\"ID_TRIVIA\""); return new Symbol(MySymSQLKV.ID_TRIVIA ,yyline,yycolumn,yytext());
            }
          // fall through
          case 45: break;
          case 4:
            { print("("); return new Symbol(MySymSQLKV.PARENTESIS_A,yyline,yycolumn,yytext());
            }
          // fall through
          case 46: break;
          case 5:
            { print(")"); return new Symbol(MySymSQLKV.PARENTESIS_C,yyline,yycolumn,yytext());
            }
          // fall through
          case 47: break;
          case 6:
            { print("*"); return new Symbol(MySymSQLKV.MULTIPLICAR,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 48: break;
          case 7:
            { print("+"); return new Symbol(MySymSQLKV.SUMAR,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 49: break;
          case 8:
            { print(","); return new Symbol(MySymSQLKV.COMA,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 50: break;
          case 9:
            { print("/"); return new Symbol(MySymSQLKV.DIVIDIR,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 51: break;
          case 10:
            { print("REAL_NUMEBERS"); return new Symbol(MySymSQLKV.REAL_NUMEBERS ,yyline,yycolumn,yytext());
            }
          // fall through
          case 52: break;
          case 11:
            { print(":"); return new Symbol(MySymSQLKV.COLNO,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 53: break;
          case 12:
            { print("<" ); return new Symbol(MySymSQLKV.OPEN ,yyline,yycolumn,yytext());
            }
          // fall through
          case 54: break;
          case 13:
            { print("="); return new Symbol(MySymSQLKV.EQUAL,yyline,yycolumn, (yytext()));
            }
          // fall through
          case 55: break;
          case 14:
            { print(">" ); return new Symbol(MySymSQLKV.CLOSE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 56: break;
          case 15:
            { print("["); return new Symbol(MySymSQLKV.BRACKETS_O ,yyline,yycolumn,yytext());
            }
          // fall through
          case 57: break;
          case 16:
            { print("]"); return new Symbol(MySymSQLKV.BRACKETS_C ,yyline,yycolumn,yytext());
            }
          // fall through
          case 58: break;
          case 17:
            { print("{"); return new Symbol(MySymSQLKV.KEYS_O ,yyline,yycolumn,yytext());
            }
          // fall through
          case 59: break;
          case 18:
            { print("}"); return new Symbol(MySymSQLKV.KEYS_C ,yyline,yycolumn,yytext());
            }
          // fall through
          case 60: break;
          case 19:
            { print("STRING"); return new Symbol(MySymSQLKV.STRING ,yyline,yycolumn,yytext());
            }
          // fall through
          case 61: break;
          case 20:
            { print("<" ); return new Symbol(MySymSQLKV.POR ,yyline,yycolumn,yytext());
            }
          // fall through
          case 62: break;
          case 21:
            { print("\"ID\""); return new Symbol(MySymSQLKV.ID ,yyline,yycolumn,yytext());
            }
          // fall through
          case 63: break;
          case 22:
            { print("\"TEMA\""); return new Symbol(MySymSQLKV.TEMA ,yyline,yycolumn,yytext());
            }
          // fall through
          case 64: break;
          case 23:
            { print("\"CLASE\""); return new Symbol(MySymSQLKV.CLASE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 65: break;
          case 24:
            { print("\"FILAS\""); return new Symbol(MySymSQLKV.FILAS ,yyline,yycolumn,yytext());
            }
          // fall through
          case 66: break;
          case 25:
            { /*COMENTARIO*/
            }
          // fall through
          case 67: break;
          case 26:
            { print("<" ); return new Symbol(MySymSQLKV.FILTRAR ,yyline,yycolumn,yytext());
            }
          // fall through
          case 68: break;
          case 27:
            { print("<" ); return new Symbol(MySymSQLKV.REPORTE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 69: break;
          case 28:
            { print("<" ); return new Symbol(MySymSQLKV.USUARIO ,yyline,yycolumn,yytext());
            }
          // fall through
          case 70: break;
          case 29:
            { print("\"INDICE\""); return new Symbol(MySymSQLKV.INDICE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 71: break;
          case 30:
            { print("\"NOMBRE\""); return new Symbol(MySymSQLKV.NAME_PERSONAL_USER ,yyline,yycolumn,yytext());
            }
          // fall through
          case 72: break;
          case 31:
            { print("\"TRIVIA\""); return new Symbol(MySymSQLKV.TRIVIA ,yyline,yycolumn,yytext());
            }
          // fall through
          case 73: break;
          case 32:
            { print("\"USUARIO\""); return new Symbol(MySymSQLKV.NAME_USER ,yyline,yycolumn,yytext());
            }
          // fall through
          case 74: break;
          case 33:
            { print("\"COLUMNAS\""); return new Symbol(MySymSQLKV.COLUMNAS ,yyline,yycolumn,yytext());
            }
          // fall through
          case 75: break;
          case 34:
            { print("\"OPCIONES\""); return new Symbol(MySymSQLKV.OPCIONES ,yyline,yycolumn,yytext());
            }
          // fall through
          case 76: break;
          case 35:
            { print("\"RESPUESTA\""); return new Symbol(MySymSQLKV.RESPUESTA ,yyline,yycolumn,yytext());
            }
          // fall through
          case 77: break;
          case 36:
            { print("<" ); return new Symbol(MySymSQLKV.SELECCIONAR ,yyline,yycolumn,yytext());
            }
          // fall through
          case 78: break;
          case 37:
            { print("DATE"); return new Symbol(MySymSQLKV.STRING_DATE,yyline,yycolumn,yytext());
            }
          // fall through
          case 79: break;
          case 38:
            { print("INSTITUCION"); return new Symbol(MySymSQLKV.INSTITUCION ,yyline,yycolumn,yytext());
            }
          // fall through
          case 80: break;
          case 39:
            { print("\"TEXTO_VISIBLE\""); return new Symbol(MySymSQLKV.TEXTO_VISIBLE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 81: break;
          case 40:
            { print("FECHA_CREACION"); return new Symbol(MySymSQLKV.DATE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 82: break;
          case 41:
            { print("\"TIEMPO_PREGUNTA\""); return new Symbol(MySymSQLKV.TIEMPO_PREGUNTA ,yyline,yycolumn,yytext());
            }
          // fall through
          case 83: break;
          case 42:
            { print("\"USUARIO_CREACION\""); return new Symbol(MySymSQLKV.USUARIO_CREACION ,yyline,yycolumn,yytext());
            }
          // fall through
          case 84: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
