
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package LexicalAndSyntacticAnalyzer.jflexandcupDataBaseQuizAttempt;

import java_cup.runtime.*;
import java.util.ArrayList;
import LexicalAndSyntacticAnalyzer.analyzer.Token;
import reports.*;
import LexicalAndSyntacticAnalyzer.dataAnalyzer.*;
import LexicalAndSyntacticAnalyzer.dataAnalyzer.RequestAnalyzer;
import LexicalAndSyntacticAnalyzer.ListRequests;
import com.cunoc.webxsonquiz.data.servert.QuizAttempt;
import LexicalAndSyntacticAnalyzer.objectAnalyzer.ConverterAnalyzerToObjetQuizAttempt;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MyParserDataQuizAttempt extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return MySymDataBaseQuizAttempt.class;
}

  /** Default constructor. */
  @Deprecated
  public MyParserDataQuizAttempt() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MyParserDataQuizAttempt(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MyParserDataQuizAttempt(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\004\000\002\003\003\000\002\003" +
    "\004\000\002\002\004\000\002\002\003\000\002\004\005" +
    "\000\002\004\003\000\002\012\003\000\002\012\002\000" +
    "\002\011\005\000\002\011\003\000\002\005\005\000\002" +
    "\010\005\000\002\010\003\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\003\000" +
    "\002\006\002\000\002\013\003\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\003\000\002\014\006\000\002\015\003" +
    "\000\002\015\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\065\000\010\003\006\016\012\020\011\001\002\000" +
    "\010\002\ufffb\016\ufffb\020\ufffb\001\002\000\014\002\ufff7" +
    "\016\ufff7\017\ufff7\020\ufff7\023\066\001\002\000\006\016" +
    "\012\020\011\001\002\000\010\002\ufffd\016\ufffd\020\ufffd" +
    "\001\002\000\010\002\000\016\012\020\011\001\002\000" +
    "\012\024\020\025\025\026\023\027\024\001\002\000\006" +
    "\017\ufff9\020\011\001\002\000\004\002\014\001\002\000" +
    "\004\002\001\001\002\000\004\017\ufffa\001\002\000\004" +
    "\017\017\001\002\000\010\002\ufffc\016\ufffc\020\ufffc\001" +
    "\002\000\012\003\026\021\uffeb\022\027\023\uffeb\001\002" +
    "\000\006\021\061\023\060\001\002\000\006\021\ufff4\023" +
    "\ufff4\001\002\000\012\003\026\021\uffeb\022\027\023\uffeb" +
    "\001\002\000\012\003\026\021\uffeb\022\027\023\uffeb\001" +
    "\002\000\012\003\026\021\uffeb\022\027\023\uffeb\001\002" +
    "\000\006\021\uffec\023\uffec\001\002\000\012\004\032\012" +
    "\035\014\034\015\031\001\002\000\006\021\ufff1\023\ufff1" +
    "\001\002\000\006\021\uffed\023\uffed\001\002\000\006\021" +
    "\uffef\023\uffef\001\002\000\006\021\uffee\023\uffee\001\002" +
    "\000\022\005\uffe4\006\uffe4\007\uffe4\010\uffe4\012\053\013" +
    "\uffe4\021\uffe4\023\uffe4\001\002\000\006\012\035\014\034" +
    "\001\002\000\016\005\041\006\042\007\037\010\040\021" +
    "\uffea\023\uffea\001\002\000\006\012\035\014\034\001\002" +
    "\000\006\012\035\014\034\001\002\000\006\012\035\014" +
    "\034\001\002\000\006\012\035\014\034\001\002\000\020" +
    "\005\uffe8\006\uffe8\007\037\010\040\013\uffe8\021\uffe8\023" +
    "\uffe8\001\002\000\020\005\uffe9\006\uffe9\007\037\010\040" +
    "\013\uffe9\021\uffe9\023\uffe9\001\002\000\020\005\uffe6\006" +
    "\uffe6\007\uffe6\010\uffe6\013\uffe6\021\uffe6\023\uffe6\001\002" +
    "\000\020\005\uffe7\006\uffe7\007\uffe7\010\uffe7\013\uffe7\021" +
    "\uffe7\023\uffe7\001\002\000\014\005\041\006\042\007\037" +
    "\010\040\013\050\001\002\000\024\005\uffe2\006\uffe2\007" +
    "\uffe2\010\uffe2\012\035\013\uffe2\014\034\021\uffe2\023\uffe2" +
    "\001\002\000\020\005\uffe5\006\uffe5\007\uffe5\010\uffe5\013" +
    "\uffe5\021\uffe5\023\uffe5\001\002\000\020\005\uffe1\006\uffe1" +
    "\007\uffe1\010\uffe1\013\uffe1\021\uffe1\023\uffe1\001\002\000" +
    "\006\012\035\014\034\001\002\000\014\005\041\006\042" +
    "\007\037\010\040\013\055\001\002\000\020\005\uffe3\006" +
    "\uffe3\007\uffe3\010\uffe3\013\uffe3\021\uffe3\023\uffe3\001\002" +
    "\000\006\021\ufff0\023\ufff0\001\002\000\006\021\ufff2\023" +
    "\ufff2\001\002\000\012\024\020\025\025\026\023\027\024" +
    "\001\002\000\014\002\ufff6\016\ufff6\017\ufff6\020\ufff6\023" +
    "\ufff6\001\002\000\006\021\ufff5\023\ufff5\001\002\000\006" +
    "\021\ufff3\023\ufff3\001\002\000\010\002\ufffe\016\ufffe\020" +
    "\ufffe\001\002\000\010\002\uffff\016\012\020\011\001\002" +
    "\000\004\020\011\001\002\000\012\002\ufff8\016\ufff8\017" +
    "\ufff8\020\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\065\000\014\002\007\003\012\004\006\005\004\011" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\002\064\004\006\005\004\011\003\001\001\000\002\001" +
    "\001\000\010\004\063\005\004\011\003\001\001\000\006" +
    "\007\021\010\020\001\001\000\010\005\004\011\014\012" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\056\001\001\000\004\006\055\001\001\000\004\006" +
    "\027\001\001\000\002\001\001\000\006\013\032\014\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\046" +
    "\001\001\000\002\001\001\000\004\014\045\001\001\000" +
    "\004\014\044\001\001\000\004\014\043\001\001\000\004" +
    "\014\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\050\001\001" +
    "\000\004\014\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\063\005\004\011" +
    "\003\001\001\000\006\005\004\011\066\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MyParserDataQuizAttempt$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MyParserDataQuizAttempt$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MyParserDataQuizAttempt$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




private ArrayList<ReportErrorInterpreter> listError = new ArrayList();
private ArrayList<DataAnalyzer> dataStack = new ArrayList();
private ArrayList<RequestAnalyzer> listRquest = new ArrayList();
private ArrayList<QuizAttempt> listQuizAttempt = new ArrayList();



	  public MyParserDataQuizAttempt(LexemaQuizAttempt lexer) {
        super(lexer);
    }

    //erorr
    public void syntax_error(Symbol cur_token) {
        String nameTerminal = symbl_name_from_id(this.cur_token.sym);
        int numberTerminal = this.cur_token.sym;
        ///codigo para el objeto
        TypeIntreprete type = TypeIntreprete.SYNTACTIC;
        int line = cur_token.left+1;
        int columna = cur_token.right +1;
        String lexema = (this.cur_token.value!=null)? this.cur_token.value.toString() : "Token no existe";
        Token token = new Token(line, columna, lexema);
        this.listError.add(new ReportErrorInterpreter(type, token, (new InterpretSyntaticError(this.stack)).descriptionParser(this)));
    }

    //Returnar el listado de errores
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    //Returnar el listado de Rquest
    public ArrayList<RequestAnalyzer> getListRquest(){
      return this.listRquest;
    }

    //Returnar el listado de Rquest
    public ArrayList<QuizAttempt> getListQuizAttempt(){
      return this.listQuizAttempt;
    }

    /**
     * ***END CODE*******
     */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MyParserDataQuizAttempt$actions {
  private final MyParserDataQuizAttempt parser;

  /** Constructor */
  CUP$MyParserDataQuizAttempt$actions(MyParserDataQuizAttempt parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MyParserDataQuizAttempt$do_action_part00000000(
    int                        CUP$MyParserDataQuizAttempt$act_num,
    java_cup.runtime.lr_parser CUP$MyParserDataQuizAttempt$parser,
    java.util.Stack            CUP$MyParserDataQuizAttempt$stack,
    int                        CUP$MyParserDataQuizAttempt$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MyParserDataQuizAttempt$result;

      /* select the action based on the action number */
      switch (CUP$MyParserDataQuizAttempt$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-1)).value;
		RESULT = start_val;
              CUP$MyParserDataQuizAttempt$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MyParserDataQuizAttempt$parser.done_parsing();
          return CUP$MyParserDataQuizAttempt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= bucle_inicio 
            {
              Object RESULT =null;

              CUP$MyParserDataQuizAttempt$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), RESULT);
            }
          return CUP$MyParserDataQuizAttempt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error bucle_inicio 
            {
              Object RESULT =null;

              CUP$MyParserDataQuizAttempt$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), RESULT);
            }
          return CUP$MyParserDataQuizAttempt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bucle_inicio ::= bucle_inicio json 
            {
              Object RESULT =null;

              CUP$MyParserDataQuizAttempt$result = parser.getSymbolFactory().newSymbol("bucle_inicio",0, ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), RESULT);
            }
          return CUP$MyParserDataQuizAttempt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bucle_inicio ::= json 
            {
              Object RESULT =null;

              CUP$MyParserDataQuizAttempt$result = parser.getSymbolFactory().newSymbol("bucle_inicio",0, ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), RESULT);
            }
          return CUP$MyParserDataQuizAttempt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // json ::= BRACKETS_O empty_list BRACKETS_C 
            {
              Object RESULT =null;

              CUP$MyParserDataQuizAttempt$result = parser.getSymbolFactory().newSymbol("json",2, ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), RESULT);
            }
          return CUP$MyParserDataQuizAttempt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // json ::= secuenci_json 
            {
              Object RESULT =null;

              CUP$MyParserDataQuizAttempt$result = parser.getSymbolFactory().newSymbol("json",2, ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), RESULT);
            }
          return CUP$MyParserDataQuizAttempt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // empty_list ::= secuenci_json 
            {
              Object RESULT =null;

              CUP$MyParserDataQuizAttempt$result = parser.getSymbolFactory().newSymbol("empty_list",8, ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), RESULT);
            }
          return CUP$MyParserDataQuizAttempt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // empty_list ::= 
            {
              Object RESULT =null;

              CUP$MyParserDataQuizAttempt$result = parser.getSymbolFactory().newSymbol("empty_list",8, ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), RESULT);
            }
          return CUP$MyParserDataQuizAttempt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // secuenci_json ::= obj_json COMA secuenci_json 
            {
              Object RESULT =null;

              CUP$MyParserDataQuizAttempt$result = parser.getSymbolFactory().newSymbol("secuenci_json",7, ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), RESULT);
            }
          return CUP$MyParserDataQuizAttempt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // secuenci_json ::= obj_json 
            {
              Object RESULT =null;

              CUP$MyParserDataQuizAttempt$result = parser.getSymbolFactory().newSymbol("secuenci_json",7, ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), RESULT);
            }
          return CUP$MyParserDataQuizAttempt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // obj_json ::= KEYS_O datas_user KEYS_C 
            {
              Object RESULT =null;
		
              listQuizAttempt.add(new ConverterAnalyzerToObjetQuizAttempt().newQuizAttempt(new RequestAnalyzer(dataStack, ListRequests.QUIZATTEMPT)));
  
              CUP$MyParserDataQuizAttempt$result = parser.getSymbolFactory().newSymbol("obj_json",3, ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), RESULT);
            }
          return CUP$MyParserDataQuizAttempt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // datas_user ::= datas_user COMA data_user 
            {
              Object RESULT =null;

              CUP$MyParserDataQuizAttempt$result = parser.getSymbolFactory().newSymbol("datas_user",6, ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), RESULT);
            }
          return CUP$MyParserDataQuizAttempt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // datas_user ::= data_user 
            {
              Object RESULT =null;

              CUP$MyParserDataQuizAttempt$result = parser.getSymbolFactory().newSymbol("datas_user",6, ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), RESULT);
            }
          return CUP$MyParserDataQuizAttempt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // data_user ::= ID_USER data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataQuizAttempt$stack.peek()).value;
		if(a!=null)dataStack.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.ID_USER,a.toString()));
              CUP$MyParserDataQuizAttempt$result = parser.getSymbolFactory().newSymbol("data_user",5, ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), RESULT);
            }
          return CUP$MyParserDataQuizAttempt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // data_user ::= RESPONSE_TIME data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataQuizAttempt$stack.peek()).value;
		if(a!=null)dataStack.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.RESPONSE_TIME,a.toString()));
              CUP$MyParserDataQuizAttempt$result = parser.getSymbolFactory().newSymbol("data_user",5, ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), RESULT);
            }
          return CUP$MyParserDataQuizAttempt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // data_user ::= ID_TRIVIA data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataQuizAttempt$stack.peek()).value;
		if(a!=null)dataStack.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.ID_TRIVIA,a.toString()));
              CUP$MyParserDataQuizAttempt$result = parser.getSymbolFactory().newSymbol("data_user",5, ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), RESULT);
            }
          return CUP$MyParserDataQuizAttempt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // data_user ::= SCORE data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataQuizAttempt$stack.peek()).value;
		if(a!=null)dataStack.add(new DataAnalyzer(new Token(cur_token.left+1,cur_token.right +1,a.toString()),ListTypeData.SCORE,a.toString()));
              CUP$MyParserDataQuizAttempt$result = parser.getSymbolFactory().newSymbol("data_user",5, ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), RESULT);
            }
          return CUP$MyParserDataQuizAttempt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // data ::= COLNO STRING 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$MyParserDataQuizAttempt$stack.peek()).value;
		RESULT = a;
              CUP$MyParserDataQuizAttempt$result = parser.getSymbolFactory().newSymbol("data",4, ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), RESULT);
            }
          return CUP$MyParserDataQuizAttempt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // data ::= COLNO inico_opereacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataQuizAttempt$stack.peek()).value;
		RESULT = a;
              CUP$MyParserDataQuizAttempt$result = parser.getSymbolFactory().newSymbol("data",4, ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), RESULT);
            }
          return CUP$MyParserDataQuizAttempt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // data ::= COLNO STRING_DATE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$MyParserDataQuizAttempt$stack.peek()).value;
		RESULT = a;
              CUP$MyParserDataQuizAttempt$result = parser.getSymbolFactory().newSymbol("data",4, ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), RESULT);
            }
          return CUP$MyParserDataQuizAttempt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // data ::= error 
            {
              Object RESULT =null;

              CUP$MyParserDataQuizAttempt$result = parser.getSymbolFactory().newSymbol("data",4, ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), RESULT);
            }
          return CUP$MyParserDataQuizAttempt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // data ::= 
            {
              Object RESULT =null;

              CUP$MyParserDataQuizAttempt$result = parser.getSymbolFactory().newSymbol("data",4, ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), RESULT);
            }
          return CUP$MyParserDataQuizAttempt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // inico_opereacion ::= operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataQuizAttempt$stack.peek()).value;
		
    //////////////////////////////////////////
		Double aDouble = 0.0;
    if (a!=null) {
        aDouble =   Double.valueOf(a.toString());
        RESULT = aDouble;
    }else{
      RESULT = aDouble;
    }
    //////////////////////////////////////////
    
              CUP$MyParserDataQuizAttempt$result = parser.getSymbolFactory().newSymbol("inico_opereacion",9, ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), RESULT);
            }
          return CUP$MyParserDataQuizAttempt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operacion ::= operacion SUMAR operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataQuizAttempt$stack.peek()).value;
		
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double resultDouble = aDouble + bDouble;
      RESULT = resultDouble;
    }else{
      RESULT = aDouble;
    }
    /////////////////////////////////////////////
    
              CUP$MyParserDataQuizAttempt$result = parser.getSymbolFactory().newSymbol("operacion",10, ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), RESULT);
            }
          return CUP$MyParserDataQuizAttempt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operacion ::= operacion RESTAR operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataQuizAttempt$stack.peek()).value;
		
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double resultDouble = aDouble - bDouble;
      RESULT = resultDouble;
    }else{
      RESULT = aDouble;
    }
    /////////////////////////////////////////////

    
              CUP$MyParserDataQuizAttempt$result = parser.getSymbolFactory().newSymbol("operacion",10, ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), RESULT);
            }
          return CUP$MyParserDataQuizAttempt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operacion ::= operacion DIVIDIR operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataQuizAttempt$stack.peek()).value;
		
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      if (bDouble>0) {
        Double result = ( bDouble/ bDouble);
        RESULT = result;
      }else{
        /// manejar un error de sintasis
        RESULT = aDouble;// si es 15/0
      }
    }else{
      RESULT = aDouble;
    }
    /////////////////////////////////////////////

    
              CUP$MyParserDataQuizAttempt$result = parser.getSymbolFactory().newSymbol("operacion",10, ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), RESULT);
            }
          return CUP$MyParserDataQuizAttempt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operacion ::= operacion MULTIPLICAR operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataQuizAttempt$stack.peek()).value;
		
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double result = aDouble * bDouble;
      RESULT = result;
    }else{
      RESULT = aDouble;
    }
    /////////////////////////////////////////////

    
              CUP$MyParserDataQuizAttempt$result = parser.getSymbolFactory().newSymbol("operacion",10, ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), RESULT);
            }
          return CUP$MyParserDataQuizAttempt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operacion ::= PARENTESIS_A operacion parente 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataQuizAttempt$stack.peek()).value;
		
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double result = aDouble * bDouble;
      RESULT = result;
    }else{
      RESULT = a;
    }
    /////////////////////////////////////////////
    
              CUP$MyParserDataQuizAttempt$result = parser.getSymbolFactory().newSymbol("operacion",10, ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), RESULT);
            }
          return CUP$MyParserDataQuizAttempt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operacion ::= REAL_NUMEBERS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$MyParserDataQuizAttempt$stack.peek()).value;
		RESULT = a;
              CUP$MyParserDataQuizAttempt$result = parser.getSymbolFactory().newSymbol("operacion",10, ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), RESULT);
            }
          return CUP$MyParserDataQuizAttempt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operacion ::= REAL_NUMEBERS PARENTESIS_A operacion PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-1)).value;
		
    /////////////////////////////////////////////
    Double aDouble = 0.0;		
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      Double result = aDouble * bDouble;
      RESULT = result;
    }else{
      RESULT = a;
    }
    /////////////////////////////////////////////
    
              CUP$MyParserDataQuizAttempt$result = parser.getSymbolFactory().newSymbol("operacion",10, ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-3)), ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), RESULT);
            }
          return CUP$MyParserDataQuizAttempt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parente ::= PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$MyParserDataQuizAttempt$result = parser.getSymbolFactory().newSymbol("parente",11, ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), RESULT);
            }
          return CUP$MyParserDataQuizAttempt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parente ::= PARENTESIS_C operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserDataQuizAttempt$stack.peek()).value;
		RESULT = a;
              CUP$MyParserDataQuizAttempt$result = parser.getSymbolFactory().newSymbol("parente",11, ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.elementAt(CUP$MyParserDataQuizAttempt$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserDataQuizAttempt$stack.peek()), RESULT);
            }
          return CUP$MyParserDataQuizAttempt$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MyParserDataQuizAttempt$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MyParserDataQuizAttempt$do_action(
    int                        CUP$MyParserDataQuizAttempt$act_num,
    java_cup.runtime.lr_parser CUP$MyParserDataQuizAttempt$parser,
    java.util.Stack            CUP$MyParserDataQuizAttempt$stack,
    int                        CUP$MyParserDataQuizAttempt$top)
    throws java.lang.Exception
    {
              return CUP$MyParserDataQuizAttempt$do_action_part00000000(
                               CUP$MyParserDataQuizAttempt$act_num,
                               CUP$MyParserDataQuizAttempt$parser,
                               CUP$MyParserDataQuizAttempt$stack,
                               CUP$MyParserDataQuizAttempt$top);
    }
}

}
