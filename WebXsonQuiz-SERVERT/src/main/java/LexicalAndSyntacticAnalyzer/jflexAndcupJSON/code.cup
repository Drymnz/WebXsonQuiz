package LexicalAndSyntacticAnalyzer.jflexAndcupJSON;

import java_cup.runtime.*;
import java.util.ArrayList;

import LexicalAndSyntacticAnalyzer.analyzer.Token;
import reports.*;
import LexicalAndSyntacticAnalyzer.dataAnalyzer.*;
import LexicalAndSyntacticAnalyzer.dataAnalyzer.RequestAnalyzer;
import LexicalAndSyntacticAnalyzer.ListRequests;

/**
     * ***STAR CODE*******
     */
    parser code {:

private ArrayList<ReportErrorInterpreter> listError = new ArrayList();
private ArrayList<DataAnalyzer> dataStack = new ArrayList();
private ArrayList<RequestAnalyzer> listRquest = new ArrayList();


	  public MyParserLoginDataBaseUser(LexemaJSONUser lexer) {
        super(lexer);
    }

    //erorr
    public void syntax_error(Symbol cur_token) {
        String nameTerminal = symbl_name_from_id(this.cur_token.sym);
        int numberTerminal = this.cur_token.sym;
        ///codigo para el objeto
        TypeIntreprete type = TypeIntreprete.SYNTACTIC;
        Token token = getMyToken();
        System.out.println(token.toString());
        this.listError.add(new ReportErrorInterpreter(type, token, ReportingConstants.ERROR_SICTATICO));
    }

    // get current token 
    private Token getMyToken(){
      int line = cur_token.left+1;
      int columna = cur_token.right +1;
      String lexema = this.cur_token.value.toString();
      return new Token(line, columna, lexema);
    }

    //Returnar el listado de errores
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    //Returnar el listado de Rquest
    public ArrayList<RequestAnalyzer> getListRquest(){
      return this.listRquest;
    }

    /**
     * ***END CODE*******
     */
:}

/* Terminales */
/*sxon*/
terminal String STRING;
/*SIMBOLOS DE OPERACION*/
/*AGRUPACION*/
terminal BRACKETS_O,BRACKETS_C;
terminal KEYS_O,KEYS_C;
//tipos de solicitud
terminal COLNO,COMA,STRING_DATE;
terminal NAME_USER,PASS_USER,NAME_PERSONAL_USER,INSTITUCION,DATE;
/* No terminales */
//inicio
non terminal bucle_inicio;
non terminal inicio;
//solicitud
non terminal json;
non terminal obj_json,data,data_user,datas_user;
non terminal secuenci_json;
/* Gram√°tica */
start with inicio;
/******operaciones matematicas*****/
inicio ::= bucle_inicio
    | error bucle_inicio
    ;

bucle_inicio 
  ::= bucle_inicio json
  |json
  ;

json::=
  BRACKETS_O secuenci_json BRACKETS_C
  |secuenci_json
  ;

secuenci_json 
  ::=obj_json COMA secuenci_json
  |obj_json
  ;  

obj_json ::=
  KEYS_O datas_user KEYS_C   
  {:
  listRquest.add(new RequestAnalyzer(dataStack, ListRequests.NEW_USER));
  dataStack = new ArrayList();
  :}
  ;

datas_user 
  ::= datas_user COMA  data_user
  |data_user
  ;

data_user::=
  NAME_USER data:a 
   {:if(a!=null)dataStack.add(new DataAnalyzer(getMyToken(),ListTypeData.USUARIO,a.toString()));:}
  |PASS_USER data:a 
   {:if(a!=null)dataStack.add(new DataAnalyzer(getMyToken(),ListTypeData.PASSWORD,a.toString()));:}
  |NAME_PERSONAL_USER data:a
   {:if(a!=null)dataStack.add(new DataAnalyzer(getMyToken(),ListTypeData.NAME,a.toString()));:}
  |INSTITUCION data:a
   {:if(a!=null)dataStack.add(new DataAnalyzer(getMyToken(),ListTypeData.INSTITUTION,a.toString()));:}
  |DATE data:a
  {:if(a!=null)dataStack.add(new DataAnalyzer(getMyToken(),ListTypeData.DATE,a.toString()));:}
  | error
  | 
  ;

data ::=COLNO STRING:a {:RESULT = a;:}
  | COLNO STRING_DATE:a {:RESULT = a;:}
  | error
  | 
  ;
