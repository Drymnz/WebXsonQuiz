
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package LexicalAndSyntacticAnalyzer.jflexAndcupJSON;

import java_cup.runtime.*;
import java.util.ArrayList;
import LexicalAndSyntacticAnalyzer.analyzer.Token;
import reports.*;
import LexicalAndSyntacticAnalyzer.dataAnalyzer.*;
import LexicalAndSyntacticAnalyzer.dataAnalyzer.RequestAnalyzer;
import LexicalAndSyntacticAnalyzer.ListRequests;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MyParserLoginDataBaseUser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return MySymLoginDataBaseUser.class;
}

  /** Default constructor. */
  @Deprecated
  public MyParserLoginDataBaseUser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MyParserLoginDataBaseUser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MyParserLoginDataBaseUser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\025\000\002\002\004\000\002\003\003\000\002\003" +
    "\004\000\002\002\004\000\002\002\003\000\002\004\006" +
    "\000\002\004\003\000\002\005\005\000\002\010\005\000" +
    "\002\010\003\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\003\000\002\007\002\000\002\006\004\000\002\006\004" +
    "\000\002\006\003\000\002\006\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\042\000\010\003\005\005\011\007\010\001\002\000" +
    "\010\002\ufffb\005\ufffb\007\ufffb\001\002\000\006\005\011" +
    "\007\010\001\002\000\010\002\ufffd\005\ufffd\007\ufffd\001" +
    "\002\000\010\002\000\005\011\007\010\001\002\000\022" +
    "\003\021\010\ufff1\012\ufff1\014\026\015\017\016\025\017" +
    "\024\020\023\001\002\000\004\007\010\001\002\000\004" +
    "\002\013\001\002\000\004\002\001\001\002\000\004\012" +
    "\015\001\002\000\004\006\016\001\002\000\010\002\ufffc" +
    "\005\ufffc\007\ufffc\001\002\000\012\003\030\010\uffed\011" +
    "\027\012\uffed\001\002\000\006\010\040\012\037\001\002" +
    "\000\006\010\ufff2\012\ufff2\001\002\000\006\010\ufff8\012" +
    "\ufff8\001\002\000\012\003\030\010\uffed\011\027\012\uffed" +
    "\001\002\000\012\003\030\010\uffed\011\027\012\uffed\001" +
    "\002\000\012\003\030\010\uffed\011\027\012\uffed\001\002" +
    "\000\012\003\030\010\uffed\011\027\012\uffed\001\002\000" +
    "\006\004\033\013\032\001\002\000\006\010\uffee\012\uffee" +
    "\001\002\000\006\010\ufff7\012\ufff7\001\002\000\006\010" +
    "\uffef\012\uffef\001\002\000\006\010\ufff0\012\ufff0\001\002" +
    "\000\006\010\ufff5\012\ufff5\001\002\000\006\010\ufff4\012" +
    "\ufff4\001\002\000\006\010\ufff3\012\ufff3\001\002\000\022" +
    "\003\021\010\ufff1\012\ufff1\014\026\015\017\016\025\017" +
    "\024\020\023\001\002\000\012\002\ufffa\005\ufffa\007\ufffa" +
    "\012\ufffa\001\002\000\006\010\ufff9\012\ufff9\001\002\000" +
    "\006\010\ufff6\012\ufff6\001\002\000\010\002\ufffe\005\ufffe" +
    "\007\ufffe\001\002\000\010\002\uffff\005\011\007\010\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\042\000\012\002\006\003\011\004\005\005\003\001" +
    "\001\000\002\001\001\000\010\002\043\004\005\005\003" +
    "\001\001\000\002\001\001\000\006\004\042\005\003\001" +
    "\001\000\006\007\021\010\017\001\001\000\004\005\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\035\001\001\000\004\006\034\001\001" +
    "\000\004\006\033\001\001\000\004\006\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\042\005\003\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MyParserLoginDataBaseUser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MyParserLoginDataBaseUser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MyParserLoginDataBaseUser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




private ArrayList<ReportErrorInterpreter> listError = new ArrayList();
private ArrayList<DataAnalyzer> dataStack = new ArrayList();
private ArrayList<RequestAnalyzer> listRquest = new ArrayList();


	  public MyParserLoginDataBaseUser(LexemaJSONUser lexer) {
        super(lexer);
    }

    //erorr
    public void syntax_error(Symbol cur_token) {
        String nameTerminal = symbl_name_from_id(this.cur_token.sym);
        int numberTerminal = this.cur_token.sym;
        ///codigo para el objeto
        TypeIntreprete type = TypeIntreprete.SYNTACTIC;
        Token token = getMyToken();
        System.out.println(token.toString());
        this.listError.add(new ReportErrorInterpreter(type, token, ReportingConstants.ERROR_SICTATICO));
    }

    // get current token 
    private Token getMyToken(){
      int line = cur_token.left+1;
      int columna = cur_token.right +1;
      String lexema = this.cur_token.value.toString();
      return new Token(line, columna, lexema);
    }

    //Returnar el listado de errores
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    //Returnar el listado de Rquest
    public ArrayList<RequestAnalyzer> getListRquest(){
      return this.listRquest;
    }

    /**
     * ***END CODE*******
     */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MyParserLoginDataBaseUser$actions {
  private final MyParserLoginDataBaseUser parser;

  /** Constructor */
  CUP$MyParserLoginDataBaseUser$actions(MyParserLoginDataBaseUser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MyParserLoginDataBaseUser$do_action_part00000000(
    int                        CUP$MyParserLoginDataBaseUser$act_num,
    java_cup.runtime.lr_parser CUP$MyParserLoginDataBaseUser$parser,
    java.util.Stack            CUP$MyParserLoginDataBaseUser$stack,
    int                        CUP$MyParserLoginDataBaseUser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MyParserLoginDataBaseUser$result;

      /* select the action based on the action number */
      switch (CUP$MyParserLoginDataBaseUser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.elementAt(CUP$MyParserLoginDataBaseUser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.elementAt(CUP$MyParserLoginDataBaseUser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MyParserLoginDataBaseUser$stack.elementAt(CUP$MyParserLoginDataBaseUser$top-1)).value;
		RESULT = start_val;
              CUP$MyParserLoginDataBaseUser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.elementAt(CUP$MyParserLoginDataBaseUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MyParserLoginDataBaseUser$parser.done_parsing();
          return CUP$MyParserLoginDataBaseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= bucle_inicio 
            {
              Object RESULT =null;

              CUP$MyParserLoginDataBaseUser$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginDataBaseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error bucle_inicio 
            {
              Object RESULT =null;

              CUP$MyParserLoginDataBaseUser$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.elementAt(CUP$MyParserLoginDataBaseUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginDataBaseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bucle_inicio ::= bucle_inicio json 
            {
              Object RESULT =null;

              CUP$MyParserLoginDataBaseUser$result = parser.getSymbolFactory().newSymbol("bucle_inicio",0, ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.elementAt(CUP$MyParserLoginDataBaseUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginDataBaseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bucle_inicio ::= json 
            {
              Object RESULT =null;

              CUP$MyParserLoginDataBaseUser$result = parser.getSymbolFactory().newSymbol("bucle_inicio",0, ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginDataBaseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // json ::= BRACKETS_O obj_json COMA BRACKETS_C 
            {
              Object RESULT =null;

              CUP$MyParserLoginDataBaseUser$result = parser.getSymbolFactory().newSymbol("json",2, ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.elementAt(CUP$MyParserLoginDataBaseUser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginDataBaseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // json ::= obj_json 
            {
              Object RESULT =null;

              CUP$MyParserLoginDataBaseUser$result = parser.getSymbolFactory().newSymbol("json",2, ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginDataBaseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // obj_json ::= KEYS_O datas_user KEYS_C 
            {
              Object RESULT =null;
		
  listRquest.add(new RequestAnalyzer(dataStack, ListRequests.NEW_USER));
  dataStack = new ArrayList();
  
              CUP$MyParserLoginDataBaseUser$result = parser.getSymbolFactory().newSymbol("obj_json",3, ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.elementAt(CUP$MyParserLoginDataBaseUser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginDataBaseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // datas_user ::= datas_user COMA data_user 
            {
              Object RESULT =null;

              CUP$MyParserLoginDataBaseUser$result = parser.getSymbolFactory().newSymbol("datas_user",6, ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.elementAt(CUP$MyParserLoginDataBaseUser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginDataBaseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // datas_user ::= data_user 
            {
              Object RESULT =null;

              CUP$MyParserLoginDataBaseUser$result = parser.getSymbolFactory().newSymbol("datas_user",6, ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginDataBaseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // data_user ::= NAME_USER data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserLoginDataBaseUser$stack.peek()).value;
		if(a!=null)dataStack.add(new DataAnalyzer(getMyToken(),ListTypeData.USUARIO,a.toString()));
              CUP$MyParserLoginDataBaseUser$result = parser.getSymbolFactory().newSymbol("data_user",5, ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.elementAt(CUP$MyParserLoginDataBaseUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginDataBaseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // data_user ::= PASS_USER data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserLoginDataBaseUser$stack.peek()).value;
		if(a!=null)dataStack.add(new DataAnalyzer(getMyToken(),ListTypeData.PASSWORD,a.toString()));
              CUP$MyParserLoginDataBaseUser$result = parser.getSymbolFactory().newSymbol("data_user",5, ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.elementAt(CUP$MyParserLoginDataBaseUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginDataBaseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // data_user ::= NAME_PERSONAL_USER data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserLoginDataBaseUser$stack.peek()).value;
		if(a!=null)dataStack.add(new DataAnalyzer(getMyToken(),ListTypeData.NAME,a.toString()));
              CUP$MyParserLoginDataBaseUser$result = parser.getSymbolFactory().newSymbol("data_user",5, ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.elementAt(CUP$MyParserLoginDataBaseUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginDataBaseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // data_user ::= INSTITUCION data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserLoginDataBaseUser$stack.peek()).value;
		if(a!=null)dataStack.add(new DataAnalyzer(getMyToken(),ListTypeData.INSTITUTION,a.toString()));
              CUP$MyParserLoginDataBaseUser$result = parser.getSymbolFactory().newSymbol("data_user",5, ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.elementAt(CUP$MyParserLoginDataBaseUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginDataBaseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // data_user ::= DATE data 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserLoginDataBaseUser$stack.peek()).value;
		if(a!=null)dataStack.add(new DataAnalyzer(getMyToken(),ListTypeData.DATE,a.toString()));
              CUP$MyParserLoginDataBaseUser$result = parser.getSymbolFactory().newSymbol("data_user",5, ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.elementAt(CUP$MyParserLoginDataBaseUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginDataBaseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // data_user ::= error 
            {
              Object RESULT =null;

              CUP$MyParserLoginDataBaseUser$result = parser.getSymbolFactory().newSymbol("data_user",5, ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginDataBaseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // data_user ::= 
            {
              Object RESULT =null;

              CUP$MyParserLoginDataBaseUser$result = parser.getSymbolFactory().newSymbol("data_user",5, ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginDataBaseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // data ::= COLNO STRING 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$MyParserLoginDataBaseUser$stack.peek()).value;
		RESULT = a;
              CUP$MyParserLoginDataBaseUser$result = parser.getSymbolFactory().newSymbol("data",4, ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.elementAt(CUP$MyParserLoginDataBaseUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginDataBaseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // data ::= COLNO STRING_DATE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MyParserLoginDataBaseUser$stack.peek()).value;

              CUP$MyParserLoginDataBaseUser$result = parser.getSymbolFactory().newSymbol("data",4, ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.elementAt(CUP$MyParserLoginDataBaseUser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginDataBaseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // data ::= error 
            {
              Object RESULT =null;

              CUP$MyParserLoginDataBaseUser$result = parser.getSymbolFactory().newSymbol("data",4, ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginDataBaseUser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // data ::= 
            {
              Object RESULT =null;

              CUP$MyParserLoginDataBaseUser$result = parser.getSymbolFactory().newSymbol("data",4, ((java_cup.runtime.Symbol)CUP$MyParserLoginDataBaseUser$stack.peek()), RESULT);
            }
          return CUP$MyParserLoginDataBaseUser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MyParserLoginDataBaseUser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MyParserLoginDataBaseUser$do_action(
    int                        CUP$MyParserLoginDataBaseUser$act_num,
    java_cup.runtime.lr_parser CUP$MyParserLoginDataBaseUser$parser,
    java.util.Stack            CUP$MyParserLoginDataBaseUser$stack,
    int                        CUP$MyParserLoginDataBaseUser$top)
    throws java.lang.Exception
    {
              return CUP$MyParserLoginDataBaseUser$do_action_part00000000(
                               CUP$MyParserLoginDataBaseUser$act_num,
                               CUP$MyParserLoginDataBaseUser$parser,
                               CUP$MyParserLoginDataBaseUser$stack,
                               CUP$MyParserLoginDataBaseUser$top);
    }
}

}
